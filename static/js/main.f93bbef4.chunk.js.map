{"version":3,"sources":["pages/homePage.js","pages/404NotFound.js","components/blocks/shipFormComponent.js","components/blocks/portFormComponent.js","components/pickers/datePicker.js","components/blocks/voyageFormComponent.js","functions/list_getters/countryCodes.js","components/blocks/crewFormComponent.js","config/shipDetailsConfig.js","config/consts/defaultDataConst.js","config/consts/listOfOptionsConst.js","functions/readXML/readInvoiceXML.js","functions/list_getters/documentTypesGetter.js","functions/readXML/readCmrXML.js","functions/readXML/readXML.js","functions/readExcel/readXLSParent.js","components/blocks/passengersFormComponent.js","functions/generateXML/generateInvoice.js","functions/generateXML/generateCMR.js","functions/generateXML/generateXML.js","config/consts/unitList.js","components/blocks/healthFormComponent.js","components/blocks/shipStoresFormComponent.js","components/blocks/crewEffectsFormComponent.js","config/consts/kindOfPackagesList.js","components/blocks/cargoFormComponent.js","components/blocks/securityFormComponent.js","components/blocks/WasteFormComponent.js","config/consts/dgClassifications.js","config/consts/IMOHazardClasses.js","config/consts/packingGroups.js","config/consts/pollutionCodes.js","components/blocks/dpgFormComponent.js","components/blocks/cmrFormComponent.js","components/blocks/invoiceFormComponent.js","pages/carDetails.js","router.js","index.js"],"names":["console","log","shipCallsData","columns","field","headerName","width","useStyles","makeStyles","theme","root","display","appBar","zIndex","drawer","drawerContainer","overflow","content","flexGrow","padding","spacing","uploadFile","HomePage","history","classes","className","CssBaseline","AppBar","position","Toolbar","Grid","container","justify","Typography","variant","style","marginTop","height","align","rows","pageSize","onRowClick","e","push","id","disableSelectionOnClick","NotFound","React","Component","formControl","margin","minWidth","formControlNoMargin","button","topMargin","ShipFormComponent","datePicker","formControlNoMargin2","selectEmpty","PortForm","startDate","Date","props","onSelect","date","setState","color","onCommit","onChange","forceUpdate","state","this","column","key","moment","format","ReactDOM","findDOMNode","getElementsByTagName","selected","dateFormat","DropDownEditor","Editors","ports","ListOfPorts","map","port","code","countryCode","name","editable","editor","options","withStyles","data","updateData","component","gutterBottom","rowGetter","i","rowsCount","length","onGridRowsUpdated","fromRow","toRow","updated","slice","enableCellSelect","columnAutoWidth","Button","startIcon","onClick","row","NR","pop","countryCodes","require","getCountryCodes","Object","keys","getCountriesWithCodes","countriesWithCodes","countryWithCode","values","getCountryWithCodeByCode","GendersEditor","IDTypesEditor","RanksOfRatingEditor","countryCodesList","unshift","CountryCodesEditor","config","cmr","cmr_id","remarks","date_of_document","sender_id","sender_name","sender_language_code","sender_tax_id","sender_tax_type_code","sender_person_name","sender_complete_number","sender_email","sender_postcode","sender_street_name","sender_city_name","sender_country_code","sender_country_subdivision_name","consignee_id","consignee_name","consignee_language_code","consignee_tax_id","consignee_tax_type_code","consignee_person_name","consignee_complete_number","consignee_email","consignee_postcode","consignee_street_name","consignee_city_name","consignee_country_code","consignee_country_subdivision_name","carrier_id","carrier_name","carrier_language_code","carrier_tax_id","carrier_tax_type_code","carrier_person_name","carrier_complete_number","carrier_email","carrier_postcode","carrier_street_name","carrier_city_name","carrier_country_code","carrier_country_subdivision_name","sub_carrier_id","sub_carrier_name","sub_carrier_language_code","sub_carrier_tax_id","sub_carrier_tax_type_code","sub_carrier_person_name","sub_carrier_complete_number","sub_carrier_email","sub_carrier_postcode","sub_carrier_street_name","sub_carrier_city_name","sub_carrier_country_code","sub_carrier_country_subdivision_name","date_of_delivery","delivery_place_name","delivery_country_code","date_of_pickup","pickup_location_name","pickup_country_code","additional_note_1","additional_note_2","additional_note_3","gross_weight","volume","cod_amount","established_country_code","truck","trailer","instruction","documentsAttached","consignment","invoice","tradeLineItems","invoice_id","seller_id","seller_name","seller_language_code","seller_tax_id","seller_tax_type_code","seller_person_name","seller_complete_number","seller_email","seller_postcode","seller_street_name","seller_city_name","seller_country_code","seller_country_subdivision_name","buyer_id","buyer_name","buyer_language_code","buyer_tax_id","buyer_tax_type_code","buyer_person_name","buyer_complete_number","buyer_email","buyer_postcode","buyer_street_name","buyer_city_name","buyer_country_code","buyer_country_subdivision_name","net_weight","package_quantity","transport_means_id","occurrence_date_time","due_payable_amount","invoice_currency_code","ibanID","account_name","exemption_reason_code","payment_term_description","label","value","icon","readInvoiceXML","xml","children","tradeLineItem","tradeLineItemToSave","Name","Description","Net_weight","Gross_weight","Class_code","Origin_country","Charge_amount","Basis_quantity","Billed_quantity","Total_amount","Tax_total_amount","Net_total_amount","seller","buyer","relatedConsignment","documentTypes","getDocumentTypes","getDocumentsWithTypes","documentsWithTypes","documentWithType","getDocumentWithCodeByCode","documentType","readCmrXML","sender","consignee","carrier","sub_carrier","document","documentToSave","TypeCode","Remarks","includedConsignmentItems","transportPackages","item","transportPackage","consignmentToSave","Volume","Nature_of_goods","Number_of_packages","Method_of_pa—Åking","Marks_and_Nos","readXML","fileContent","xmlType","XMLParser","parseFromString","defaultData","readXLS","TransitEditor","PortEditor","generateInvoice","SupplyChainTradeTransaction","IncludedTradeLineItem","TradeProduct","NetWeight","GrossWeight","Classification","ClassCode","originCountryCode","split","OriginCountry","Code","LineTradeAgreement","ProductGrossPrice","ChargeAmount","BasisQuantity","LineTradeDelivery","BilledQuantity","LineTradeSettlement","MonetarySummation","LineTotalAmount","TaxTotalAmount","NetLineTotalAmount","HeaderTradeAgreement","Seller","ID","LanguageCode","DefinedContractDetails","PersonName","MobileTelephone","CompleteNumber","EmailAddress","URI","PostalAddress","Postcode","StreetName","CityName","CountryCode","ContryName","listOfCountries","CountrySubDivisionName","TaxRegistration","RegisteredTax","Buyer","HeaderTradeDelivery","RelatedConsignment","PackageQuantity","SpecifiedTransportMovement","UsedTransportMeans","ActualDespatchEvent","OccurenceDateTime","HeaderTradeSettlement","DuePayableAmount","InvoiceCurrencyCode","PaymentMeans","PayeeCreditorFinancialAccount","IBANID","TradeTax","ExemptionReasonCode","PaymentTerms","CIIMessage","ExchangedDocument","IssueDateTime","generateCMR","eCMRHeaderDetails","eCMRID","eCMRIssueDate","ContractualRemarks","AdditionalParticularNote","ContentText","IssueLocation","RoadConsignment","GrossVolume","CODAmount","Sender","Consignee","Carrier","SubsequentCarrier","documentTypeCode","AssociatedDocument","FormattedIssueDateTime","ConsigneeDeliveryEvent","ActualOccurrenceDateTime","ActualOccurrenceLocation","CountryName","CarrierPickUpEvent","consignment_item","IncludedConsignmentItem","SequenceNumber","GoodsDescription","IdentificationText","TransportPackage","ItemQuantity","ShippingMarks","MarkingText","TransportDetails","StageCode","ModeCode","ConsignirProvidedRegulatoryFormalitiesInstructions","MMTCCBDAeCMRMessage","downloadXMLfile","xmlValue","filename","file","Blob","a","createElement","url","URL","createObjectURL","href","download","body","appendChild","click","setTimeout","removeChild","window","revokeObjectURL","createXML","onError","checkForErrors","errors","Invoice","checkRequiredInvoice","forEach","el","_","isEmpty","checkRequiredFields","invoiceXML","xmlValueInvoice","declaration","cmrXML","xmlValueCMR","units","selectControl","labelControl","unitList","crewData","useState","open","error","severity","openAlert","setOpenAlert","Collapse","in","Alert","action","IconButton","aria-label","size","fontSize","hasOwnProperty","crewItem","find","element","parseInt","Family_name","Given_name","Rank_of_rating","kindOfPackages","KindOfPackagesEditor","kindOfPackagesList","UnitEditor","Seq","dgClassifications","groups","codes","IMOHazardClasses","packingGroups","pollutionCodes","cargoData","cargoItem","Container_number","Transport_unit","wasteTypesList","wasteTypes","wasteTypeFormatted","WasteTypesEditor","marginLeft","FormControl","fullWidth","InputLabel","Select","labelId","WasteDeliveryStatus","target","MenuItem","LastPortDelivered","index","TextField","type","LastPortDeliveredDate","substr","InputLabelProps","shrink","divisionLine","background","borderColor","documentTypesList","documentsAttachedRows","consignmentRows","correctDateTime","locationNumber","emptyDiv","alignItems","xs","ListOfLanguages","language","ListOfCountries","country","contentEditable","multiline","rowsMax","tradeLineItemsColumns","ListOfCurrencies","currency","cc","listOfOptions","listOfOptionsConst","drawerWidth","flexShrink","drawerPaper","getChildComponent","activeItem","setData","dataItem","onload","addEventListener","confirmationMessage","event","returnValue","CarDetails","location","pathname","indexOf","setActiveItem","defaultDataConst","openErrorDialog","setOpenErrorDialog","uploadAnchorEl","setUploadAnchorEl","downloadAnchorEl","setDownloadAnchorEl","handleClose","aria-controls","marginRight","aria-haspopup","currentTarget","Menu","anchorEl","keepMounted","Boolean","onClose","htmlFor","missingFields","block","title","text","getElementById","files","reader","FileReader","result","dataCopy","JSON","parse","stringify","readAsText","Drawer","paper","List","ListItem","ListItemIcon","ListItemText","primary","Dialog","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","Array","isArray","DialogActions","autoFocus","createBrowserHistory","AppRouter","path","exact","render","StrictMode"],"mappings":"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","file":"static/js/main.f93bbef4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {DataGrid} from '@material-ui/data-grid';\r\nimport shipCallsData from './../config/JSON/shipCallsData.json'\r\n\r\n\r\nconsole.log('COlumn data: ', shipCallsData)\r\nconst columns = [\r\n    {field: 'id', headerName: 'ID', width: 100},\r\n    {\r\n        field: 'TruckNumber',\r\n        headerName: 'Truck number',\r\n        width: 200,\r\n    },\r\n    {\r\n        field: 'Country',\r\n        headerName: 'Country',\r\n        width: 200,\r\n    },\r\n    {\r\n        field: 'DocumentNumber',\r\n        headerName: '‚Ññ of document',\r\n        width: 200,\r\n    },\r\n    {\r\n        field: 'DateOfDocument',\r\n        headerName: 'Date of document',\r\n        width: 200,\r\n    },\r\n];\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n    },\r\n    drawerContainer: {\r\n        overflow: 'auto',\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        padding: theme.spacing(3),\r\n    },\r\n    uploadFile: {\r\n        display: 'none'\r\n    }\r\n}));\r\n\r\nexport default function HomePage({history}) {\r\n\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <CssBaseline/>\r\n            <AppBar position=\"fixed\" className={classes.appBar}>\r\n                <Toolbar>\r\n                    <Grid container justify={'space-between'}>\r\n                        <Typography variant=\"h6\">\r\n                            –ü—Ä–æ—Ç–æ—Ç–∏–ø –£–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ –ú–æ—Ä—Å—å–∫–æ–≥–æ –Ñ–¥–∏–Ω–æ–≥–æ –í—ñ–∫–Ω–∞<br/>Ukrainian Maritime Single Window Prototype\r\n                        </Typography>\r\n                    </Grid>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <main className={classes.content}>\r\n                <Toolbar/>\r\n\r\n                <Grid container style={{marginTop: '10px'}} justify={'center'}>\r\n                    <Typography variant=\"h5\">\r\n                        –ü–µ—Ä–µ–ª—ñ–∫ —Å—É–¥–Ω–æ–∑–∞—Ö–æ–¥—ñ–≤ / Ship calls\r\n                    </Typography>\r\n                </Grid>\r\n\r\n                <Grid container style={{marginTop: '30px'}} justify={'center'}>\r\n\r\n                    <div style={{width: '905px', height: '300px', align:'center'}}>\r\n                        <DataGrid\r\n                            rows={shipCallsData}\r\n                            columns={columns}\r\n                            pageSize={4}\r\n                            onRowClick={(e) => {\r\n                                history.push(`/details/${e.id}`);\r\n                            }}\r\n                            disableSelectionOnClick\r\n                        />\r\n                    </div>\r\n                </Grid>\r\n\r\n                <Grid container style={{marginTop: '20px'}} justify={'center'}>\r\n                    <Typography style={{width: '900px'}} variant=\"p\">\r\n                        Prototype is aimed to help public authorities implement electronic information exchange systems.\r\n                        <br/><br/>\r\n                        Prototype implements the Annex to the Convention on the Facilitation of International Navigation\r\n                        of 1965, approved by International Maritime Organization Resolution FAL.12 (40), Standard\r\n                        1.3bis, based on UN/CEFACT MMT reference data model (RDM) and refers to the European Union‚Äôs\r\n                        Maritime Single Window Environment (of the European Maritime Safety Agency, EMSA) requirements.\r\n                    </Typography>\r\n                </Grid>\r\n            </main>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\n\r\nexport default class NotFound extends React.Component {\r\n\r\n    render() {\r\n        return <h1>404 Page does not exists :(</h1>\r\n    }\r\n\r\n}","import React from 'react'\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\n\r\nimport countryList from \"../../functions/countryList\"\r\nimport ListOfPorts from \"../../config/JSON/listOfPorts\";\r\nimport ListOfShipTypes from \"../../config/consts/listOfShipTypesConst\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 200,\r\n    },\r\n    formControlNoMargin: {\r\n        minWidth: 225,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    topMargin: {\r\n        marginTop: theme.spacing(5)\r\n    }\r\n}));\r\n\r\nconst ShipFormComponent = ({data, updateData, locationNumber}) => {\r\n    const classes = useStyles();\r\n\r\n    const marginTop = {marginTop: '30px'};\r\n    const miniMarginTop = {marginTop: '10px'};\r\n    const emptyDIV = <div style={{width: '225px'}}/>;\r\n\r\n    return <>\r\n\r\n        <Typography variant=\"h3\" component=\"h3\" gutterBottom>\r\n            Ship information\r\n        </Typography>\r\n\r\n        <Typography style={marginTop} variant=\"h5\" classes={classes.topMargin} component=\"h5\" gutterBottom>\r\n            Ship identification\r\n        </Typography>\r\n\r\n        <Grid container style={marginTop} classes={classes.topMargin} justify=\"space-between\">\r\n            <TextField\r\n                label=\"Ship name\"\r\n                contentEditable={false}\r\n                value={data.name}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"IMO number\"\r\n                value={data.IMOnumber}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Other ship related information\"\r\n                value={data.otherInfo}\r\n                onChange={(e) =>\r\n                    updateData({otherInfo: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n        </Grid>\r\n\r\n        <Grid container style={marginTop} justify={'space-between'}>\r\n            <TextField\r\n                label=\"Call sign\"\r\n                value={data.callSign}\r\n                onChange={(e) =>\r\n                    updateData({callSign: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"MMSI number\"\r\n                value={data.mmsiNumner}\r\n                onChange={(e) =>\r\n                    updateData({mmsiNumner: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            {emptyDIV}\r\n        </Grid>\r\n\r\n        <Typography style={marginTop} variant=\"h5\" classes={classes.topMargin} component=\"h5\" gutterBottom>\r\n            Ship particulars\r\n        </Typography>\r\n\r\n        <Grid style={marginTop} container justify={'space-between'}>\r\n\r\n            <FormControl\r\n                variant=\"outlined\"\r\n                className={classes.formControlNoMargin}\r\n            >\r\n                <InputLabel id=\"flag-state-label\">Flag state</InputLabel>\r\n                <Select\r\n                    labelId=\"flag-state-label\"\r\n                    value={data.flagState}\r\n                    onChange={(e) => {\r\n                        updateData({flagState: e.target.value})\r\n                    }}\r\n                >\r\n                    {countryList.map((item, index) => {\r\n                        let country = item.split(\":\")[0];\r\n                        return <MenuItem key={index} value={country}>\r\n                            {item}\r\n                        </MenuItem>\r\n                    })}\r\n                </Select>\r\n            </FormControl>\r\n\r\n\r\n            <FormControl\r\n                variant=\"outlined\"\r\n                className={classes.formControlNoMargin}\r\n            >\r\n                <InputLabel id=\"ship-type-label\">Ship state</InputLabel>\r\n                <Select\r\n                    labelId=\"ship-type-label\"\r\n                    value={data.shipType}\r\n                    onChange={(e) => {\r\n                        updateData({shipType: e.target.value})\r\n                    }}\r\n                >\r\n                    {ListOfShipTypes.map((item, index) =>\r\n                        <MenuItem key={index} value={item.code}>\r\n                            {`${item.name}(${item.code})`}\r\n                        </MenuItem>\r\n                    )}\r\n                </Select>\r\n            </FormControl>\r\n\r\n            {emptyDIV}\r\n        </Grid>\r\n\r\n        <Grid container style={marginTop} justify={'space-between'}>\r\n            <TextField\r\n                label=\"Gross tonnage\"\r\n                value={data.grossTonnage}\r\n                onChange={(e) =>\r\n                    updateData({grossTonnage: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Net tonnage\"\r\n                value={data.netTonnage}\r\n                onChange={(e) =>\r\n                    updateData({netTonnage: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            {emptyDIV}\r\n        </Grid>\r\n\r\n        <Typography style={marginTop} variant=\"h5\" classes={classes.topMargin} component=\"h5\" gutterBottom>\r\n            Certificate of registry\r\n        </Typography>\r\n\r\n        <Grid style={marginTop} container justify={'space-between'}>\r\n            <FormControl\r\n                variant=\"outlined\"\r\n                className={classes.formControlNoMargin}\r\n            >\r\n                <InputLabel id=\"port-label\">Port</InputLabel>\r\n                <Select\r\n                    labelId=\"port-label\"\r\n                    value={data.port}\r\n                    onChange={(e) => {\r\n                        updateData({port: e.target.value})\r\n                    }}\r\n                >\r\n                    {ListOfPorts.map((port, index) =>\r\n                        <MenuItem key={index} value={`${port.code}`}>\r\n                            {`${port.code} - ${port.countryCode} - ${port.name}`}\r\n                        </MenuItem>\r\n                    )}\r\n                </Select>\r\n            </FormControl>\r\n\r\n            <TextField\r\n                label=\"Date of issue\"\r\n                type=\"date\"\r\n                style={{minWidth: '225px'}}\r\n                variant={'outlined'}\r\n                value={correctDateTime(data.issueDate)}\r\n                onChange={(e) =>\r\n                    updateData({issueDate: e.target.value})}\r\n                InputLabelProps={{\r\n                    shrink: true,\r\n                }}\r\n            />\r\n\r\n            <TextField\r\n                label=\"Number\"\r\n                variant={'outlined'}\r\n                value={data.certificateNumber}\r\n                onChange={(e) =>\r\n                    updateData({certificateNumber: e.target.value})\r\n                }\r\n            />\r\n\r\n        </Grid>\r\n\r\n        <Typography style={marginTop} variant=\"h5\" classes={classes.topMargin} component=\"h5\" gutterBottom>\r\n            Company\r\n        </Typography>\r\n\r\n        <Grid container style={marginTop} justify={'space-between'}>\r\n            <TextField\r\n                style={{width: 'calc(90% - 225px)'}}\r\n                label=\"Company name\"\r\n                multiline\r\n                rowsMax={2}\r\n                value={data.companyName}\r\n                onChange={(e) => {\r\n                    updateData({companyName: e.target.value})\r\n                }}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"IMO company number\"\r\n                variant=\"outlined\"\r\n                value={data.iMOCompany}\r\n                onChange={(e) => {\r\n                    let iMOCompany = e.target.value;\r\n                    updateData({iMOCompany})\r\n                }}\r\n            />\r\n        </Grid>\r\n\r\n        <Grid container style={miniMarginTop} justify={'space-between'}>\r\n            <TextField\r\n                label=\"Phone\"\r\n                margin={'normal'}\r\n                value={data.phone}\r\n                onChange={(e) => {\r\n                    let phone = e.target.value;\r\n                    updateData({phone})\r\n                }}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Fax\"\r\n                margin={'normal'}\r\n                value={data.fax}\r\n                onChange={(e) => {\r\n                    let fax = e.target.value;\r\n                    updateData({fax})\r\n                }}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Email\"\r\n                margin={'normal'}\r\n                value={data.email}\r\n                onChange={(e) => {\r\n                    let email = e.target.value;\r\n                    updateData({email})\r\n                }}\r\n                variant=\"outlined\"\r\n            />\r\n        </Grid>\r\n\r\n        <Grid container style={miniMarginTop} justify={'space-between'}>\r\n            <TextField\r\n                label=\"Year of built\"\r\n                margin={'normal'}\r\n                value={data.builtYear}\r\n                onChange={(e) => {\r\n                    let builtYear = e.target.value;\r\n                    updateData({builtYear})\r\n                }}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Dead weight\"\r\n                margin={'normal'}\r\n                value={data.deadWeight}\r\n                onChange={(e) => {\r\n                    let deadWeight = e.target.value;\r\n                    updateData({deadWeight})\r\n                }}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            {emptyDIV}\r\n        </Grid>\r\n\r\n        <Grid container style={miniMarginTop} justify={'space-between'}>\r\n            <TextField\r\n                label=\"Length overall\"\r\n                margin={'normal'}\r\n                value={data.length}\r\n                onChange={(e) => {\r\n                    let length = e.target.value;\r\n                    updateData({length})\r\n                }}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Beam\"\r\n                margin={'normal'}\r\n                value={data.beam}\r\n                onChange={(e) => {\r\n                    let beam = e.target.value;\r\n                    updateData({beam})\r\n                }}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Summer draught\"\r\n                margin={'normal'}\r\n                value={data.summerDraught}\r\n                onChange={(e) => {\r\n                    let summerDraught = e.target.value;\r\n                    updateData({summerDraught})\r\n                }}\r\n                variant=\"outlined\"\r\n            />\r\n        </Grid>\r\n    </>\r\n\r\n\r\n}\r\n\r\nfunction correctDateTime(date) {\r\n    date = \"\" + date;\r\n    return date.substr(0, 16);\r\n}\r\n\r\nexport default ShipFormComponent;","import React from \"react\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select'\r\nimport '@date-io/date-fns';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport ListOfPurposesOfCalls from '../../config/consts/listOfPurposesOfCallsConst';\r\nimport ListOfPorts from '../../config/JSON/listOfPorts'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 225,\r\n    },\r\n    datePicker: {\r\n        minWidth: 250,\r\n        width: 250\r\n    },\r\n    formControlNoMargin: {\r\n        minWidth: 225,\r\n    },\r\n    formControlNoMargin2: {\r\n        minWidth: 225,\r\n        // minHeight: 60\r\n    },\r\n    selectEmpty: {\r\n        marginTop: theme.spacing(2),\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n}));\r\n\r\n\r\nfunction PortForm({data, updateData, locationNumber}) {\r\n    const classes = useStyles();\r\n    const emptyDiv = <div className={classes.formControlNoMargin} style={{height: '0px'}}/>\r\n\r\n\r\n    return <>\r\n        <Typography variant=\"h3\" component=\"h3\" gutterBottom>\r\n            Port information\r\n        </Typography>\r\n\r\n        <Grid container justify={'space-between'}>\r\n            <FormControl\r\n                variant=\"outlined\"\r\n                className={classes.formControlNoMargin}\r\n            >\r\n                <InputLabel id=\"departure-arrival-label\">Departure / Arrival</InputLabel>\r\n\r\n                <Select\r\n                    labelId=\"departure-arrival-label\"\r\n                    value={data.arrivalDeparture}\r\n                    onChange={(e) => {\r\n                        updateData({arrivalDeparture: e.target.value})\r\n                    }}\r\n                >\r\n                    <MenuItem value={'Arrival'}>Arrival</MenuItem>\r\n                    <MenuItem value={'Departure'}>Departure</MenuItem>\r\n                </Select>\r\n            </FormControl>\r\n\r\n            <TextField\r\n                label=\"Voyage Number:\"\r\n                value={data.voyageNumber}\r\n                onChange={(e) => updateData({voyageNumber: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            {emptyDiv}\r\n        </Grid>\r\n\r\n        <Typography variant=\"h5\" component=\"h5\" gutterBottom style={{marginTop: '30px'}}>\r\n            Port of call\r\n        </Typography>\r\n\r\n        {/*Port of call and all time pickers*/}\r\n        <Grid container justify=\"space-between\">\r\n\r\n            <FormControl\r\n                variant=\"outlined\"\r\n                className={classes.formControlNoMargin}\r\n                margin={\"normal\"}\r\n            >\r\n                <InputLabel id=\"port-of-call-label\">Port of call</InputLabel>\r\n\r\n                <Select\r\n                    labelId=\"port-of-call-label\"\r\n                    value={data.portOfCall}\r\n                >\r\n                    {ListOfPorts.map((port, index) =>\r\n                        <MenuItem key={index} value={`${port.code}`}>\r\n                            {`${port.code} - ${port.countryCode} - ${port.name}`}\r\n                        </MenuItem>\r\n                    )}\r\n                </Select>\r\n            </FormControl>\r\n\r\n\r\n            <TextField\r\n                label=\"ETA to port of call\"\r\n                type=\"datetime-local\"\r\n                variant={'outlined'}\r\n                className={classes.datePicker}\r\n                margin={\"normal\"}\r\n                value={correctDateTime(data.ETAPortOfCall)}\r\n                InputLabelProps={{\r\n                    shrink: true,\r\n                }}\r\n                inputProps={{\r\n                    step: 300, // 5 min\r\n                }}\r\n            />\r\n\r\n            <TextField\r\n                label=\"ATA to port of call\"\r\n                type=\"datetime-local\"\r\n                variant={'outlined'}\r\n                className={classes.datePicker}\r\n                margin={\"normal\"}\r\n                value={correctDateTime(data.ATAPortOfCall)}\r\n                onChange={(e) =>\r\n                    updateData({ATAPortOfCall: e.target.value})}\r\n                InputLabelProps={{\r\n                    shrink: true,\r\n                }}\r\n            />\r\n        </Grid>\r\n\r\n        <Grid container justify=\"space-between\">\r\n            <TextField\r\n                style={{marginTop: '15px'}}\r\n                value={data.portFacilityAtArrival}\r\n                onChange={(e) =>\r\n                    updateData({portFacilityAtArrival: e.target.value})}\r\n                label=\"Port facility at arrival\"\r\n                variant=\"outlined\"\r\n                margin={\"normal\"}\r\n            />\r\n\r\n\r\n            <TextField\r\n                label=\"ETD to port of call\"\r\n                type=\"datetime-local\"\r\n                contentEditable={false}\r\n                className={classes.datePicker}\r\n                variant={'outlined'}\r\n                margin={\"normal\"}\r\n                value={correctDateTime(data.ETDPortOfCall)}\r\n                onChange={(e) =>\r\n                    updateData({ETDPortOfCall: e.target.value})}\r\n                InputLabelProps={{\r\n                    shrink: true,\r\n                }}\r\n            />\r\n\r\n\r\n            <TextField\r\n                label=\"ATD to port of call\"\r\n                type=\"datetime-local\"\r\n                className={classes.datePicker}\r\n                variant={'outlined'}\r\n                margin={\"normal\"}\r\n                value={correctDateTime(data.ATDPortOfCall)}\r\n                onChange={(e) =>\r\n                    updateData({ATDPortOfCall: e.target.value})}\r\n                InputLabelProps={{\r\n                    shrink: true,\r\n                }}\r\n            />\r\n        </Grid>\r\n\r\n        {/*Port of arrival / last port of call / next port of call*/}\r\n        <Grid container justify=\"space-between\" style={{marginTop: '30px'}}>\r\n\r\n            <FormControl\r\n                variant=\"outlined\"\r\n                className={classes.formControlNoMargin}\r\n            >\r\n                <InputLabel id=\"port-of-arrival-label\">Port of arrival</InputLabel>\r\n\r\n                <Select\r\n                    labelId=\"port-of-arrival-label\"\r\n                    value={data.portOfArrival}\r\n                    onChange={(e) => {\r\n                        updateData({portOfArrival: e.target.value})\r\n                    }}\r\n                >\r\n                    {ListOfPorts.map((port, index) =>\r\n                        <MenuItem key={index} value={`${port.code}`}>\r\n                            {`${port.code} - ${port.countryCode} - ${port.name}`}\r\n                        </MenuItem>\r\n                    )}\r\n                </Select>\r\n            </FormControl>\r\n\r\n            <FormControl\r\n                variant=\"outlined\"\r\n                className={classes.formControlNoMargin}\r\n            >\r\n                <InputLabel id=\"last-port-call-label\">Last port of call</InputLabel>\r\n                <Select\r\n                    labelId=\"last-port-call-label\"\r\n                    value={data.lastPortOfCall}\r\n                    onChange={(e) => {\r\n                        updateData({lastPortOfCall: e.target.value})\r\n                    }}\r\n                >\r\n                    {ListOfPorts.map((port, index) =>\r\n                        <MenuItem key={index} value={`${port.code}`}>\r\n                            {`${port.code} - ${port.countryCode} - ${port.name}`}\r\n                        </MenuItem>\r\n                    )}\r\n                </Select>\r\n            </FormControl>\r\n\r\n\r\n            <FormControl\r\n                variant=\"outlined\"\r\n                // required\r\n                className={classes.formControlNoMargin}\r\n            >\r\n                <InputLabel id=\"next-port-call-label\">Next port of call</InputLabel>\r\n                <Select\r\n                    labelId=\"next-port-call-label\"\r\n                    value={data.nextPortOfCall}\r\n                    onChange={(e) => {\r\n                        updateData({nextPortOfCall: e.target.value})\r\n                    }}\r\n                >\r\n                    {ListOfPorts.map((port, index) =>\r\n                        <MenuItem key={index} value={`${port.code}`}>\r\n                            {`${port.code} - ${port.countryCode} - ${port.name}`}\r\n                        </MenuItem>\r\n                    )}\r\n                </Select>\r\n            </FormControl>\r\n        </Grid>\r\n\r\n        <FormControl\r\n            variant=\"outlined\"\r\n            required\r\n            className={classes.formControlNoMargin}\r\n            style={{marginTop: \"30px\"}}\r\n        >\r\n            <InputLabel id=\"next-port-call-label\">Call at anchorage</InputLabel>\r\n            <Select\r\n                labelId=\"next-port-call-label\"\r\n                value={data.callAnchorage}\r\n                onChange={(e) => {\r\n                    updateData({callAnchorage: e.target.value})\r\n                }}\r\n            >\r\n                <MenuItem value={'Yes'}>Yes</MenuItem>\r\n                <MenuItem value={'No'}>No</MenuItem>\r\n            </Select>\r\n        </FormControl>\r\n\r\n        <Typography variant=\"h5\" component=\"h5\" style={{marginTop: '30px'}} gutterBottom>\r\n            Position at port of call\r\n        </Typography>\r\n\r\n        {/*Latitude, longitute and time*/\r\n        }\r\n        <Grid container justify=\"space-between\" style={{marginTop: '15px'}}>\r\n\r\n            <TextField\r\n                label=\"Latitude\"\r\n                value={data.position.latitude}\r\n                onChange={(e) => {\r\n                    let latitude = e.target.value;\r\n                    let position = data.position;\r\n                    updateData({position: {...position, latitude}})\r\n                }}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Longitude\"\r\n                value={data.position.longitude}\r\n                onChange={(e) => {\r\n                    let longitude = e.target.value;\r\n                    let position = data.position;\r\n                    updateData({position: {...position, longitude}})\r\n                }}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Time\"\r\n                type=\"datetime-local\"\r\n                className={classes.datePicker}\r\n                variant={'outlined'}\r\n                value={correctDateTime(data.position.time)}\r\n                onChange={(e) => {\r\n                    let time = e.target.value;\r\n                    let position = {...data.position, time};\r\n                    updateData({position})\r\n                }}\r\n                InputLabelProps={{\r\n                    shrink: true,\r\n                }}\r\n                inputProps={{\r\n                    step: 300, // 5 min\r\n                }}\r\n            />\r\n\r\n        </Grid>\r\n\r\n        <TextField\r\n            style={{marginTop: '30px'}}\r\n            id=\"cargo-description\"\r\n            label=\"Brief description of onboard cargo\"\r\n            multiline\r\n            fullWidth\r\n            rowsMax={4}\r\n            value={data.cargoDescription}\r\n            onChange={(e) => updateData({cargoDescription: e.target.value})}\r\n            variant=\"outlined\"\r\n        />\r\n\r\n        <Typography variant=\"h5\" component=\"h5\" style={{marginTop: '30px'}} gutterBottom>\r\n            Name of master\r\n        </Typography>\r\n\r\n        <Grid container justify={'space-between'}>\r\n\r\n            <TextField\r\n                label=\"Family name\"\r\n                value={data.nameOfMaster.familyName}\r\n                onChange={(e) => {\r\n                    let familyName = e.target.value;\r\n                    let nameOfMaster = {...data.nameOfMaster, familyName};\r\n                    updateData({nameOfMaster})\r\n                }}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Given name\"\r\n                value={data.nameOfMaster.givenName}\r\n                onChange={(e) => {\r\n                    let givenName = e.target.value;\r\n                    let nameOfMaster = {...data.nameOfMaster, givenName};\r\n                    updateData({nameOfMaster})\r\n                }}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            {emptyDiv}\r\n\r\n        </Grid>\r\n\r\n        <Typography variant=\"h5\" component=\"h5\" style={{marginTop: '30px'}} gutterBottom>\r\n            Purpose of call\r\n        </Typography>\r\n        <div style={{marginTop: \"20px\"}}>\r\n            {data.callPurpose.map((item, index) => <div key={index}>\r\n\r\n                <FormControl\r\n                    key={index}\r\n                    variant=\"outlined\"\r\n                    className={classes.formControlNoMargin}\r\n\r\n                >\r\n\r\n                    <InputLabel id={`purpose-of-call-label${index}`}>\r\n                        {index === 0 ? 'Call purpose' : `Call purpose (${index})`}\r\n                    </InputLabel>\r\n\r\n                    <Select\r\n                        labelId={`purpose-of-call-label${index}`}\r\n                        value={data.callPurpose[index]}\r\n                        onChange={(e) => {\r\n                            let purposeArr = data.callPurpose;\r\n                            purposeArr[index] = e.target.value;\r\n                            updateData({callPurpose: purposeArr})\r\n                        }}\r\n                    >\r\n                        {ListOfPurposesOfCalls.map((purpose, index) => {\r\n                            return <MenuItem key={index} value={purpose.callPurposeCode}>\r\n                                {`${purpose.callPurposeText}(${purpose.callPurposeCode})`}\r\n                            </MenuItem>\r\n                        })}\r\n                    </Select>\r\n                </FormControl>\r\n\r\n                <IconButton\r\n                    style={{\r\n                        marginLeft: '10px',\r\n                        marginBottom: '20px'\r\n                    }}\r\n                    color={'secondary'}\r\n                    aria-label=\"delete\"\r\n                    variant={'outlined'}\r\n                    onClick={() => {\r\n                        if (index === 0 && data.callPurpose.length === 1) {\r\n                            updateData({callPurpose: ['']})\r\n                        } else {\r\n                            let slicedData = JSON.parse(JSON.stringify(data.callPurpose));\r\n                            slicedData.splice(index, 1);\r\n                            updateData({callPurpose: slicedData})\r\n                        }\r\n                    }}\r\n                >\r\n                    <DeleteIcon/>\r\n                </IconButton>\r\n\r\n            </div>)}\r\n\r\n            <Button\r\n                style={{marginTop: '15px'}}\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n                disabled={data.callPurpose[data.callPurpose.length - 1] === ''}\r\n                className={classes.button}\r\n                onClick={() => updateData({purposeOfCall: data.callPurpose.push('')})}\r\n                startIcon={<AddIcon/>}\r\n            >\r\n                Add new row\r\n            </Button>\r\n\r\n        </div>\r\n\r\n        <TextField\r\n            style={{marginTop: '20px'}}\r\n            id=\"air-draught-field\"\r\n            label=\"Air draught\"\r\n            value={data.airDraught}\r\n            onChange={(e) => updateData({airDraught: e.target.value})}\r\n            variant=\"outlined\"\r\n        />\r\n\r\n\r\n        <Typography variant=\"h5\" component=\"h5\" style={{marginTop: '30px'}} gutterBottom>\r\n            {data.arrivalDeparture ? data.arrivalDeparture : 'Departure'} draught\r\n        </Typography>\r\n\r\n        <Grid container justify={'space-between'}>\r\n            <TextField\r\n                label=\"Fore draught\"\r\n                value={data.arrivalDraught.foreDraught}\r\n                onChange={(e) => {\r\n                    let foreDraught = e.target.value;\r\n                    let arrivalDraught = {...data.arrivalDraught, foreDraught};\r\n                    updateData({arrivalDraught})\r\n                }}\r\n                margin={'normal'}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Mid-ship draught\"\r\n                value={data.arrivalDraught.midShipDraught}\r\n                onChange={(e) => {\r\n                    let midShipDraught = e.target.value;\r\n                    let arrivalDraught = {...data.arrivalDraught, midShipDraught};\r\n                    updateData({arrivalDraught})\r\n                }}\r\n                margin={'normal'}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Aft draught\"\r\n                value={data.arrivalDraught.aftDraught}\r\n                onChange={(e) => {\r\n                    let aftDraught = e.target.value;\r\n                    let arrivalDraught = {...data.arrivalDraught, aftDraught};\r\n                    updateData({arrivalDraught})\r\n                }}\r\n                margin={'normal'}\r\n                variant=\"outlined\"\r\n            />\r\n        </Grid>\r\n\r\n\r\n        <Typography variant=\"h5\" component=\"h5\" style={{marginTop: '30px'}} gutterBottom>\r\n            Name and contact details of ship's agent\r\n        </Typography>\r\n\r\n        <Grid container justify={'space-between'}>\r\n            <TextField\r\n                style={{width: 'calc(90% - 220px)'}}\r\n                label=\"Name\"\r\n                multiline\r\n                rowsMax={2}\r\n                value={data.agent.company}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Mobile telephone\"\r\n                variant=\"outlined\"\r\n                value={data.agent.contactNumbers.mobileTelephone}\r\n                onChange={(e) => {\r\n                    let mobileTelephone = e.target.value;\r\n                    let contactNumbers = {...data.agent.contactNumbers, mobileTelephone};\r\n                    let agent = {...data.agent, contactNumbers};\r\n                    updateData({agent})\r\n                }}\r\n            />\r\n        </Grid>\r\n\r\n        <Grid container justify={'space-between'}>\r\n            <TextField\r\n                label=\"Business telephone\"\r\n                margin={'normal'}\r\n                value={data.agent.contactNumbers.businessTelephone}\r\n                onChange={(e) => {\r\n                    let businessTelephone = e.target.value;\r\n                    let contactNumbers = {...data.agent.contactNumbers, businessTelephone};\r\n                    let agent = {...data.agent, contactNumbers};\r\n                    updateData({agent})\r\n                }}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Telefax\"\r\n                margin={'normal'}\r\n                value={data.agent.contactNumbers.telefax}\r\n                onChange={(e) => {\r\n                    let telefax = e.target.value;\r\n                    let contactNumbers = {...data.agent.contactNumbers, telefax};\r\n                    let agent = {...data.agent, contactNumbers};\r\n                    updateData({agent})\r\n                }}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Email\"\r\n                margin={'normal'}\r\n                value={data.agent.contactNumbers.EMail}\r\n                onChange={(e) => {\r\n                    let EMail = e.target.value;\r\n                    let contactNumbers = {...data.agent.contactNumbers, EMail};\r\n                    let agent = {...data.agent, contactNumbers};\r\n                    updateData({agent})\r\n                }}\r\n                variant=\"outlined\"\r\n            />\r\n        </Grid>\r\n\r\n        <Typography variant=\"h5\" component=\"h5\" style={{marginTop: '30px'}} gutterBottom>\r\n            Number of persons on board\r\n        </Typography>\r\n\r\n        <Grid container justify={'space-between'}>\r\n            <TextField\r\n                label=\"Number of persons\"\r\n                margin={'normal'}\r\n                value={data.personsOnBoard.numberOfPersonsOnBoard}\r\n                onChange={(e) => {\r\n                    let numberOfPersonsOnBoard = e.target.value;\r\n                    let personsOnBoard = {...data.personsOnBoard, numberOfPersonsOnBoard};\r\n                    updateData({personsOnBoard});\r\n                }}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Number of crew\"\r\n                margin={'normal'}\r\n                value={data.personsOnBoard.crew}\r\n                onChange={(e) => {\r\n                    let crew = e.target.value;\r\n                    let personsOnBoard = {...data.personsOnBoard, crew};\r\n                    updateData({personsOnBoard});\r\n                }}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Number of passengers\"\r\n                margin={'normal'}\r\n                value={data.personsOnBoard.passengers}\r\n                onChange={(e) => {\r\n                    let passengers = e.target.value;\r\n                    let personsOnBoard = {...data.personsOnBoard, passengers};\r\n                    updateData({personsOnBoard});\r\n                }}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n        </Grid>\r\n\r\n        <Grid container justify={'space-between'}>\r\n            <FormControl\r\n                variant=\"outlined\"\r\n                className={classes.formControlNoMargin2}\r\n                margin={\"normal\"}\r\n            >\r\n                <InputLabel id=\"stowaways-label\">Have any stowaways been found on boards</InputLabel>\r\n\r\n                <Select\r\n                    className={classes.formControlNoMargin2}\r\n                    labelId=\"stowaways-label\"\r\n                    value={data.stowaways}\r\n                    onChange={(e) => updateData({stowaways: e.target.value})}\r\n                >\r\n                    <MenuItem value={'Yes'}>Yes</MenuItem>\r\n                    <MenuItem value={'No'}>No</MenuItem>\r\n                </Select>\r\n            </FormControl>\r\n\r\n            <TextField\r\n                label=\"Period of stay\"\r\n                margin={'normal'}\r\n                style={{marginLeft: '30px'}}\r\n                variant=\"outlined\"\r\n                value={data.periodOfStay}\r\n                onChange={(e) =>\r\n                    updateData({periodOfStay: e.target.value})\r\n                }\r\n            />\r\n\r\n            {emptyDiv}\r\n\r\n        </Grid>\r\n    </>\r\n}\r\n\r\nfunction correctDateTime(date) {\r\n    date = \"\" + date;\r\n    return date.substr(0, 16);\r\n}\r\n\r\nexport default PortForm;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport moment from \"moment\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nlet startDate = new Date();\r\n\r\nclass datePicker extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {color: new Date()};\r\n    }\r\n\r\n    getValue() {\r\n        return {[this.props.column.key]: moment(startDate).format(\"DD/MM/YYYY\")};\r\n    }\r\n\r\n    getInputNode() {\r\n        return ReactDOM.findDOMNode(this).getElementsByTagName(\"input\")[0];\r\n    }\r\n\r\n    onSelect = date => {\r\n        return this.setState({color: date}, () => this.props.onCommit());\r\n    };\r\n    // onChange = date => {\r\n    //     return this.setState({ color: date }, () => this.props.onCommit());\r\n    // };\r\n    // onChange = date => {\r\n    //\r\n    //     console.log(\"\")\r\n    //     if (moment(date,\"DD/MM/YYYY\").isValid()){\r\n    //         return this.setState({ color: date }, () => this.props.onCommit());\r\n    //     }\r\n    //\r\n    //\r\n    //\r\n    // };;\r\n\r\n    onChange = date => {\r\n        startDate = date;\r\n        this.forceUpdate()\r\n    };\r\n    ;\r\n\r\n    render() {\r\n        return <DatePicker selected={startDate} onChange={this.onChange} dateFormat=\"dd/MM/yyyy\"/>;\r\n    }\r\n}\r\n\r\nexport default datePicker;","import React from \"react\";\r\nimport ReactDataGrid from 'react-data-grid';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {Editors} from 'react-data-grid-addons';\r\nimport datePicker from \"../pickers/datePicker\";\r\nimport ListOfPorts from \"../../config/JSON/listOfPorts\";\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\n\r\nconst {DropDownEditor} = Editors;\r\n\r\nconst styles = (theme) => ({\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n            width: '25ch',\r\n        },\r\n    },\r\n});\r\n\r\nconst ports = [\"(...)\"];\r\nListOfPorts.map((port) =>\r\n    ports.push(port.code + ' - ' + port.countryCode + ' - ' + port.name)\r\n);\r\nconst PortEditor = <DropDownEditor options={ports}/>;\r\nconst securityLevels = [\"(...)\", \"Security level 1\", \"Security level 2\", \"Security level 3\"];\r\nconst SecurityEditor = <DropDownEditor options={securityLevels}/>;\r\n\r\nconst columns = [\r\n    {key: \"NR\", name: \"NR\", editable: true, width: 50},\r\n    {key: \"Date_of_arrival\", name: \"Date of arrival\", editable: true, editor: datePicker},\r\n    {key: \"Date_of_departure\", name: \"Date of departure\", editable: true, editor: datePicker},\r\n    {key: \"Port\", name: \"Port(Locode)\", editable: true, editor: PortEditor},\r\n    {key: \"Port_facility\", name: \"Port facility(GISIS)\", editable: true},\r\n    {key: \"Security_level\", name: \"Security level\", editable: true, editor: SecurityEditor},\r\n    {\r\n        key: \"Security_measures\",\r\n        name: \"Special or additional security measures taken by the ship\",\r\n        editable: true,\r\n        width: 400\r\n    }\r\n];\r\n\r\n\r\nfunction VoyageForm({data, updateData}) {\r\n    function addRow() {\r\n        console.log(\"adding row\");\r\n        let number = data.rows.length + 1\r\n        let row = {NR: number}\r\n        data.rows.push(row);\r\n        updateData(data)\r\n    }\r\n\r\n    function deleteRow() {\r\n        data.rows.pop();\r\n        updateData(data)\r\n    }\r\n\r\n    function onGridRowsUpdated({fromRow, toRow, updated}) {\r\n\r\n        const rows = data.rows.slice();\r\n        for (let i = fromRow; i <= toRow; i++) {\r\n            rows[i] = {...rows[i], ...updated};\r\n        }\r\n        data.rows = rows\r\n        updateData(data)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Typography variant=\"h3\" component=\"h3\" gutterBottom>\r\n                Voyage information\r\n            </Typography>\r\n            <ReactDataGrid\r\n                columns={columns}\r\n                rowGetter={i => data.rows[i]}\r\n                rowsCount={data.rows.length}\r\n                onGridRowsUpdated={onGridRowsUpdated}\r\n                enableCellSelect={true}\r\n                columnAutoWidth=\"true\"\r\n\r\n            />\r\n            <Button startIcon={<AddIcon/>} variant=\"primary\" onClick={addRow}>Add row</Button>\r\n            <Button startIcon={<DeleteOutlineIcon/>} variant=\"primary\" onClick={deleteRow}>Delete row</Button>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\n\r\nexport default withStyles(styles)(VoyageForm);","const countryCodes = require(\"../../data/countries\")\r\n\r\nexport function getCountryCodes() {\r\n    return Object.keys(countryCodes);\r\n}\r\n\r\nexport function getCountriesWithCodes() {\r\n    let countriesWithCodes = [];\r\n    for (let i = 0; i < Object.keys(countryCodes).length; i++) {\r\n        let countryWithCode = Object.values(countryCodes)[i] + ' - ' + Object.keys(countryCodes)[i];\r\n        countriesWithCodes.push(countryWithCode);\r\n    }\r\n    return countriesWithCodes;\r\n}\r\n\r\nexport function getCountryWithCodeByCode(countryCode) {\r\n    if (countryCode !== '' && countryCode != null) {\r\n        return countryCodes[countryCode] + ' - ' + countryCode;\r\n    }\r\n    return '';\r\n\r\n}\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default {getCountryCodes, getCountriesWithCodes, getCountryWithCodeByCode};","import React from \"react\";\r\nimport ReactDataGrid from 'react-data-grid';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {Editors} from 'react-data-grid-addons';\r\nimport datePicker from \"../pickers/datePicker\";\r\nimport countryCodes from \"../../functions/list_getters/countryCodes\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport DeleteOutlineIcon from \"@material-ui/icons/DeleteOutline\";\r\n\r\nconst {DropDownEditor} = Editors;\r\n\r\nconst styles = (theme) => ({\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n            width: '25ch',\r\n        },\r\n    },\r\n});\r\n\r\nconst genders = [\"(...)\", 'Male', 'Female']\r\nconst GendersEditor = <DropDownEditor options={genders}/>;\r\n\r\nconst idTypes = [\"(...)\", 'Musterbook', 'Passport', 'Residential permit', 'Picture id', 'Others']\r\nconst IDTypesEditor = <DropDownEditor options={idTypes}/>;\r\n\r\nconst RanksOfRating = [\"(...)\", 'AbleSeaman', 'Agent', 'AsstFoodBevMngr', 'BarManager', 'BarService', 'Bosun', 'Cadet', 'Captain', 'CargoTechnician', 'CasinoStaff', 'ChiefCook', 'ChiefElectrician', 'ChiefHousekeeper', 'ChiefEngineer', 'ChiefMaster', 'ChiefMate', 'ChiefOfficer', 'ChiefPurser', 'ChiefSteward', 'ClassSurveyor', 'CSO', 'Cook', 'CraneOperator', 'CrewMember', 'CruiseDirector', 'CruiseStaff', 'DeckApprentice', 'DeckFitter', 'DeckOfficer', 'Deckhand', 'Doctor', 'Donkeyman', 'ElectricalEngineer', 'ElectricalOfficer', 'Electrician', 'EngineerCadet', 'EngineeringCrew', 'EngineFitter', 'Entertainment', 'FacilitiesCrew', 'FacilitiesManager', 'FirstAsstEngineer', 'FirstEngineer', 'FirstMate', 'FirstOfficer', 'Fitter', 'FourthOfficer', 'FoodBevMngr', 'FoodService', 'FourthAsstEngineer', 'Greaser', 'Hospitality', 'HotelDirector', 'HotelStaff', 'HousekeepingStaff', 'InformationTechnology', 'JuniorEngineer', 'LaundryMaster', 'Lifeboatman', 'Maitred', 'MarineCrew', 'MarketingRevenueMngr', 'Master', 'MasterFirstClassPilot', 'MateFirstClassPilot', 'Mechanic', 'MedicalStaff', 'Messman', 'Motorman', 'Oiler', 'Operator', 'OrdinarySeaman', 'Owner', 'Painter', 'Porter', 'Provision', 'ProvisionMaster', 'Pumpman', 'QMED', 'RadioOfficer', 'Reeferman', 'Repairman', 'RiddingCrew', 'SafetyAndSecurity', 'SecondAsstEngineer', 'SecondMate', 'SecondOfficer', 'SSO', 'StaffCaptain', 'Steward', 'Superintendent', 'Tankerman', 'ThirdAsstEngineer', 'ThirdMate', 'ThirdOfficer', 'ThirdParty', 'TruckMechanic', 'Tunnelman', 'UtilityPerson', 'VettingInspector', 'Welder', 'Wiper', 'YardPersonnel', 'Other']\r\nconst RanksOfRatingEditor = <DropDownEditor options={RanksOfRating}/>;\r\n\r\nconst countryCodesList = countryCodes.getCountriesWithCodes();\r\ncountryCodesList.unshift(\"(...)\")\r\nconst CountryCodesEditor = <DropDownEditor options={countryCodesList}/>;\r\n\r\n\r\nconst columns = [\r\n    {key: \"NR\", name: \"NR\", editable: true, width: 50},\r\n    {key: \"Family_name\", name: \"Family name\", editable: true, width: 120},\r\n    {key: \"Given_name\", name: \"Given name\", editable: true, width: 120},\r\n    {key: \"Gender\", name: \"Gender\", editable: true, width: 80, editor: GendersEditor},\r\n    {key: \"Rank_of_rating\", name: \"Rank of rating\", editable: true, editor: RanksOfRatingEditor, width: 120},\r\n    {key: \"Nationality\", name: \"Nationality\", editable: true, editor: CountryCodesEditor, width: 100},\r\n    {key: \"Country_of_birth\", name: \"Country of birth\", editable: true, editor: CountryCodesEditor, width: 120},\r\n    {key: \"Place_of_birth\", name: \"Place of birth\", editable: true, width: 120},\r\n    {key: \"date_of_birth\", name: \"Date of birth\", editable: true, editor: datePicker, width: 120},\r\n    {key: \"ID_type\", name: \"ID type\", editable: true, width: 80, editor: IDTypesEditor},\r\n    {key: \"ID_document_number\", name: \"ID document number\", editable: true, width: 150},\r\n    {\r\n        key: \"Issuing_state_of_identity_document\",\r\n        name: \"Issuing state of identity document\",\r\n        editable: true,\r\n        editor: CountryCodesEditor,\r\n        width: 250\r\n    },\r\n    {\r\n        key: \"Expiry_date_of_identity_document\",\r\n        name: \"Expiry date of identity document\",\r\n        editable: true,\r\n        editor: datePicker,\r\n        width: 250\r\n    },\r\n    {key: \"Visa_Residence_permit_number\", name: \"Visa/Residence permit number\", editable: true, width: 250},\r\n];\r\n\r\nfunction CrewForm({data, updateData}) {\r\n    function addRow() {\r\n        let number = data.rows.length + 1\r\n        let row = {NR: number}\r\n        data.rows.push(row);\r\n        updateData(data)\r\n    }\r\n\r\n    function deleteRow() {\r\n        data.rows.pop();\r\n        updateData(data)\r\n    }\r\n\r\n\r\n    function onGridRowsUpdated({fromRow, toRow, updated}) {\r\n\r\n        const rows = data.rows.slice();\r\n        for (let i = fromRow; i <= toRow; i++) {\r\n            rows[i] = {...rows[i], ...updated};\r\n        }\r\n        data.rows = rows\r\n        console.log(\"rows \", data.rows)\r\n        updateData(data)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Typography variant=\"h3\" component=\"h3\" gutterBottom>\r\n                Crew list\r\n            </Typography>\r\n            <ReactDataGrid\r\n                columns={columns}\r\n                rowGetter={i => data.rows[i]}\r\n                rowsCount={data.rows.length}\r\n                onGridRowsUpdated={onGridRowsUpdated}\r\n                enableCellSelect={true}\r\n\r\n            />\r\n            <Button variant=\"primary\" startIcon={<AddIcon/>} onClick={addRow}>Add row</Button>\r\n            <Button variant=\"primary\" startIcon={<DeleteOutlineIcon/>} onClick={deleteRow}>Delete row</Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default withStyles(styles)(CrewForm);","let config = {\r\n    showDrawerIcons: true,\r\n    addOnCloseEvent: true,\r\n};\r\n\r\nexport {config}","// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default {\r\n    cmr: {\r\n        cmr_id :'',\r\n        remarks :'',\r\n        date_of_document:'',\r\n\r\n        sender_id:'',\r\n        sender_name:'',\r\n        sender_language_code:'',\r\n        sender_tax_id:'',\r\n        sender_tax_type_code:'',\r\n        sender_person_name:'',\r\n        sender_complete_number:'',\r\n        sender_email:'',\r\n        sender_postcode:'',\r\n        sender_street_name:'',\r\n        sender_city_name:'',\r\n        sender_country_code:'',\r\n        sender_country_subdivision_name:'',\r\n\r\n        consignee_id:'',\r\n        consignee_name:'',\r\n        consignee_language_code:'',\r\n        consignee_tax_id:'',\r\n        consignee_tax_type_code:'',\r\n        consignee_person_name:'',\r\n        consignee_complete_number:'',\r\n        consignee_email:'',\r\n        consignee_postcode:'',\r\n        consignee_street_name:'',\r\n        consignee_city_name:'',\r\n        consignee_country_code:'',\r\n        consignee_country_subdivision_name:'',\r\n\r\n        carrier_id:'',\r\n        carrier_name:'',\r\n        carrier_language_code:'',\r\n        carrier_tax_id:'',\r\n        carrier_tax_type_code:'',\r\n        carrier_person_name:'',\r\n        carrier_complete_number:'',\r\n        carrier_email:'',\r\n        carrier_postcode:'',\r\n        carrier_street_name:'',\r\n        carrier_city_name:'',\r\n        carrier_country_code:'',\r\n        carrier_country_subdivision_name:'',\r\n\r\n        sub_carrier_id:'',\r\n        sub_carrier_name:'',\r\n        sub_carrier_language_code:'',\r\n        sub_carrier_tax_id:'',\r\n        sub_carrier_tax_type_code:'',\r\n        sub_carrier_person_name:'',\r\n        sub_carrier_complete_number:'',\r\n        sub_carrier_email:'',\r\n        sub_carrier_postcode:'',\r\n        sub_carrier_street_name:'',\r\n        sub_carrier_city_name:'',\r\n        sub_carrier_country_code:'',\r\n        sub_carrier_country_subdivision_name:'',\r\n        date_of_delivery:'',\r\n        delivery_place_name:'',\r\n        delivery_country_code:'',\r\n        date_of_pickup:'',\r\n        pickup_location_name:'',\r\n        pickup_country_code:'',\r\n        additional_note_1:'',\r\n        additional_note_2:'',\r\n        additional_note_3:'',\r\n        gross_weight:'',\r\n        volume:'',\r\n        cod_amount:'',\r\n        established_country_code:'',\r\n        truck:'',\r\n        trailer:'',\r\n        instruction:'',\r\n\r\n        documentsAttached: [\r\n            {\"NR\": 1}\r\n        ],\r\n        consignment: [\r\n            {\"NR\": 1}\r\n        ],\r\n        },\r\n\r\n    invoice: {\r\n        tradeLineItems: [\r\n            {\"NR\": 1}\r\n        ],\r\n        invoice_id:'',\r\n        date_of_document:'',\r\n        seller_id:'',\r\n        seller_name:'',\r\n        seller_language_code:'',\r\n        seller_tax_id:'',\r\n        seller_tax_type_code:'',\r\n        seller_person_name:'',\r\n        seller_complete_number:'',\r\n        seller_email:'',\r\n        seller_postcode:'',\r\n        seller_street_name:'',\r\n        seller_city_name:'',\r\n        seller_country_code:'',\r\n        seller_country_subdivision_name:'',\r\n        buyer_id:'',\r\n        buyer_name:'',\r\n        buyer_language_code:'',\r\n        buyer_tax_id:'',\r\n        buyer_tax_type_code:'',\r\n        buyer_person_name:'',\r\n        buyer_complete_number:'',\r\n        buyer_email:'',\r\n        buyer_postcode:'',\r\n        buyer_street_name:'',\r\n        buyer_city_name:'',\r\n        buyer_country_code:'',\r\n        buyer_country_subdivision_name:'',\r\n        gross_weight:'',\r\n        net_weight:'',\r\n        package_quantity:'',\r\n        transport_means_id:'',\r\n        occurrence_date_time:'',\r\n        due_payable_amount:'',\r\n        invoice_currency_code:'',\r\n        ibanID:'',\r\n        account_name:'',\r\n        exemption_reason_code:'',\r\n        payment_term_description:'',\r\n    },\r\n}\r\n","import ArticleIcon from '@material-ui/icons/Description';\r\nimport ReceiptIcon from '@material-ui/icons/Receipt';\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default [\r\n    {\r\n        label: 'CMR',\r\n        value: 'cmr',\r\n        icon: <ArticleIcon/>\r\n    }, {\r\n        label: 'Invoice',\r\n        value: 'invoice',\r\n        icon: <ReceiptIcon/>\r\n    }\r\n];","import countryCodes from \"../list_getters/countryCodes\";\r\n\r\nconst readInvoiceXML = (invoice, xml) => {\r\n\r\n   invoice.invoice_id = xml.getElementsByTagName('ExchangedDocument')[0].children[0].value;\r\n   invoice.date_of_document = xml.getElementsByTagName('IssueDateTime')[0].value;\r\n\r\n   invoice.tradeLineItems = [];\r\n\r\n   let tradeLineItems = xml.getElementsByTagName('IncludedTradeLineItem');\r\n   for (let i = 0; i <tradeLineItems.length; i++) {\r\n\r\n      let tradeLineItem = tradeLineItems[i];\r\n\r\n      let tradeLineItemToSave = {\r\n         NR: i + 1,\r\n         Name: tradeLineItem.children[2].children[0].value,\r\n         Description: tradeLineItem.children[2].children[1].value,\r\n         Net_weight: tradeLineItem.children[2].children[2].value,\r\n         Gross_weight: tradeLineItem.children[2].children[3].value,\r\n         Class_code: tradeLineItem.children[2].children[4].children[0].value,\r\n         Origin_country: countryCodes.getCountryWithCodeByCode(tradeLineItem.children[2].children[5].children[0].value),\r\n         Charge_amount: tradeLineItem.children[0].children[0].children[0].value,\r\n         Basis_quantity: tradeLineItem.children[0].children[0].children[1].value,\r\n         Billed_quantity: tradeLineItem.children[1].children[0].value,\r\n         Total_amount: tradeLineItem.children[3].children[0].children[0].value,\r\n         Tax_total_amount: tradeLineItem.children[3].children[0].children[1].value,\r\n         Net_total_amount: tradeLineItem.children[3].children[0].children[2].value,\r\n      }\r\n\r\n      invoice.tradeLineItems.push(tradeLineItemToSave)\r\n\r\n   }\r\n   let seller = xml.getElementsByTagName('Seller')[0];\r\n\r\n\r\n   invoice.seller_id = seller.children[0].value;\r\n   invoice.seller_name = seller.children[1].value;\r\n   invoice.seller_language_code = seller.children[2].value;\r\n   invoice.seller_tax_id = seller.children[5].children[0].value;\r\n   invoice.seller_tax_type_code = seller.children[5].children[1].children[0].value;\r\n   invoice.seller_person_name = seller.children[3].children[0].value;\r\n   invoice.seller_complete_number = seller.children[3].children[1].children[0].value;\r\n   invoice.seller_email = seller.children[3].children[2].children[0].value;\r\n   invoice.seller_postcode = seller.children[4].children[0].value;\r\n   invoice.seller_street_name = seller.children[4].children[1].value;\r\n   invoice.seller_city_name = seller.children[4].children[2].value;\r\n   invoice.seller_country_code = seller.children[4].children[3].value;\r\n   invoice.seller_country_subdivision_name = seller.children[4].children[5].value;\r\n\r\n   let buyer = xml.getElementsByTagName('Buyer')[0];\r\n\r\n   invoice.buyer_id = buyer.children[0].value;\r\n   invoice.buyer_name = buyer.children[1].value;\r\n   invoice.buyer_language_code = buyer.children[2].value;\r\n   invoice.buyer_tax_id = buyer.children[5].children[0].value;\r\n   invoice.buyer_tax_type_code = buyer.children[5].children[1].children[0].value;\r\n   invoice.buyer_person_name = buyer.children[3].children[0].value;\r\n   invoice.buyer_complete_number = buyer.children[3].children[1].children[0].value;\r\n   invoice.buyer_email = buyer.children[3].children[2].children[0].value;\r\n   invoice.buyer_postcode = buyer.children[4].children[0].value;\r\n   invoice.buyer_street_name = buyer.children[4].children[1].value;\r\n   invoice.buyer_city_name = buyer.children[4].children[2].value;\r\n   invoice.buyer_country_code = buyer.children[4].children[3].value;\r\n   invoice.buyer_country_subdivision_name = buyer.children[4].children[5].value;\r\n\r\n   let relatedConsignment = xml.getElementsByTagName('RelatedConsignment')[0];\r\n   invoice.gross_weight = relatedConsignment.children[0].value;\r\n   invoice.net_weight = relatedConsignment.children[1].value\r\n   invoice.package_quantity = relatedConsignment.children[2].value\r\n   invoice.transport_means_id = relatedConsignment.children[3].children[0].children[0].value\r\n\r\n   invoice.occurrence_date_time = xml.getElementsByTagName('OccurenceDateTime')[0].value;\r\n   invoice.due_payable_amount = xml.getElementsByTagName('DuePayableAmount')[0].value;\r\n   invoice.invoice_currency_code = xml.getElementsByTagName('InvoiceCurrencyCode')[0].value;\r\n   invoice.ibanID = xml.getElementsByTagName('IBANID')[0].value;\r\n   invoice.exemption_reason_code = xml.getElementsByTagName('ExemptionReasonCode')[0].value;\r\n   invoice.account_name = xml.getElementsByTagName('PayeeCreditorFinancialAccount')[0].children[1].value;\r\n   invoice.payment_term_description = xml.getElementsByTagName('PaymentTerms')[0].children[0].value;\r\n\r\n\r\n\r\n\r\n   // console.log(\"tradeLineItems \",tradeLineItems)\r\n};\r\n\r\nexport default readInvoiceXML;","const documentTypes = require(\"../../data/document_types\")\r\n\r\nexport function getDocumentTypes() {\r\n    return Object.keys(documentTypes);\r\n}\r\n\r\nexport function getDocumentsWithTypes() {\r\n    let documentsWithTypes = [];\r\n    for (let i = 0; i < Object.keys(documentTypes).length; i++) {\r\n        let documentWithType = Object.values(documentTypes)[i] + ' - ' + Object.keys(documentTypes)[i];\r\n        documentsWithTypes.push(documentWithType);\r\n    }\r\n    return documentsWithTypes;\r\n}\r\n\r\nexport function getDocumentWithCodeByCode(documentType) {\r\n    if (documentType !== '' && documentType != null) {\r\n        return documentTypes[documentType] + ' - ' + documentType;\r\n    }\r\n    return '';\r\n\r\n}\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default {getDocumentTypes, getDocumentsWithTypes, getDocumentWithCodeByCode};","import documentTypes from \"../list_getters/documentTypesGetter\";\r\n\r\nconst readCmrXML = (cmr, xml) => {\r\n   cmr.cmr_id = xml.getElementsByTagName('eCMRID')[0].value;\r\n   cmr.date_of_document = xml.getElementsByTagName('eCMRIssueDate')[0].value;\r\n   cmr.remarks = xml.getElementsByTagName('ContractualRemarks')[0].value;\r\n\r\n   let sender = xml.getElementsByTagName('Sender')[0];\r\n   cmr.sender_id = sender.children[0].value;\r\n   cmr.sender_name = sender.children[1].value;\r\n   cmr.sender_language_code = sender.children[2].value;\r\n   cmr.sender_tax_id = sender.children[5].children[0].value;\r\n   cmr.sender_tax_type_code = sender.children[5].children[1].children[0].value;\r\n   cmr.sender_person_name = sender.children[3].children[0].value;\r\n   cmr.sender_complete_number = sender.children[3].children[1].children[0].value;\r\n   cmr.sender_email = sender.children[3].children[2].children[0].value;\r\n   cmr.sender_postcode = sender.children[4].children[0].value;\r\n   cmr.sender_street_name = sender.children[4].children[1].value;\r\n   cmr.sender_city_name = sender.children[4].children[2].value;\r\n   cmr.sender_country_code = sender.children[4].children[3].value;\r\n   cmr.sender_country_subdivision_name = sender.children[4].children[5].value;\r\n\r\n   let consignee = xml.getElementsByTagName('Consignee')[0];\r\n   cmr.consignee_id = consignee.children[0].value;\r\n   cmr.consignee_name = consignee.children[1].value;\r\n   cmr.consignee_language_code = consignee.children[2].value;\r\n   cmr.consignee_tax_id = consignee.children[5].children[0].value;\r\n   cmr.consignee_tax_type_code = consignee.children[5].children[1].children[0].value;\r\n   cmr.consignee_person_name = consignee.children[3].children[0].value;\r\n   cmr.consignee_complete_number = consignee.children[3].children[1].children[0].value;\r\n   cmr.consignee_email = consignee.children[3].children[2].children[0].value;\r\n   cmr.consignee_postcode = consignee.children[4].children[0].value;\r\n   cmr.consignee_street_name = consignee.children[4].children[1].value;\r\n   cmr.consignee_city_name = consignee.children[4].children[2].value;\r\n   cmr.consignee_country_code = consignee.children[4].children[3].value;\r\n   cmr.consignee_country_subdivision_name = consignee.children[4].children[5].value;\r\n\r\n   let carrier = xml.getElementsByTagName('Carrier')[0];\r\n   cmr.carrier_id = carrier.children[0].value;\r\n   cmr.carrier_name = carrier.children[1].value;\r\n   cmr.carrier_language_code = carrier.children[2].value;\r\n   cmr.carrier_tax_id = carrier.children[5].children[0].value;\r\n   cmr.carrier_tax_type_code = carrier.children[5].children[1].children[0].value;\r\n   cmr.carrier_person_name = carrier.children[3].children[0].value;\r\n   cmr.carrier_complete_number = carrier.children[3].children[1].children[0].value;\r\n   cmr.carrier_email = carrier.children[3].children[2].children[0].value;\r\n   cmr.carrier_postcode = carrier.children[4].children[0].value;\r\n   cmr.carrier_street_name = carrier.children[4].children[1].value;\r\n   cmr.carrier_city_name = carrier.children[4].children[2].value;\r\n   cmr.carrier_country_code = carrier.children[4].children[3].value;\r\n   cmr.carrier_country_subdivision_name = carrier.children[4].children[5].value;\r\n\r\n   let sub_carrier = xml.getElementsByTagName('SubsequentCarrier')[0];\r\n   cmr.sub_carrier_id = sub_carrier.children[0].value;\r\n   cmr.sub_carrier_name = sub_carrier.children[1].value;\r\n   cmr.sub_carrier_language_code = sub_carrier.children[2].value;\r\n   cmr.sub_carrier_tax_id = sub_carrier.children[5].children[0].value;\r\n   cmr.sub_carrier_tax_type_code = sub_carrier.children[5].children[1].children[0].value;\r\n   cmr.sub_carrier_person_name = sub_carrier.children[3].children[0].value;\r\n   cmr.sub_carrier_complete_number = sub_carrier.children[3].children[1].children[0].value;\r\n   cmr.sub_carrier_email = sub_carrier.children[3].children[2].children[0].value;\r\n   cmr.sub_carrier_postcode = sub_carrier.children[4].children[0].value;\r\n   cmr.sub_carrier_street_name = sub_carrier.children[4].children[1].value;\r\n   cmr.sub_carrier_city_name = sub_carrier.children[4].children[2].value;\r\n   cmr.sub_carrier_country_code = sub_carrier.children[4].children[3].value;\r\n   cmr.sub_carrier_country_subdivision_name = sub_carrier.children[4].children[5].value;\r\n\r\n   cmr.date_of_pickup = xml.getElementsByTagName('CarrierPickUpEvent')[0].children[0].value;\r\n   cmr.pickup_location_name = xml.getElementsByTagName('CarrierPickUpEvent')[0].children[1].children[0].value;\r\n   cmr.pickup_country_code = xml.getElementsByTagName('CarrierPickUpEvent')[0].children[1].children[1].value;\r\n\r\n   cmr.date_of_delivery = xml.getElementsByTagName('ConsigneeDeliveryEvent')[0].children[0].value;\r\n   cmr.delivery_place_name = xml.getElementsByTagName('ConsigneeDeliveryEvent')[0].children[1].children[0].value;\r\n   cmr.delivery_country_code = xml.getElementsByTagName('ConsigneeDeliveryEvent')[0].children[1].children[1].value;\r\n\r\n   cmr.additional_note_1 = xml.getElementsByTagName('AdditionalParticularNote')[0].children[0].value;\r\n   cmr.additional_note_2 = xml.getElementsByTagName('AdditionalParticularNote')[1].children[0].value;\r\n   cmr.additional_note_3 = xml.getElementsByTagName('AdditionalParticularNote')[2].children[0].value;\r\n\r\n   cmr.gross_weight = xml.getElementsByTagName('GrossWeight')[0].value;\r\n   cmr.volume = xml.getElementsByTagName('GrossVolume')[0].value;\r\n   cmr.cod_amount = xml.getElementsByTagName('CODAmount')[0].value;\r\n\r\n   cmr.established_country_code = xml.getElementsByTagName('IssueLocation')[0].children[1].value;\r\n   cmr.truck = xml.getElementsByTagName('StageCode')[0].value;\r\n   cmr.trailer = xml.getElementsByTagName('ModeCode')[0].value;\r\n   cmr.instruction = xml.getElementsByTagName('Description')[0].value;\r\n\r\n   let documentsAttached = xml.getElementsByTagName('AssociatedDocument');\r\n   cmr.documentsAttached = []\r\n   for (let i = 0; i <documentsAttached.length; i++) {\r\n\r\n      let document = documentsAttached[i];\r\n      let documentToSave = {\r\n         NR: document.children[1].value,\r\n         TypeCode: documentTypes.getDocumentWithCodeByCode(document.children[0].value),\r\n         Remarks: document.children[2].value,\r\n         Date: document.children[3].value,\r\n      }\r\n\r\n      cmr.documentsAttached.push(documentToSave)\r\n\r\n   }\r\n\r\n   let includedConsignmentItems = xml.getElementsByTagName('IncludedConsignmentItem');\r\n   let transportPackages = xml.getElementsByTagName('TransportPackage');\r\n   cmr.consignment = []\r\n   for (let i = 0; i <includedConsignmentItems.length; i++) {\r\n\r\n      let item = includedConsignmentItems[i];\r\n\r\n      let transportPackage = transportPackages[i];\r\n\r\n      let consignmentToSave = {\r\n         NR: item.children[0].value,\r\n         Gross_weight: item.children[1].value,\r\n         Volume: item.children[2].value,\r\n         Nature_of_goods: item.children[3].children[0].value,\r\n         Number_of_packages: transportPackage.children[0].value,\r\n         Method_of_pa—Åking: transportPackage.children[1].value,\r\n         Marks_and_Nos: transportPackage.children[2].children[0].value,\r\n      };\r\n\r\n\r\n      cmr.consignment.push(consignmentToSave)\r\n\r\n   }\r\n\r\n};\r\n\r\nexport default readCmrXML;","import XMLParser from 'react-xml-parser';\r\nimport defaultData from '../../config/consts/defaultDataConst'\r\nimport readInvoiceXML from \"./readInvoiceXML\";\r\nimport readCmrXML from \"./readCmrXML\";\r\nimport xml from \"xml\";\r\n\r\nfunction readXML(fileContent, xmlType) {\r\n    let xml = new XMLParser().parseFromString(fileContent);\r\n\r\n\r\n    switch (xmlType) {\r\n        case 'invoice':\r\n            let invoice = defaultData.invoice;\r\n\r\n            readInvoiceXML(invoice, xml);\r\n            return invoice;\r\n        case 'cmr':\r\n            let cmr = defaultData.cmr;\r\n            readCmrXML(cmr, xml);\r\n            return cmr;\r\n\r\n    }\r\n    return defaultData.invoice\r\n\r\n}\r\n\r\n// A function to assign the references on different elements\r\n// function makeReferences(data) {\r\n//     data.health.illList.map(el => {\r\n//         let {NR, crewPassenger} = el;\r\n//         if (crewPassenger === 'Crew') {\r\n//             let crewItem = data.crew.rows.find(item => item.NR === NR);\r\n//             if (!crewItem) {\r\n//                 return el;\r\n//             }\r\n//             el.firstName = crewItem.Given_name;\r\n//             el.familyName = crewItem.Family_name;\r\n//         } else if (crewPassenger === 'Passenger') {\r\n//             let passengerItem = data.passengers.rows.find(item => item.NR === NR);\r\n//             if (!passengerItem) {\r\n//                 return el;\r\n//             }\r\n//             el.firstName = passengerItem.Given_name;\r\n//             el.familyName = passengerItem.Family_name;\r\n//         }\r\n//\r\n//         return el;\r\n//     })\r\n// }\r\n\r\nexport default readXML\r\n\r\n","import readXlsxFile from 'read-excel-file'\r\nimport readXLSPort from \"./readXLSPort\";\r\nimport readXLSCrew from \"./readXLSCrew\";\r\nimport readXLSPassengers from \"./readXLSPassengers\"\r\nimport readXLSShip from \"./readXLSShip\";\r\nimport readXLSVoyage from \"./readXLSVoyage\";\r\nimport readXLSHealth from './readXLSHealth'\r\nimport readXLSShipStores from \"./readXLSShipStores\";\r\nimport readXLSSecurity from \"./readXLSSecurity\";\r\nimport readXLSCargo from \"./readXLSCargo\";\r\nimport readXLSWaste from \"./readXLSWaste\";\r\n\r\nfunction readXLS(files, setOpenErrorDialog, onSave) {\r\n\r\n    if (!files || files.length === 0) return {};\r\n\r\n    for (let i = 0; i < files.length; i++) {\r\n        //store to promises\r\n\r\n        readXlsxFile(files[i]).then((rows) => {\r\n            try {\r\n                let name = rows[0][0].toLowerCase();\r\n\r\n                console.log('EXCEL', rows);\r\n\r\n                if (name === \"port information\") {\r\n                    readXLSPort(files[i], onSave)\r\n                } else if (name === \"crew list\") {\r\n                    readXLSCrew(files[i], onSave);\r\n                } else if (name === \"ship information\") {\r\n                    readXLSShip(files[i], onSave);\r\n                } else if (name === \"passenger list\") {\r\n                    readXLSPassengers(files[i], onSave);\r\n                } else if (name === \"voyage information\") {\r\n                    readXLSVoyage(files[i], onSave);\r\n                } else if (name === \"maritime declaration of health\") {\r\n                    readXLSHealth(files[i], onSave);\r\n                } else if (name === \"ship stores\") {\r\n                    readXLSShipStores(files[i], onSave);\r\n                } else if (name === \"security information\") {\r\n                    readXLSSecurity(files[i], onSave);\r\n                } else if (name === \"cargo consignment\") {\r\n                    readXLSCargo(files[i], onSave);\r\n                } else if (name === \"waste information\") {\r\n                    readXLSWaste(files[i], onSave);\r\n                }\r\n            } catch (e) {\r\n                setOpenErrorDialog({\r\n                    open: true, error: {\r\n                        title: 'Error while reading Excel file',\r\n                        text: 'The file is most likely broken or empty.' +\r\n                            'Developer console can say a little more about the error.'\r\n                    }\r\n                })\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport default readXLS;","import React from \"react\";\r\nimport ReactDataGrid from 'react-data-grid';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {Editors} from 'react-data-grid-addons';\r\nimport datePicker from \"../pickers/datePicker\";\r\nimport countryCodes from \"../../functions/list_getters/countryCodes\";\r\nimport ListOfPorts from '../../config/JSON/listOfPorts'\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\nconst {DropDownEditor} = Editors;\r\n\r\nconst styles = (theme) => ({\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n            width: '25ch',\r\n        },\r\n    },\r\n});\r\n\r\nconst genders = [\"(...)\", 'Male', 'Female']\r\nconst GendersEditor = <DropDownEditor options={genders}/>;\r\n\r\nconst idTypes = [\"(...)\", 'Musterbook', 'Passport', 'Residential permit', 'Picture id', 'Others']\r\nconst IDTypesEditor = <DropDownEditor options={idTypes}/>;\r\n\r\nconst countryCodesList = countryCodes.getCountriesWithCodes();\r\ncountryCodesList.unshift(\"(...)\")\r\nconst CountryCodesEditor = <DropDownEditor options={countryCodesList}/>;\r\n\r\nconst yesNo = [\"(...)\", 'Yes', 'No']\r\nconst TransitEditor = <DropDownEditor options={yesNo}/>;\r\n\r\nconst ports = [\"(...)\"];\r\nListOfPorts.map((port) =>\r\n    ports.push(port.code + ' - ' + port.countryCode + ' - ' + port.name)\r\n);\r\nconst PortEditor = <DropDownEditor options={ports}/>;\r\n\r\n\r\nconst columns = [\r\n    {key: \"NR\", name: \"NR\", editable: true, width: 50},\r\n    {key: \"Family_name\", name: \"Family name\", editable: true, width: 120},\r\n    {key: \"Given_name\", name: \"Given name\", editable: true, width: 120},\r\n    {key: \"Gender\", name: \"Gender\", editable: true, width: 80, editor: GendersEditor},\r\n    {key: \"Nationality\", name: \"Nationality\", editable: true, editor: CountryCodesEditor, width: 100},\r\n    {key: \"Country_of_birth\", name: \"Country of birth\", editable: true, editor: CountryCodesEditor, width: 120},\r\n    {key: \"Place_of_birth\", name: \"Place of birth\", editable: true, width: 120},\r\n    {key: \"date_of_birth\", name: \"Date of birth\", editable: true, editor: datePicker, width: 120},\r\n    {key: \"ID_type\", name: \"ID type\", editable: true, width: 80, editor: IDTypesEditor},\r\n    {key: \"ID_document_number\", name: \"ID document number\", editable: true, width: 150},\r\n    {\r\n        key: \"Issuing_state_of_identity_document\",\r\n        name: \"Issuing state of identity document\",\r\n        editable: true,\r\n        editor: datePicker,\r\n        width: 250\r\n    },\r\n    {\r\n        key: \"Expiry_date_of_identity_document\",\r\n        name: \"Expiry date of identity document\",\r\n        editable: true,\r\n        editor: datePicker,\r\n        width: 250\r\n    },\r\n    {key: \"Port_of_embarkation\", name: \"Port of embarkation\", editable: true, width: 150, editor: PortEditor},\r\n    {key: \"Port_of_disembarkation\", name: \"Port of disembarkation\", editable: true, width: 170, editor: PortEditor},\r\n    {key: \"Transit\", name: \"Transit\", editable: true, width: 80, editor: TransitEditor},\r\n    {key: \"Visa_Residence_permit_number\", name: \"Visa/Residence permit number\", editable: true, width: 250},\r\n];\r\n\r\nfunction PassengersForm({data, updateData}) {\r\n    function addRow() {\r\n        let number = data.rows.length + 1\r\n        let row = {NR: number}\r\n        data.rows.push(row);\r\n        updateData(data)\r\n    }\r\n\r\n    function deleteRow() {\r\n        data.rows.pop();\r\n        updateData(data)\r\n    }\r\n\r\n\r\n    function onGridRowsUpdated({fromRow, toRow, updated}) {\r\n\r\n        const rows = data.rows.slice();\r\n        for (let i = fromRow; i <= toRow; i++) {\r\n            rows[i] = {...rows[i], ...updated};\r\n        }\r\n        data.rows = rows;\r\n        updateData(data)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Typography variant=\"h3\" component=\"h3\" gutterBottom>\r\n                Passenger list\r\n            </Typography>\r\n            <ReactDataGrid\r\n                columns={columns}\r\n                rowGetter={i => data.rows[i]}\r\n                rowsCount={data.rows.length}\r\n                onGridRowsUpdated={onGridRowsUpdated}\r\n                enableCellSelect={true}\r\n            />\r\n            <Button startIcon={<AddIcon/>} variant=\"primary\" onClick={addRow}>Add row</Button>\r\n            <Button startIcon={<DeleteOutlineIcon/>} variant=\"primary\" onClick={deleteRow}>Delete row</Button>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\n\r\nexport default withStyles(styles)(PassengersForm);","import listOfCountries from \"../../data/countries\";\r\n\r\nconst generateInvoice = (invoice) => {\r\n\r\n    let SupplyChainTradeTransaction = [];\r\n    for (let i = 0; i < invoice.tradeLineItems.length; i++) {\r\n        let tradeLineItem = invoice.tradeLineItems[i];\r\n        let IncludedTradeLineItem = [];\r\n\r\n        let TradeProduct = [];\r\n        TradeProduct.push({Name: tradeLineItem.Name});\r\n        TradeProduct.push({Description: tradeLineItem.Description});\r\n        TradeProduct.push({NetWeight: tradeLineItem.Net_weight});\r\n        TradeProduct.push({GrossWeight: tradeLineItem.Gross_weight});\r\n        TradeProduct.push({Classification: [{ClassCode:tradeLineItem.Class_code}]});\r\n\r\n        let originCountryCode = '';\r\n        if (tradeLineItem.Origin_country && tradeLineItem.Origin_country !== '') {\r\n            let originCountry = tradeLineItem.Origin_country.split('- ');\r\n            originCountryCode = originCountry[1];\r\n        }\r\n\r\n        TradeProduct.push({OriginCountry: [{Code:originCountryCode}]});\r\n\r\n        IncludedTradeLineItem.push({LineTradeAgreement: [\r\n                {ProductGrossPrice:[\r\n                    {ChargeAmount:tradeLineItem.Charge_amount},\r\n                    {BasisQuantity:tradeLineItem.Basis_quantity}\r\n                    ]}\r\n\r\n            ]});\r\n\r\n        IncludedTradeLineItem.push({LineTradeDelivery: [{BilledQuantity:tradeLineItem.Billed_quantity}]})\r\n        IncludedTradeLineItem.push({TradeProduct: TradeProduct})\r\n        IncludedTradeLineItem.push({LineTradeSettlement: [\r\n                {MonetarySummation:[\r\n                        {LineTotalAmount:tradeLineItem.Total_amount},\r\n                        {TaxTotalAmount:tradeLineItem.Tax_total_amount},\r\n                        {NetLineTotalAmount:tradeLineItem.Net_total_amount}\r\n                    ]}\r\n\r\n            ]});\r\n        SupplyChainTradeTransaction.push({IncludedTradeLineItem: IncludedTradeLineItem})\r\n\r\n    }\r\n\r\n    let HeaderTradeAgreement = [];\r\n\r\n    let Seller = [];\r\n\r\n    Seller.push({ID: invoice.seller_id});\r\n    Seller.push({Name: invoice.seller_name});\r\n    Seller.push({LanguageCode: invoice.seller_language_code});\r\n\r\n    Seller.push({DefinedContractDetails: [\r\n            {PersonName:invoice.seller_person_name},\r\n            {MobileTelephone:[\r\n                    {CompleteNumber: invoice.seller_complete_number},\r\n                ]},\r\n            {EmailAddress: [\r\n                    {URI: invoice.seller_email}\r\n                ]}\r\n        ]});\r\n\r\n    Seller.push({PostalAddress: [\r\n            {Postcode: invoice.seller_postcode},\r\n            {StreetName: invoice.seller_street_name},\r\n            {CityName: invoice.seller_city_name},\r\n            {CountryCode: invoice.seller_country_code},\r\n            {ContryName: listOfCountries[invoice.seller_country_code]},\r\n            {CountrySubDivisionName: invoice.seller_country_subdivision_name},\r\n        ]});\r\n\r\n    Seller.push({TaxRegistration:[\r\n            {ID:invoice.seller_tax_id},\r\n            {RegisteredTax:[\r\n                    {TypeCode:invoice.seller_tax_type_code},\r\n                ]}\r\n        ]});\r\n\r\n    let Buyer = [];\r\n\r\n    Buyer.push({ID: invoice.buyer_id});\r\n    Buyer.push({Name: invoice.buyer_name});\r\n    Buyer.push({LanguageCode: invoice.buyer_language_code});\r\n\r\n    Buyer.push({DefinedContractDetails: [\r\n            {PersonName:invoice.buyer_person_name},\r\n            {MobileTelephone:[\r\n                    {CompleteNumber: invoice.buyer_complete_number},\r\n                ]},\r\n            {EmailAddress: [\r\n                    {URI: invoice.buyer_email}\r\n                ]}\r\n        ]});\r\n\r\n    Buyer.push({PostalAddress: [\r\n            {Postcode: invoice.buyer_postcode},\r\n            {StreetName: invoice.buyer_street_name},\r\n            {CityName: invoice.buyer_city_name},\r\n            {CountryCode: invoice.buyer_country_code},\r\n            {ContryName: listOfCountries[invoice.buyer_country_code]},\r\n            {CountrySubDivisionName: invoice.buyer_country_subdivision_name},\r\n        ]});\r\n    Buyer.push({TaxRegistration:[\r\n            {ID:invoice.buyer_tax_id},\r\n            {RegisteredTax:[\r\n                    {TypeCode:invoice.buyer_tax_type_code},\r\n                ]}\r\n        ]});\r\n\r\n    HeaderTradeAgreement.push({Seller:Seller});\r\n    HeaderTradeAgreement.push({Buyer:Buyer});\r\n    SupplyChainTradeTransaction.push({HeaderTradeAgreement:HeaderTradeAgreement})\r\n\r\n    let HeaderTradeDelivery = [];\r\n    HeaderTradeDelivery.push({RelatedConsignment:[\r\n            {GrossWeight:invoice.gross_weight},\r\n            {NetWeight:invoice.net_weight},\r\n            {PackageQuantity:invoice.package_quantity},\r\n            {SpecifiedTransportMovement:[\r\n                    {UsedTransportMeans:[{ID:invoice.transport_means_id}]}]}\r\n        ]});\r\n    HeaderTradeDelivery.push({ActualDespatchEvent:[{\r\n            OccurenceDateTime:invoice.occurrence_date_time\r\n        }]});\r\n\r\n\r\n    SupplyChainTradeTransaction.push({HeaderTradeDelivery:HeaderTradeDelivery});\r\n\r\n    let HeaderTradeSettlement = [];\r\n\r\n    HeaderTradeSettlement.push({DuePayableAmount:invoice.due_payable_amount})\r\n    HeaderTradeSettlement.push({InvoiceCurrencyCode:invoice.invoice_currency_code})\r\n    HeaderTradeSettlement.push({PaymentMeans:[\r\n            {PayeeCreditorFinancialAccount:[\r\n                    {IBANID: invoice.ibanID},\r\n                    {Name: invoice.account_name}\r\n                ]}\r\n            ]});\r\n    HeaderTradeSettlement.push({TradeTax:[\r\n            {ExemptionReasonCode:invoice.exemption_reason_code}\r\n        ]});\r\n    HeaderTradeSettlement.push({PaymentTerms:[\r\n            {Description:invoice.payment_term_description}\r\n        ]});\r\n\r\n    SupplyChainTradeTransaction.push({HeaderTradeSettlement:HeaderTradeSettlement});\r\n\r\n\r\n    let invoiceXML = {\r\n        CIIMessage:[{\r\n            ExchangedDocument: [\r\n                {ID: invoice.invoice_id},\r\n                {IssueDateTime: invoice.date_of_document},\r\n                ],\r\n\r\n        },\r\n            {SupplyChainTradeTransaction:SupplyChainTradeTransaction},\r\n\r\n        ]\r\n    }\r\n\r\n    return invoiceXML;\r\n};\r\n\r\nexport const checkRequiredInvoice = (errors, invoice) => {\r\n    errors.Invoice = {};\r\n    if (!invoice.invoice_id) errors.Invoice[\"ID\"] = true;\r\n    if (!invoice.date_of_document) errors.Invoice[\"Date of document\"] = true;\r\n}\r\n\r\nexport default generateInvoice;","import listOfCountries from \"../../data/countries\";\r\n\r\nconst generateCMR = (cmr) => {\r\n    console.log(\"generating cmr\")\r\n\r\n    let eCMRHeaderDetails = [];\r\n\r\n    eCMRHeaderDetails.push({eCMRID:cmr.cmr_id});\r\n    eCMRHeaderDetails.push({eCMRIssueDate:cmr.date_of_document});\r\n    eCMRHeaderDetails.push({ContractualRemarks:cmr.remarks});\r\n    eCMRHeaderDetails.push({AdditionalParticularNote:[\r\n            {ContentText:cmr.additional_note_1}\r\n        ]});\r\n    eCMRHeaderDetails.push({AdditionalParticularNote:[\r\n            {ContentText:cmr.additional_note_2}\r\n        ]});\r\n    eCMRHeaderDetails.push({AdditionalParticularNote:[\r\n            {ContentText:cmr.additional_note_3}\r\n        ]});\r\n    eCMRHeaderDetails.push({IssueLocation:[\r\n            {ContryName: listOfCountries[cmr.established_country_code]},\r\n            {CountryCode: cmr.established_country_code},\r\n        ]});\r\n\r\n\r\n    let RoadConsignment = [];\r\n    RoadConsignment.push({GrossWeight:cmr.gross_weight});\r\n    RoadConsignment.push({GrossVolume:cmr.volume});\r\n    RoadConsignment.push({CODAmount:cmr.cod_amount});\r\n\r\n    let Sender = [];\r\n\r\n    Sender.push({ID: cmr.sender_id});\r\n    Sender.push({Name: cmr.sender_name});\r\n    Sender.push({LanguageCode: cmr.sender_language_code});\r\n\r\n    Sender.push({DefinedContractDetails: [\r\n            {PersonName:cmr.sender_person_name},\r\n            {MobileTelephone:[\r\n                    {CompleteNumber: cmr.sender_complete_number},\r\n                ]},\r\n            {EmailAddress: [\r\n                    {URI: cmr.sender_email}\r\n                ]}\r\n        ]});\r\n\r\n    Sender.push({PostalAddress: [\r\n            {Postcode: cmr.sender_postcode},\r\n            {StreetName: cmr.sender_street_name},\r\n            {CityName: cmr.sender_city_name},\r\n            {CountryCode: cmr.sender_country_code},\r\n            {ContryName: listOfCountries[cmr.sender_country_code]},\r\n            {CountrySubDivisionName: cmr.sender_country_subdivision_name},\r\n        ]});\r\n\r\n    Sender.push({TaxRegistration:[\r\n            {ID:cmr.sender_tax_id},\r\n            {RegisteredTax:[\r\n                    {TypeCode:cmr.sender_tax_type_code},\r\n                ]}\r\n        ]});\r\n\r\n    let Consignee = [];\r\n\r\n    Consignee.push({ID: cmr.consignee_id});\r\n    Consignee.push({Name: cmr.consignee_name});\r\n    Consignee.push({LanguageCode: cmr.consignee_language_code});\r\n\r\n    Consignee.push({DefinedContractDetails: [\r\n            {PersonName:cmr.consignee_person_name},\r\n            {MobileTelephone:[\r\n                    {CompleteNumber: cmr.consignee_complete_number},\r\n                ]},\r\n            {EmailAddress: [\r\n                    {URI: cmr.consignee_email}\r\n                ]}\r\n        ]});\r\n\r\n    Consignee.push({PostalAddress: [\r\n            {Postcode: cmr.consignee_postcode},\r\n            {StreetName: cmr.consignee_street_name},\r\n            {CityName: cmr.consignee_city_name},\r\n            {CountryCode: cmr.consignee_country_code},\r\n            {ContryName: listOfCountries[cmr.consignee_country_code]},\r\n            {CountrySubDivisionName: cmr.consignee_country_subdivision_name},\r\n        ]});\r\n    Consignee.push({TaxRegistration:[\r\n            {ID:cmr.consignee_tax_id},\r\n            {RegisteredTax:[\r\n                    {TypeCode:cmr.consignee_tax_type_code},\r\n                ]}\r\n        ]});\r\n\r\n    let Carrier = [];\r\n\r\n    Carrier.push({ID: cmr.carrier_id});\r\n    Carrier.push({Name: cmr.carrier_name});\r\n    Carrier.push({LanguageCode: cmr.carrier_language_code});\r\n\r\n    Carrier.push({DefinedContractDetails: [\r\n            {PersonName:cmr.carrier_person_name},\r\n            {MobileTelephone:[\r\n                    {CompleteNumber: cmr.carrier_complete_number},\r\n                ]},\r\n            {EmailAddress: [\r\n                    {URI: cmr.carrier_email}\r\n                ]}\r\n        ]});\r\n\r\n    Carrier.push({PostalAddress: [\r\n            {Postcode: cmr.carrier_postcode},\r\n            {StreetName: cmr.carrier_street_name},\r\n            {CityName: cmr.carrier_city_name},\r\n            {CountryCode: cmr.carrier_country_code},\r\n            {ContryName: listOfCountries[cmr.carrier_country_code]},\r\n            {CountrySubDivisionName: cmr.carrier_country_subdivision_name},\r\n        ]});\r\n\r\n    Carrier.push({TaxRegistration:[\r\n            {ID:cmr.carrier_tax_id},\r\n            {RegisteredTax:[\r\n                    {TypeCode:cmr.carrier_tax_type_code},\r\n                ]}\r\n        ]});\r\n\r\n    let SubsequentCarrier = [];\r\n\r\n    SubsequentCarrier.push({ID: cmr.sub_carrier_id});\r\n    SubsequentCarrier.push({Name: cmr.sub_carrier_name});\r\n    SubsequentCarrier.push({LanguageCode: cmr.sub_carrier_language_code});\r\n\r\n    SubsequentCarrier.push({DefinedContractDetails: [\r\n            {PersonName:cmr.sub_carrier_person_name},\r\n            {MobileTelephone:[\r\n                    {CompleteNumber: cmr.sub_carrier_complete_number},\r\n                ]},\r\n            {EmailAddress: [\r\n                    {URI: cmr.sub_carrier_email}\r\n                ]}\r\n        ]});\r\n\r\n    SubsequentCarrier.push({PostalAddress: [\r\n            {Postcode: cmr.sub_carrier_postcode},\r\n            {StreetName: cmr.sub_carrier_street_name},\r\n            {CityName: cmr.sub_carrier_city_name},\r\n            {CountryCode: cmr.sub_carrier_country_code},\r\n            {ContryName: listOfCountries[cmr.sub_carrier_country_code]},\r\n            {CountrySubDivisionName: cmr.sub_carrier_country_subdivision_name},\r\n        ]});\r\n    SubsequentCarrier.push({TaxRegistration:[\r\n            {ID:cmr.sub_carrier_tax_id},\r\n            {RegisteredTax:[\r\n                    {TypeCode:cmr.sub_carrier_tax_type_code},\r\n                ]}\r\n        ]});\r\n\r\n\r\n    RoadConsignment.push({Sender:Sender});\r\n    RoadConsignment.push({Consignee:Consignee});\r\n    RoadConsignment.push({Carrier:Carrier});\r\n    RoadConsignment.push({SubsequentCarrier:SubsequentCarrier});\r\n\r\n    for (let i = 0; i <cmr.documentsAttached.length ; i++) {\r\n        let document = cmr.documentsAttached[i];\r\n\r\n        let documentTypeCode = ''\r\n        if (document.TypeCode && document.TypeCode !== '') {\r\n            let typeCode = document.TypeCode.split('- ');\r\n            documentTypeCode = typeCode[1];\r\n        }\r\n        RoadConsignment.push({AssociatedDocument:[\r\n                {TypeCode:documentTypeCode},\r\n                {ID:document.NR},\r\n                {Remarks:document.Remarks},\r\n                {FormattedIssueDateTime:document.Date},\r\n            ]})\r\n\r\n    }\r\n\r\n    RoadConsignment.push({\r\n        ConsigneeDeliveryEvent:[\r\n            {ActualOccurrenceDateTime:cmr.date_of_delivery},\r\n            {ActualOccurrenceLocation:[\r\n                    {Name:cmr.delivery_place_name},\r\n                    {CountryCode: cmr.delivery_country_code},\r\n                    {CountryName: listOfCountries[cmr.delivery_country_code]},\r\n                ]}\r\n        ]\r\n    });\r\n\r\n    RoadConsignment.push({\r\n        CarrierPickUpEvent:[\r\n            {ActualOccurrenceDateTime:cmr.date_of_pickup},\r\n            {ActualOccurrenceLocation:[\r\n                    {Name:cmr.pickup_location_name},\r\n                    {CountryCode: cmr.pickup_country_code},\r\n                    {CountryName: listOfCountries[cmr.pickup_country_code]},\r\n                ]}\r\n        ]\r\n    });\r\n\r\n    for (let i = 0; i <cmr.consignment.length ; i++) {\r\n        let consignment_item = cmr.consignment[i];\r\n        RoadConsignment.push({IncludedConsignmentItem: [\r\n                {SequenceNumber:consignment_item.NR},\r\n                {GrossWeight:consignment_item.Gross_weight},\r\n                {GrossVolume:consignment_item.Volume},\r\n                {GoodsDescription:[{IdentificationText:consignment_item.Nature_of_goods}]}\r\n            ]})\r\n    }\r\n\r\n    for (let i = 0; i <cmr.consignment.length ; i++) {\r\n        let consignment_item = cmr.consignment[i];\r\n        RoadConsignment.push({TransportPackage: [\r\n                {ItemQuantity:consignment_item.Number_of_packages},\r\n                {TypeCode:consignment_item.Method_of_pa—Åking},\r\n                {ShippingMarks:[{MarkingText:consignment_item.Marks_and_Nos}]}\r\n            ]})\r\n\r\n    }\r\n\r\n    RoadConsignment.push({TransportDetails:[\r\n            {StageCode:cmr.truck},\r\n            {ModeCode:cmr.trailer},\r\n        ]});\r\n\r\n    RoadConsignment.push({ConsignirProvidedRegulatoryFormalitiesInstructions:[\r\n            {Description:cmr.instruction},\r\n        ]});\r\n\r\n\r\n    let cmrXML = {\r\n        MMTCCBDAeCMRMessage:[\r\n            {eCMRHeaderDetails:eCMRHeaderDetails},\r\n            {RoadConsignment:RoadConsignment},\r\n\r\n        ]\r\n    }\r\n\r\n    return cmrXML;\r\n\r\n};\r\n\r\nexport const checkRequiredCMR = (errors, cmr) => {\r\n    errors.CMR = {};\r\n    // if (!cmr.invoice_id) errors.Invoice[\"ID\"] = true;\r\n    // if (!cmr.date_of_document) errors.Invoice[\"Date of document\"] = true;\r\n}\r\n\r\nexport default generateCMR;","import xml from 'xml'\r\nimport generateInvoice, {checkRequiredInvoice} from \"./generateInvoice\";\r\nimport _ from 'underscore'\r\nimport generateCMR from \"./generateCMR\";\r\n\r\nfunction createXML(data, onError, checkForErrors,xmlType) {\r\n    if(checkForErrors){\r\n        const errors = checkRequiredFields(data);\r\n        if (!_.isEmpty(errors)) {\r\n            onError(errors);\r\n            return;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    switch (xmlType) {\r\n        case 'invoice':\r\n            let invoiceXML = generateInvoice(data.invoice)\r\n            let xmlValueInvoice = xml([invoiceXML], {declaration: true});\r\n            downloadXMLfile(xmlValueInvoice);\r\n        case 'cmr':\r\n            let cmrXML = generateCMR(data.cmr)\r\n            let xmlValueCMR = xml([cmrXML], {declaration: true});\r\n            downloadXMLfile(xmlValueCMR);\r\n\r\n    }\r\n}\r\n\r\nfunction checkRequiredFields(data) {\r\n    console.log(\"checking for errors\")\r\n    const errors = {};\r\n    checkRequiredInvoice(errors, data.invoice);\r\n\r\n\r\n    //deleting empty objects\r\n    Object.keys(errors).forEach(el => {\r\n        if (_.isEmpty(errors[el])) delete errors[el];\r\n    })\r\n\r\n    return errors;\r\n}\r\n\r\nlet downloadXMLfile = (xmlValue) => {\r\n    let data = xmlValue;\r\n    let filename = `XML config ${new Date()}.xml`\r\n    let file = new Blob([data], /*{type: type}*/);\r\n\r\n    let a = document.createElement(\"a\"),\r\n        url = URL.createObjectURL(file);\r\n    a.href = url;\r\n    a.download = filename;\r\n    document.body.appendChild(a);\r\n    a.click();\r\n    setTimeout(function () {\r\n        document.body.removeChild(a);\r\n        window.URL.revokeObjectURL(url);\r\n    }, 100);\r\n}\r\n\r\nexport default createXML;","let units = [\"[Unit]\", \"KGM\", \"TNE\",\"M3\",\"PCS\",\"LTR\"]\r\nexport default units","import {makeStyles} from \"@material-ui/core/styles\";\r\nimport React, {useState} from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport ReactDataGrid from \"react-data-grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport datePicker from \"../pickers/datePicker\";\r\nimport {Editors} from 'react-data-grid-addons';\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\n\r\nconst {DropDownEditor} = Editors;\r\n\r\nconst illGridRef = React.createRef();\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 200,\r\n    },\r\n    formControlNoMargin: {\r\n        minWidth: 225,\r\n        height: 85\r\n    },\r\n    selectControl: {\r\n        height: 85\r\n    },\r\n    labelControl: {\r\n        width: \"90%\"\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    topMargin: {\r\n        marginTop: theme.spacing(5)\r\n    }\r\n}));\r\n\r\nconst HealthFormComponent = ({data, updateData, crewData, passengerData}) => {\r\n\r\n    const classes = useStyles();\r\n    const [openAlert, setOpenAlert] = useState({open: false, error: \"\", severity: 'error'})\r\n    const marginTop = {marginTop: '30px'};\r\n    const widthOfLongQuestion = {width: '65%'}\r\n\r\n    return <>\r\n        <Typography variant=\"h3\" component=\"h3\" gutterBottom>\r\n            Maritime Declaration of Health\r\n        </Typography>\r\n\r\n        <Typography style={marginTop} variant=\"h5\" classes={classes.topMargin} component=\"h5\" gutterBottom>\r\n            Health questions\r\n        </Typography>\r\n\r\n        <Grid container style={marginTop} classes={classes.topMargin} justify=\"space-between\">\r\n            <div style={widthOfLongQuestion}>\r\n                <FormControl\r\n                    variant=\"outlined\"\r\n                    className={classes.formControlNoMargin}\r\n                    fullWidth\r\n                >\r\n                    <InputLabel className={classes.labelControl} id=\"enum-1-label\">(1) Has any person died on board\r\n                        during the voyage otherwise than as a\r\n                        result of accident? </InputLabel>\r\n                    <Select\r\n                        labelId=\"enum-1-label\"\r\n                        value={data.enum1}\r\n                        className={classes.selectControl}\r\n                        onChange={(e) => {\r\n                            updateData({enum1: e.target.value})\r\n                        }}\r\n                    >\r\n                        <MenuItem value={'Yes'}>Yes</MenuItem>\r\n                        <MenuItem value={'No'}>No</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </div>\r\n            <TextField\r\n                label=\"Total no. of death\"\r\n                value={data.nrOfDeath}\r\n                style={{marginRight: \"30px\"}}\r\n                onChange={(e) =>\r\n                    updateData({nrOfDeath: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n        </Grid>\r\n\r\n        <Grid container style={marginTop} classes={classes.topMargin} justify=\"space-between\">\r\n            <div style={widthOfLongQuestion}>\r\n                <FormControl\r\n                    style={{height: \"85px\"}}\r\n                    variant=\"outlined\"\r\n                    className={classes.formControlNoMargin}\r\n                    fullWidth\r\n                >\r\n                    <InputLabel className={classes.labelControl} id=\"enum-2-label\">(2) Is there on board or has there\r\n                        been during the international\r\n                        voyage any case of disease which you suspect to be of an infectious nature?</InputLabel>\r\n                    <Select\r\n                        className={classes.selectControl}\r\n                        labelId=\"enum-2-label\"\r\n                        value={data.enum2}\r\n                        onChange={(e) => {\r\n                            updateData({enum2: e.target.value})\r\n                        }}\r\n                    >\r\n                        <MenuItem value={'Yes'}>Yes</MenuItem>\r\n                        <MenuItem value={'No'}>No</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </div>\r\n        </Grid>\r\n\r\n        <Grid container style={marginTop} classes={classes.topMargin} justify=\"space-between\">\r\n            <div style={widthOfLongQuestion}>\r\n                <FormControl\r\n                    variant=\"outlined\"\r\n                    className={classes.formControlNoMargin}\r\n                    fullWidth\r\n                >\r\n                    <InputLabel className={classes.labelControl} id=\"enum-3-label\">(3) Has the total number of ill\r\n                        passengers during the voyage been\r\n                        greater than normal/expected?</InputLabel>\r\n                    <Select\r\n                        className={classes.selectControl}\r\n                        labelId=\"enum-3-label\"\r\n                        value={data.enum3}\r\n                        onChange={(e) => {\r\n                            updateData({enum3: e.target.value})\r\n                        }}\r\n                    >\r\n                        <MenuItem value={'Yes'}>Yes</MenuItem>\r\n                        <MenuItem value={'No'}>No</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </div>\r\n            <TextField\r\n                label=\"How many ill persons?\"\r\n                value={data.nrOfIll}\r\n                style={{marginRight: \"30px\"}}\r\n                onChange={(e) =>\r\n                    updateData({nrOfIll: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n        </Grid>\r\n\r\n        <Grid container style={marginTop} classes={classes.topMargin} justify=\"space-between\">\r\n            <div style={widthOfLongQuestion}>\r\n                <FormControl\r\n                    variant=\"outlined\"\r\n                    className={classes.formControlNoMargin}\r\n                    fullWidth\r\n                >\r\n                    <InputLabel className={classes.labelControl} id=\"enum-4-label\">(4) Is there any ill person on board\r\n                        now?</InputLabel>\r\n                    <Select\r\n                        className={classes.selectControl}\r\n                        labelId=\"enum-4-label\"\r\n                        value={data.enum4}\r\n                        onChange={(e) => {\r\n                            updateData({enum4: e.target.value})\r\n                        }}\r\n                    >\r\n                        <MenuItem value={'Yes'}>Yes</MenuItem>\r\n                        <MenuItem value={'No'}>No</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </div>\r\n        </Grid>\r\n\r\n        <Grid container style={marginTop} classes={classes.topMargin} justify=\"space-between\">\r\n            <div style={widthOfLongQuestion}>\r\n                <FormControl\r\n                    variant=\"outlined\"\r\n                    className={classes.formControlNoMargin}\r\n                    fullWidth\r\n                >\r\n                    <InputLabel className={classes.labelControl} id=\"enum-5-label\">(5) Was a medical practitioner\r\n                        consulted?</InputLabel>\r\n                    <Select\r\n                        className={classes.selectControl}\r\n                        labelId=\"enum-5-label\"\r\n                        value={data.enum5}\r\n                        onChange={(e) => {\r\n                            updateData({enum5: e.target.value})\r\n                        }}\r\n                    >\r\n                        <MenuItem value={'Yes'}>Yes</MenuItem>\r\n                        <MenuItem value={'No'}>No</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </div>\r\n        </Grid>\r\n\r\n        <Grid container style={marginTop} classes={classes.topMargin} justify=\"space-between\">\r\n            <div style={widthOfLongQuestion}>\r\n                <FormControl\r\n                    variant=\"outlined\"\r\n                    className={classes.formControlNoMargin}\r\n                    fullWidth\r\n                >\r\n                    <InputLabel className={classes.labelControl} id=\"enum-6-label\">(6) Are you aware of any condition on\r\n                        board which may lead to\r\n                        infection or spread of disease?</InputLabel>\r\n                    <Select\r\n                        className={classes.selectControl}\r\n                        labelId=\"enum-6-label\"\r\n                        value={data.enum6}\r\n                        onChange={(e) => {\r\n                            updateData({enum6: e.target.value})\r\n                        }}\r\n                    >\r\n                        <MenuItem value={'Yes'}>Yes</MenuItem>\r\n                        <MenuItem value={'No'}>No</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </div>\r\n        </Grid>\r\n\r\n        <Grid container style={marginTop} classes={classes.topMargin} justify=\"space-between\">\r\n            <div style={widthOfLongQuestion}>\r\n                <FormControl\r\n                    variant=\"outlined\"\r\n                    className={classes.formControlNoMargin}\r\n                    fullWidth\r\n                >\r\n                    <InputLabel className={classes.labelControl} id=\"enum-7-label\">(7) Has any sanitary measure (e.g.\r\n                        quarantine, isolation, disinfection\r\n                        or decontamination) been applied on board?</InputLabel>\r\n                    <Select\r\n                        className={classes.selectControl}\r\n                        labelId=\"enum-7-label\"\r\n                        value={data.enum7}\r\n                        onChange={(e) => {\r\n                            updateData({enum7: e.target.value})\r\n                        }}\r\n                    >\r\n                        <MenuItem value={'Yes'}>Yes</MenuItem>\r\n                        <MenuItem value={'No'}>No</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </div>\r\n        </Grid>\r\n\r\n        <div style={{width: '470px', position: 'relative', marginTop: '30px'}}>\r\n            <ReactDataGrid\r\n                columns={[\r\n                    {key: \"type\", name: \"Type\", editable: true, width: 150},\r\n                    {key: \"place\", name: \"Place\", editable: true, width: 150},\r\n                    {key: \"date\", name: \"Date\", editable: true, editor: datePicker, width: 150}\r\n                ]}\r\n                rowGetter={i => data.sanitaryMeasures[i]}\r\n                rowsCount={data.sanitaryMeasures.length}\r\n                onGridRowsUpdated={({fromRow, toRow, updated}) => {\r\n                    const sanitaryMeasures = data.sanitaryMeasures.slice();\r\n                    for (let i = fromRow; i <= toRow; i++) {\r\n                        sanitaryMeasures[i] = {...sanitaryMeasures[i], ...updated};\r\n                    }\r\n                    updateData({sanitaryMeasures})\r\n                }}\r\n                enableCellSelect={true}\r\n            />\r\n            <Button startIcon={<AddIcon/>} variant=\"primary\" onClick={() => {\r\n                let sanitaryMeasures = data.sanitaryMeasures;\r\n                sanitaryMeasures.push({});\r\n                updateData({sanitaryMeasures})\r\n            }}>\r\n                Add row\r\n            </Button>\r\n            <Button startIcon={<DeleteOutlineIcon/>} variant=\"primary\" onClick={() => {\r\n                let sanitaryMeasures = data.sanitaryMeasures;\r\n                sanitaryMeasures.pop();\r\n                updateData({sanitaryMeasures});\r\n            }}>Delete row</Button>\r\n        </div>\r\n\r\n        <Grid container style={marginTop} classes={classes.topMargin} justify=\"space-between\">\r\n            <div style={widthOfLongQuestion}>\r\n                <FormControl\r\n                    variant=\"outlined\"\r\n                    className={classes.formControlNoMargin}\r\n                    fullWidth\r\n                >\r\n                    <InputLabel className={classes.labelControl} id=\"enum-8-label\">(8) have any stowaways been found on\r\n                        board?</InputLabel>\r\n                    <Select\r\n                        className={classes.selectControl}\r\n                        labelId=\"enum-8-label\"\r\n                        value={data.enum8}\r\n                        onChange={(e) => {\r\n                            updateData({enum8: e.target.value})\r\n                        }}\r\n                    >\r\n                        <MenuItem value={'Yes'}>Yes</MenuItem>\r\n                        <MenuItem value={'No'}>No</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </div>\r\n\r\n            <TextField\r\n                label=\"If yes, where did they join the ship (if known)?\"\r\n                margin={'normal'}\r\n                value={data.joinedStowaways}\r\n                style={{marginRight: \"30px\"}}\r\n                onChange={(e) => {\r\n                    let joinedStowaways = e.target.value;\r\n                    updateData({joinedStowaways})\r\n                }}\r\n                variant=\"outlined\"\r\n            />\r\n        </Grid>\r\n\r\n        <Grid container style={marginTop} classes={classes.topMargin} justify=\"space-between\">\r\n            <div style={widthOfLongQuestion}>\r\n                <FormControl\r\n                    variant=\"outlined\"\r\n                    className={classes.formControlNoMargin}\r\n                    fullWidth\r\n                >\r\n                    <InputLabel className={classes.labelControl} id=\"enum-9-label\">(9) Is there a sick animal or pet on\r\n                        board?</InputLabel>\r\n                    <Select\r\n                        className={classes.selectControl}\r\n                        labelId=\"enum-9-label\"\r\n                        value={data.enum9}\r\n                        onChange={(e) => {\r\n                            updateData({enum9: e.target.value})\r\n                        }}\r\n                    >\r\n                        <MenuItem value={'Yes'}>Yes</MenuItem>\r\n                        <MenuItem value={'No'}>No</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </div>\r\n        </Grid>\r\n\r\n        <Typography style={marginTop} variant=\"p\" classes={classes.topMargin} component=\"p\" gutterBottom>\r\n            Note: In the absence of a surgeon, the master should regard the following symptoms as grounds for suspecting\r\n            the existence of a disease of an infectious nature:<br/>\r\n            (a) fever, persisting for several days or accompanied by (i) prostration; (ii) decreased consciousness;\r\n            (iii) glandular swelling; (iv) jaundice; (v) cough or shortness of breath; (vi) unusual bleeding; or (vii)\r\n            paralysis.<br/>\r\n            (b) with or without fever: (i) any acute skin rash or eruption; (ii) severe vomiting (other than sea\r\n            sickness); (iii) severediarrhoea; or (iv) recurrent convulsions.\r\n        </Typography>\r\n\r\n        {/*The Alerts*/}\r\n        <Collapse in={openAlert.open} style={{marginTop: '30px'}}>\r\n            <Alert\r\n                severity={openAlert.severity}\r\n                action={\r\n                    <IconButton\r\n                        aria-label=\"close\"\r\n                        color=\"inherit\"\r\n                        size=\"small\"\r\n                        onClick={() => {\r\n                            setOpenAlert({open: false, error: \"\", severity: 'error'});\r\n                        }}\r\n                    >\r\n                        <CloseIcon fontSize=\"inherit\"/>\r\n                    </IconButton>\r\n                }\r\n            >\r\n                {openAlert.error}\r\n            </Alert>\r\n        </Collapse>\r\n\r\n        <div style={{marginTop: '30px'}}>\r\n            <ReactDataGrid\r\n                key={Math.random()}\r\n                ref={illGridRef}\r\n                columns={[\r\n                    {key: \"NR\", name: \"NR\", editable: true, width: 40},\r\n                    {\r\n                        key: \"crewPassenger\",\r\n                        name: \"Crew or passenger\",\r\n                        editable: true,\r\n                        width: 145,\r\n                        editor: <DropDownEditor options={['(...)', 'Crew', 'Passenger']}/>\r\n                    },\r\n                    {key: \"familyName\", name: \"Family name\", editable: false, width: 100},\r\n                    {key: \"firstName\", name: \"First name\", editable: false, width: 85},\r\n                    {key: \"ill\", name: \"Illness\", editable: true, width: 150},\r\n                    {key: \"symptomsDate\", name: \"Symptoms Date\", editable: true, width: 120, editor: datePicker},\r\n                    {\r\n                        key: \"reportedPort\",\r\n                        name: \"Reported to port medical\",\r\n                        editable: true,\r\n                        editor: <DropDownEditor options={['(...)', 'Yes', 'No']}/>,\r\n                        width: 150\r\n                    },\r\n                    {key: \"state\", name: \"State\", editable: true, width: 150},\r\n                    {key: \"caseDisposal\", name: \"Case Disposal\", editable: true, width: 150},\r\n                    {key: \"location\", name: \"Location of evacuation\", editable: true, width: 150},\r\n                    {key: \"treatment\", name: \"Treatment\", editable: true, width: 150},\r\n                    {key: \"comments\", name: \"Comments\", editable: true, width: 150},\r\n\r\n                ]}\r\n                rowGetter={i => data.illList[i]}\r\n                rowsCount={data.illList.length}\r\n                onGridRowsUpdated={({fromRow, toRow, updated}) => {\r\n                    console.log('From row:', fromRow, 'to row: ', toRow, 'and updated: ', updated)\r\n                    const illList = data.illList;\r\n\r\n                    for (let i = fromRow; i <= toRow; i++) {\r\n                        let item = illList[i];\r\n                        // to put the first and last name there\r\n                        if (updated.hasOwnProperty(\"NR\")) {\r\n                            if (!item.hasOwnProperty(\"crewPassenger\")) {\r\n                                setOpenAlert({\r\n                                    open: true,\r\n                                    error: 'Please fill in \"Crew or Passenger\" field first',\r\n                                    severity: 'error'\r\n                                })\r\n                                setTimeout(() => setOpenAlert({open: false, error: \"\", severity: 'error'}), 5000);\r\n                                continue;\r\n                            }\r\n                            item.NR = parseInt(updated.NR);\r\n                            if (item.crewPassenger === 'Crew') {\r\n                                let crewItem = crewData.rows.find(el => el.NR === item.NR);\r\n                                if (!crewItem) {\r\n                                    setOpenAlert({\r\n                                        open: true, error: \"Crew with number \" + item.NR\r\n                                            + \" does not exist. Please provide NR with correct number reference of crew member\",\r\n                                        severity: 'error'\r\n                                    })\r\n                                    setTimeout(() => setOpenAlert({open: false, error: \"\", severity: 'error'}), 5000);\r\n                                    continue;\r\n                                }\r\n                                item.firstName = crewItem.Given_name;\r\n                                item.familyName = crewItem.Family_name;\r\n                                illList[i] = item;\r\n                            } else if (item.crewPassenger === \"Passenger\") {\r\n                                let passengerItem = passengerData.rows.find(el => el.NR === item.NR);\r\n                                if (!passengerItem) {\r\n                                    setOpenAlert({\r\n                                        open: true, error: \"Passenger with number \" + item.NR\r\n                                            + \" does not exist. Please provide NR with correct number reference of passenger member\",\r\n                                        severity: 'error'\r\n                                    })\r\n                                    setTimeout(() => setOpenAlert({open: false, error: \"\", severity: 'error'}), 5000);\r\n                                    continue;\r\n                                }\r\n                                item.firstName = passengerItem.Given_name;\r\n                                item.familyName = passengerItem.Family_name;\r\n                                illList[i] = item;\r\n                            } else {\r\n                                setOpenAlert({\r\n                                    open: true,\r\n                                    error: 'Please fill in \"Crew or Passenger\" field first',\r\n                                    severity: 'error'\r\n                                })\r\n                                setTimeout(() => setOpenAlert({open: false, error: \"\", severity: 'error'}), 5000);\r\n                            }\r\n                        } else {\r\n                            item = {...item, ...updated};\r\n                        }\r\n                        illList[i] = item;\r\n                    }\r\n\r\n                    updateData({illList: illList})\r\n                }}\r\n                enableCellSelect={true}\r\n            />\r\n            <Button startIcon={<AddIcon/>} variant=\"primary\" onClick={() => {\r\n                let illList = data.illList;\r\n                illList.push({});\r\n                updateData({illList})\r\n            }}>\r\n                Add row\r\n            </Button>\r\n            <Button startIcon={<DeleteOutlineIcon/>} variant=\"primary\" onClick={() => {\r\n                let illList = data.illList;\r\n                illList.pop();\r\n                updateData({illList});\r\n            }}>Delete row</Button>\r\n        </div>\r\n\r\n    </>\r\n}\r\n\r\nexport default HealthFormComponent;","import React from \"react\";\r\nimport ReactDataGrid from 'react-data-grid';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {Editors} from 'react-data-grid-addons';\r\nimport unitList from \"../../config/consts/unitList\";\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\n\r\nconst {DropDownEditor} = Editors;\r\n\r\nconst styles = (theme) => ({\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n            width: '25ch',\r\n        },\r\n    },\r\n});\r\n\r\nconst UnitEditor = <DropDownEditor options={unitList}/>;\r\n\r\nconst columns = [\r\n    {key: \"NR\", name: \"NR\", editable: true, width: 50},\r\n    {key: \"Name_of_article\", name: \"Name of article\", editable: true},\r\n    {key: \"Quantity\", name: \"Quantity\", editable: true},\r\n    {key: \"Unit\", name: \"Unit\", editable: true, editor: UnitEditor},\r\n    {key: \"Location_on_board\", name: \"Location on board\", editable: true},\r\n];\r\n\r\n\r\nfunction ShipStoresForm({data, updateData}) {\r\n    function addRow() {\r\n        console.log(\"adding row\");\r\n        let number = data.rows.length + 1\r\n        let row = {NR: number}\r\n        data.rows.push(row);\r\n        updateData(data)\r\n    }\r\n\r\n    function deleteRow() {\r\n        data.rows.pop();\r\n        updateData(data)\r\n    }\r\n\r\n    function onGridRowsUpdated({fromRow, toRow, updated}) {\r\n\r\n        const rows = data.rows.slice();\r\n        for (let i = fromRow; i <= toRow; i++) {\r\n            rows[i] = {...rows[i], ...updated};\r\n        }\r\n        data.rows = rows\r\n        updateData(data)\r\n    };\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Typography variant=\"h3\" component=\"h3\" gutterBottom>\r\n                Ship stores\r\n            </Typography>\r\n            <ReactDataGrid\r\n                columns={columns}\r\n                rowGetter={i => data.rows[i]}\r\n                rowsCount={data.rows.length}\r\n                onGridRowsUpdated={onGridRowsUpdated}\r\n                enableCellSelect={true}\r\n                columnAutoWidth=\"true\"\r\n\r\n            />\r\n            <Button startIcon={<AddIcon/>} variant=\"primary\" onClick={addRow}>Add row</Button>\r\n            <Button startIcon={<DeleteOutlineIcon/>} variant=\"primary\" onClick={deleteRow}>Delete row</Button>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\n\r\nexport default withStyles(styles)(ShipStoresForm);","import React, {useState} from \"react\";\r\nimport ReactDataGrid from 'react-data-grid';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {Editors} from 'react-data-grid-addons';\r\nimport unitList from \"../../config/consts/unitList\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\n\r\nconst {DropDownEditor} = Editors;\r\n\r\nconst styles = (theme) => ({\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n            width: '25ch',\r\n        },\r\n    },\r\n});\r\n\r\nconst UnitEditor = <DropDownEditor options={unitList}/>;\r\n\r\n\r\nconst columns = [\r\n    {key: \"NR\", name: \"NR\", editable: true},\r\n    {key: \"Family_name\", name: \"Family name\", editable: false},\r\n    {key: \"Given_name\", name: \"Given name\", editable: false},\r\n    {key: \"Rank_of_rating\", name: \"Rank of rating\", editable: false},\r\n    {key: \"Effects_description\", name: \"Effects description\", editable: true},\r\n    {key: \"Quantity\", name: \"Quantity\", editable: true},\r\n    {key: \"Unit\", name: \"Unit\", editable: true, editor: UnitEditor}\r\n];\r\n\r\nfunction CrewEffectsForm({data, crewData, updateData}) {\r\n    const [openAlert, setOpenAlert] = useState({open: false, error: \"\", severity: 'error'});\r\n\r\n    function addRow() {\r\n        console.log(\"adding row\");\r\n        let row = {}\r\n        data.rows.push(row);\r\n        updateData(data)\r\n    }\r\n\r\n    function deleteRow() {\r\n        data.rows.pop();\r\n        updateData(data)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Typography variant=\"h3\" component=\"h3\" gutterBottom>\r\n                Crew effects\r\n            </Typography>\r\n            {/*The Alerts*/}\r\n            <Collapse in={openAlert.open} style={{marginTop: '30px'}}>\r\n                <Alert\r\n                    severity={openAlert.severity}\r\n                    action={\r\n                        <IconButton\r\n                            aria-label=\"close\"\r\n                            color=\"inherit\"\r\n                            size=\"small\"\r\n                            onClick={() => {\r\n                                setOpenAlert({open: false, error: \"\", severity: 'error'});\r\n                            }}\r\n                        >\r\n                            <CloseIcon fontSize=\"inherit\"/>\r\n                        </IconButton>\r\n                    }\r\n                >\r\n                    {openAlert.error}\r\n                </Alert>\r\n            </Collapse>\r\n            <ReactDataGrid\r\n                columns={columns}\r\n                rowGetter={i => data.rows[i]}\r\n                rowsCount={data.rows.length}\r\n                onGridRowsUpdated={({fromRow, toRow, updated}) => {\r\n                    console.log('From row:', fromRow, 'to row: ', toRow, 'and updated: ', updated)\r\n                    const rows = data.rows;\r\n\r\n                    for (let i = fromRow; i <= toRow; i++) {\r\n                        let item = rows[i];\r\n                        if (updated.hasOwnProperty(\"NR\")) {\r\n                            item.NR = updated.NR;\r\n\r\n                            let crewItem = crewData.rows.find(function (element) {\r\n                                return parseInt(element.NR) === parseInt(item.NR)\r\n                            });\r\n                            console.log(\"crewItem \", crewItem)\r\n                            if (!crewItem) {\r\n                                item.NR = '';\r\n                                item.Family_name = '';\r\n                                item.Given_name = '';\r\n                                item.Rank_of_rating = '';\r\n                                setOpenAlert({\r\n                                    open: true,\r\n                                    error: \"Crew member with number \" + item.NR\r\n                                        + \" does not exist. Please provide NR with correct number reference of crew member\",\r\n                                    severity: 'error'\r\n                                })\r\n                                setTimeout(() => setOpenAlert({open: false, error: \"\", severity: 'error'}), 5000);\r\n                                item = {...item, ...updated};\r\n                                continue;\r\n                            } else {\r\n                                item.Family_name = crewItem.Family_name;\r\n                                item.Given_name = crewItem.Given_name;\r\n                                item.Rank_of_rating = crewItem.Rank_of_rating;\r\n                                console.log(\"item modified \", item)\r\n                                item = {...item, ...updated};\r\n                            }\r\n\r\n                        } else {\r\n                            item = {...item, ...updated};\r\n                        }\r\n                        rows[i] = item;\r\n                    }\r\n                    updateData({rows: rows})\r\n\r\n                }}\r\n                enableCellSelect={true}\r\n                columnAutoWidth=\"true\"\r\n\r\n            />\r\n            <Button variant=\"primary\" startIcon={<AddIcon/>} onClick={addRow}>Add row</Button>\r\n            <Button variant=\"primary\" startIcon={<DeleteOutlineIcon/>} onClick={deleteRow}>Delete row</Button>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\n\r\nexport default withStyles(styles)(CrewEffectsForm);","let kindOfPackages = [\"(...)\",\"AE\",\"BG\",\"BR\",\"CK\",\"GB\",\"PK\",\"PA\",\"RL\",\"SU\",\"TU\"]\r\nexport default kindOfPackages;","import React from \"react\";\r\nimport ReactDataGrid from 'react-data-grid';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {Editors} from 'react-data-grid-addons';\r\nimport ListOfPorts from \"../../config/JSON/listOfPorts\";\r\nimport kindOfPackagesList from \"../../config/consts/kindOfPackagesList\";\r\nimport unitList from \"../../config/consts/unitList\";\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\n\r\nconst {DropDownEditor} = Editors;\r\n\r\nconst styles = (theme) => ({\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n            width: '25ch',\r\n        },\r\n    },\r\n});\r\n\r\n\r\nconst KindOfPackagesEditor = <DropDownEditor options={kindOfPackagesList}/>;\r\nconst UnitEditor = <DropDownEditor options={unitList}/>;\r\nconst ports = [\"(...)\"];\r\nListOfPorts.map((port) =>\r\n    ports.push(port.code + ' - ' + port.countryCode + ' - ' + port.name)\r\n);\r\nconst PortEditor = <DropDownEditor options={ports}/>;\r\n\r\nconst columns = [\r\n    {key: \"Seq\", name: \"Seq\", editable: true, width: 50},\r\n    {key: \"BL_number\", name: \"B/L number\", editable: true, width: 100},\r\n    {key: \"Port_of_loading\", name: \"Port of loading\", editable: true, width: 150, editor: PortEditor},\r\n    {key: \"Port_of_discharge\", name: \"Port of discharge\", editable: true, width: 150, editor: PortEditor},\r\n    {key: \"Number_of_packages\", name: \"Number of packages\", editable: true, width: 150},\r\n    {key: \"Kind_of_packages\", name: \"Kind of packages\", editable: true, editor: KindOfPackagesEditor, width: 150},\r\n    {key: \"Transport_unit\", name: \"Transport unit(Container number)\", editable: true, width: 240},\r\n    {key: \"Description_of_goods\", name: \"Description of goods\", editable: true, width: 150},\r\n    {key: \"Shipping_marks\", name: \"Shipping marks\", editable: true, width: 150},\r\n    {key: \"HS_code\", name: \"HS code\", editable: true, width: 100},\r\n    {key: \"Gross_quantity\", name: \"Gross quantity\", editable: true, width: 150},\r\n    {key: \"Gross_Unit\", name: \"Unit\", editable: true, editor: UnitEditor, width: 70},\r\n    {key: \"Net_quantity\", name: \"Net quantity\", editable: true, width: 150},\r\n    {key: \"Net_Unit\", name: \"Unit\", editable: true, editor: UnitEditor, width: 70},\r\n    {key: \"Measurement\", name: \"Measurement\", editable: true, width: 150},\r\n    {key: \"Measurement_Unit\", name: \"Unit\", editable: true, editor: UnitEditor, width: 70},\r\n    {key: \"Seal_number\", name: \"Seal number\", editable: true, width: 150},\r\n    {key: \"Custom_status\", name: \"Custom status\", editable: true, width: 150},\r\n    {key: \"Size_and_type\", name: \"Size and type\", editable: true, width: 150},\r\n];\r\n\r\nfunction CargoForm({data, updateData}) {\r\n    function addRow() {\r\n        console.log(\"adding row\");\r\n        let number = data.rows.length + 1\r\n        let row = {Seq: number}\r\n        data.rows.push(row);\r\n        updateData(data)\r\n    }\r\n\r\n    function deleteRow() {\r\n        data.rows.pop();\r\n        updateData(data)\r\n    }\r\n\r\n    function onGridRowsUpdated({fromRow, toRow, updated}) {\r\n\r\n        const rows = data.rows.slice();\r\n        for (let i = fromRow; i <= toRow; i++) {\r\n            rows[i] = {...rows[i], ...updated};\r\n        }\r\n        data.rows = rows;\r\n        updateData(data)\r\n    }\r\n\r\n\r\n    return <>\r\n        <div>\r\n            <Typography variant=\"h3\" component=\"h3\" gutterBottom>\r\n                Cargo\r\n            </Typography>\r\n            <ReactDataGrid\r\n                columns={columns}\r\n                rowGetter={i => data.rows[i]}\r\n                rowsCount={data.rows.length}\r\n                onGridRowsUpdated={onGridRowsUpdated}\r\n                enableCellSelect={true}\r\n\r\n            />\r\n            <Button variant=\"primary\" startIcon={<AddIcon/>} onClick={addRow}>Add row</Button>\r\n            <Button variant=\"primary\" startIcon={<DeleteOutlineIcon/>} onClick={deleteRow}>Delete row</Button>\r\n        </div>\r\n\r\n    </>\r\n}\r\n\r\n\r\nexport default withStyles(styles)(CargoForm);","import FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ReactDataGrid from \"react-data-grid\";\r\nimport datePicker from \"../pickers/datePicker\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {Editors} from \"react-data-grid-addons\";\r\nimport listOfPortsConst from \"../../config/JSON/listOfPorts\";\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\n\r\nconst {DropDownEditor} = Editors;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 200,\r\n    },\r\n    formControlNoMargin: {\r\n        minWidth: 225,\r\n    },\r\n    selectControl: {},\r\n    labelControl: {\r\n        width: \"90%\"\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    topMargin: {\r\n        marginTop: theme.spacing(5)\r\n    }\r\n}));\r\n\r\n\r\nconst SecurityFormComponent = ({data, updateData}) => {\r\n\r\n    const classes = useStyles();\r\n    const marginTop = {marginTop: '30px'};\r\n    const widthOfLongQuestion = {width: '50%'}\r\n    const emptyDIV = <div style={{width: '225px'}}/>;\r\n    const portEditor = listOfPortsConst.map(el => el.code).filter(el => el.length !== 0);\r\n    const activityEditor = ['(...)', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15',]\r\n    return <>\r\n        <Typography variant=\"h3\" classes={classes.topMargin} component=\"h3\" gutterBottom>\r\n            Security Information</Typography>\r\n\r\n        <Typography style={marginTop} variant=\"h5\" classes={classes.topMargin} component=\"h5\" gutterBottom>\r\n            Security information\r\n        </Typography>\r\n\r\n        <Grid container style={marginTop} classes={classes.topMargin} justify=\"space-between\">\r\n            <div style={widthOfLongQuestion}>\r\n                <FormControl\r\n                    variant=\"outlined\"\r\n                    className={classes.formControlNoMargin}\r\n                    fullWidth\r\n                >\r\n                    <InputLabel className={classes.labelControl} id=\"issc-label\">Does the ship have a valid\r\n                        International Ship Security Certificate (ISSC)?</InputLabel>\r\n                    <Select\r\n                        className={classes.selectControl}\r\n                        labelId=\"issc-label\"\r\n                        value={data.validISSC}\r\n                        onChange={(e) => {\r\n                            updateData({validISSC: e.target.value})\r\n                        }}\r\n                    >\r\n                        <MenuItem value={'Yes'}>Yes</MenuItem>\r\n                        <MenuItem value={'No'}>No</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </div>\r\n\r\n            <TextField\r\n                label=\"If no, why not?\"\r\n                value={data.noValid}\r\n                style={{marginRight:\"10%\"}}\r\n                onChange={(e) =>\r\n                    updateData({noValid: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n        </Grid>\r\n\r\n        <FormControl\r\n            style={marginTop}\r\n            variant=\"outlined\"\r\n            className={classes.formControlNoMargin}\r\n        >\r\n            <InputLabel className={classes.labelControl} id=\"issued-label\">Issued by</InputLabel>\r\n            <Select\r\n                className={classes.selectControl}\r\n                labelId=\"issued-label\"\r\n                value={data.issued}\r\n                onChange={(e) => {\r\n                    updateData({issued: e.target.value})\r\n                }}\r\n            >\r\n                <MenuItem value={'GVT'}>GVT</MenuItem>\r\n                <MenuItem value={'RSO'}>RSO</MenuItem>\r\n            </Select>\r\n        </FormControl>\r\n\r\n        <Grid container style={marginTop} classes={classes.topMargin} justify=\"space-between\">\r\n            <FormControl\r\n                variant=\"outlined\"\r\n                className={classes.formControlNoMargin}\r\n            >\r\n                <InputLabel className={classes.labelControl} id=\"issc-type-label\">\r\n                    ISSC type\r\n                </InputLabel>\r\n                <Select\r\n                    className={classes.selectControl}\r\n                    labelId=\"issc-type-label\"\r\n                    value={data.isscType}\r\n                    onChange={(e) => {\r\n                        updateData({isscType: e.target.value})\r\n                    }}\r\n                >\r\n                    <MenuItem value={'Full'}>Full</MenuItem>\r\n                    <MenuItem value={'Interim'}>Interim</MenuItem>\r\n                </Select>\r\n            </FormControl>\r\n\r\n            <TextField\r\n                label=\"Expiry date\"\r\n                type=\"date\"\r\n                variant={'outlined'}\r\n                value={data.expiryDate}\r\n                onChange={(e) =>\r\n                    updateData({expiryDate: e.target.value})}\r\n                InputLabelProps={{\r\n                    shrink: true,\r\n                }}\r\n            />\r\n\r\n            {emptyDIV}\r\n        </Grid>\r\n\r\n        <Grid container style={marginTop} classes={classes.topMargin} justify=\"space-between\">\r\n            <div style={widthOfLongQuestion}>\r\n                <FormControl\r\n                    variant=\"outlined\"\r\n                    className={classes.formControlNoMargin}\r\n                    fullWidth\r\n                >\r\n                    <InputLabel className={classes.labelControl} id=\"security-level-label\">\r\n                        Security level at which the ship is currently operating\r\n                    </InputLabel>\r\n                    <Select\r\n                        className={classes.selectControl}\r\n                        labelId=\"security-level-label\"\r\n                        value={data.securityLevel}\r\n                        onChange={(e) => {\r\n                            updateData({securityLevel: e.target.value})\r\n                        }}\r\n                    >\r\n                        <MenuItem value={'Security Level 1'}>Security level 1</MenuItem>\r\n                        <MenuItem value={'Security Level 2'}>Security level 2</MenuItem>\r\n                        <MenuItem value={'Security Level 3'}>Security level 3</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </div>\r\n        </Grid>\r\n\r\n        <Grid container style={marginTop} classes={classes.topMargin} justify=\"space-between\">\r\n            <div style={widthOfLongQuestion}>\r\n                <FormControl\r\n                    variant=\"outlined\"\r\n                    className={classes.formControlNoMargin}\r\n                    fullWidth\r\n                >\r\n                    <InputLabel className={classes.labelControl} id=\"security-level-label\">\r\n                        Is there any security-related matter you wish to report\r\n                    </InputLabel>\r\n                    <Select\r\n                        className={classes.selectControl}\r\n                        labelId=\"security-level-label\"\r\n                        value={data.securityRelatedMatter}\r\n                        onChange={(e) => {\r\n                            updateData({securityRelatedMatter: e.target.value})\r\n                        }}\r\n                    >\r\n                        <MenuItem value={'Yes'}>Yes</MenuItem>\r\n                        <MenuItem value={'No'}>No</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </div>\r\n        </Grid>\r\n\r\n        <Grid container style={marginTop} classes={classes.topMargin} justify=\"space-between\">\r\n            <div style={widthOfLongQuestion}>\r\n                <FormControl\r\n                    variant=\"outlined\"\r\n                    className={classes.formControlNoMargin}\r\n                    fullWidth\r\n                >\r\n                    <InputLabel className={classes.labelControl} id=\"approved-label\">\r\n                        Does the ship have an approved SSP on board?\r\n                    </InputLabel>\r\n                    <Select\r\n                        className={classes.selectControl}\r\n                        labelId=\"approved-label\"\r\n                        value={data.approvedSSP}\r\n                        onChange={(e) => {\r\n                            updateData({approvedSSP: e.target.value})\r\n                        }}\r\n                    >\r\n                        <MenuItem value={'Yes'}>Yes</MenuItem>\r\n                        <MenuItem value={'No'}>No</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </div>\r\n        </Grid>\r\n\r\n        <hr style={marginTop}/>\r\n\r\n        <Typography style={marginTop} variant=\"h5\" classes={classes.topMargin} component=\"h5\" gutterBottom>\r\n            CSO name and 24 hours contract details\r\n        </Typography>\r\n\r\n        <Grid container style={marginTop} classes={classes.topMargin} justify=\"space-between\">\r\n            <TextField\r\n                label=\"Given name\"\r\n                value={data.firstName}\r\n                onChange={(e) =>\r\n                    updateData({firstName: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n            <TextField\r\n                label=\"Family name\"\r\n                value={data.familyName}\r\n                onChange={(e) =>\r\n                    updateData({familyName: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n            {emptyDIV}\r\n        </Grid>\r\n\r\n        <Grid container style={marginTop} classes={classes.topMargin} justify=\"space-between\">\r\n            <TextField\r\n                label=\"Phone\"\r\n                value={data.firstName}\r\n                onChange={(e) =>\r\n                    updateData({firstName: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n            <TextField\r\n                label=\"Fax\"\r\n                value={data.fax}\r\n                onChange={(e) =>\r\n                    updateData({fax: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Email\"\r\n                value={data.email}\r\n                onChange={(e) =>\r\n                    updateData({email: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n        </Grid>\r\n\r\n        <hr style={marginTop}/>\r\n\r\n        <Typography style={marginTop} variant=\"h5\" classes={classes.topMargin} component=\"h5\" gutterBottom>\r\n            Ship-to-ship activities, in chronological order (most recent first)<br/>\r\n            which were carried out during the last 10 calls at port facilities listed above\r\n        </Typography>\r\n\r\n        <div style={{marginTop: '30px'}}>\r\n            <ReactDataGrid\r\n                columns={[\r\n                    {key: \"NR\", name: \"NR\", editable: true, width: 40},\r\n                    {\r\n                        key: \"dateFrom\",\r\n                        name: \"Date from\",\r\n                        editable: true,\r\n                        width: 145,\r\n                        editor: datePicker\r\n                    },\r\n                    {\r\n                        key: \"dateDeparture\",\r\n                        name: \"Date departure\",\r\n                        editable: true,\r\n                        width: 145,\r\n                        editor: datePicker\r\n                    },\r\n                    {key: \"locationName\", name: \"Location\", editable: true, width: 150},\r\n                    {key: \"latitude\", name: \"Latitude\", editable: true, width: 150},\r\n                    {key: \"longitude\", name: \"Longitude\", editable: true, width: 150},\r\n                    {\r\n                        key: \"shipActivity\",\r\n                        name: \"Activity\",\r\n                        editable: true,\r\n                        width: 120,\r\n                        editor: <DropDownEditor options={activityEditor}/>\r\n                    },\r\n                    {\r\n                        key: \"securityMeasure\",\r\n                        name: \"Security measures\",\r\n                        editable: true,\r\n                        width: 150\r\n                    },\r\n                    {\r\n                        key: \"port\",\r\n                        name: \"Port\",\r\n                        editable: true,\r\n                        editor: <DropDownEditor options={portEditor}/>,\r\n                        width: 150\r\n                    }\r\n                ]}\r\n                rowGetter={i => data.rows[i]}\r\n                rowsCount={data.rows.length}\r\n                onGridRowsUpdated={({fromRow, updated}) => {\r\n                    let rows = data.rows;\r\n                    rows[fromRow] = {...rows[fromRow], ...updated};\r\n                    updateData({rows})\r\n                }}\r\n                enableCellSelect={true}\r\n            />\r\n            <Button startIcon={<AddIcon/>} variant=\"primary\" onClick={() => {\r\n                if (data.rows.length === 0) {\r\n                    data.rows.push({NR: 1});\r\n                    updateData({rows: data.rows})\r\n                    return;\r\n                }\r\n                let NR = parseInt(data.rows[data.rows.length-1].NR);\r\n                NR++;\r\n                data.rows.push({NR: NR});\r\n                updateData({rows: data.rows})\r\n            }}>\r\n                Add row\r\n            </Button>\r\n            <Button startIcon={<DeleteOutlineIcon/>} variant=\"primary\" onClick={() => {\r\n                data.rows.pop();\r\n                updateData({rows: data.rows});\r\n            }}>Delete row</Button>\r\n        </div>\r\n    </>\r\n}\r\n\r\n\r\nexport default SecurityFormComponent;","import React from \"react\";\r\nimport ReactDataGrid from 'react-data-grid';\r\nimport {makeStyles, withStyles} from '@material-ui/core/styles';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {Editors} from 'react-data-grid-addons';\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport ListOfPorts from \"../../config/JSON/listOfPorts\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport wasteTypes from \"../../config/consts/wasteTypes.json\";\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\n\r\nconst {DropDownEditor} = Editors;\r\n\r\nconst styles = (theme) => ({\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n            width: '25ch',\r\n        },\r\n    },\r\n});\r\n\r\nlet wasteTypesList = [\"[Waste type]\"];\r\nfor (let i = 0; i < Object.keys(wasteTypes).length; i++) {\r\n    let wasteTypeFormatted = Object.keys(wasteTypes)[i] + ' : ' + Object.values(wasteTypes)[i];\r\n    wasteTypesList.push(wasteTypeFormatted);\r\n}\r\nconst WasteTypesEditor = <DropDownEditor options={wasteTypesList}/>;\r\nconst ports = [\"(...)\"];\r\nListOfPorts.map((port) =>\r\n    ports.push(port.code + ' - ' + port.countryCode + ' - ' + port.name)\r\n);\r\nconst PortEditor = <DropDownEditor options={ports}/>;\r\nconst columns = [\r\n    {key: \"NR\", name: \"Seq\", editable: true, width: 50},\r\n    {key: \"WasteType\", name: \"Waste Type\", editable: true, width: 150, editor: WasteTypesEditor},\r\n    {key: \"WasteDescription\", name: \"Waste Description(when relevant)\", editable: true, width: 250},\r\n    {key: \"WasteToBeDelivered\", name: \"Waste to be delivered(m3)\", editable: true, width: 250},\r\n    {key: \"MaxStorage\", name: \"Maximum dedicated storage capacity (m3)\", editable: true, width: 300},\r\n    {key: \"WasteAmount\", name: \"Amount of waste on board (m3)\", editable: true, width: 250},\r\n    {\r\n        key: \"PortOfDelivery\",\r\n        name: \"Port of delivery of remaining waste\",\r\n        editable: true,\r\n        width: 250,\r\n        editor: PortEditor\r\n    },\r\n    {key: \"EstimatedWaste\", name: \"Estimated amount of waste to be generated (m3)\", editable: true, width: 350},\r\n];\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        marginLeft: theme.spacing(0),\r\n        minWidth: 200,\r\n    }\r\n}));\r\n\r\n\r\nfunction WasteForm({data, updateData}) {\r\n    const classes = useStyles();\r\n    const widthOfLongQuestion = {width: '65%'}\r\n\r\n    function addRow() {\r\n        console.log(\"adding row\");\r\n        let number = data.rows.length + 1\r\n        let row = {NR: number}\r\n        data.rows.push(row);\r\n        updateData(data)\r\n    }\r\n\r\n    function deleteRow() {\r\n        data.rows.pop();\r\n        updateData(data)\r\n    }\r\n\r\n    function onGridRowsUpdated({fromRow, toRow, updated}) {\r\n\r\n        const rows = data.rows.slice();\r\n        for (let i = fromRow; i <= toRow; i++) {\r\n            rows[i] = {...rows[i], ...updated};\r\n        }\r\n        data.rows = rows;\r\n        updateData(data)\r\n    }\r\n\r\n    function correctDateTime(date) {\r\n        date = \"\" + date;\r\n        return date.substr(0, 16);\r\n    }\r\n\r\n    return <>\r\n        <div>\r\n            <Typography variant=\"h3\" component=\"h3\" gutterBottom>\r\n                Waste information\r\n            </Typography>\r\n            <div style={widthOfLongQuestion}>\r\n                <FormControl\r\n                    variant=\"outlined\"\r\n                    className={classes.formControl}\r\n                    fullWidth\r\n                >\r\n                    <InputLabel className={classes.labelControl} id=\"enum-1-label\">Are you delivering all,some or none\r\n                        of your waste into port reception facility? </InputLabel>\r\n                    <Select\r\n                        labelId=\"enum-1-label\"\r\n                        value={data.WasteDeliveryStatus}\r\n                        className={classes.selectControl}\r\n                        onChange={(e) => {\r\n                            updateData({WasteDeliveryStatus: e.target.value})\r\n                        }}\r\n                    >\r\n                        <MenuItem value={'All'}>All</MenuItem>\r\n                        <MenuItem value={'Some'}>Some</MenuItem>\r\n                        <MenuItem value={'None'}>None</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </div>\r\n            <Typography variant=\"h5\" component=\"h5\" style={{marginTop: '30px'}} gutterBottom className={classes.formControl}>\r\n                Last port and date when ship-generated waste was delivered\r\n            </Typography>\r\n            <div className={'flex-parent'}>\r\n                <Grid container justify=\"space-between\" style={{width: '80%'}}>\r\n                    <FormControl\r\n                        variant=\"outlined\"\r\n                        className={classes.formControl}\r\n                        margin={\"normal\"}\r\n                    >\r\n                        <InputLabel id=\"last-port-label\">Port</InputLabel>\r\n\r\n                        <Select\r\n                            labelId=\"port-of-label-label\"\r\n                            value={data.LastPortDelivered}\r\n                            onChange={(e) => {\r\n                                updateData({LastPortDelivered: e.target.value})\r\n                            }}\r\n                        >\r\n                            {ListOfPorts.map((port, index) =>\r\n                                <MenuItem key={index} value={`${port.code}`}>\r\n                                    {`${port.code} - ${port.countryCode} - ${port.name}`}\r\n                                </MenuItem>\r\n                            )}\r\n                        </Select>\r\n                    </FormControl>\r\n\r\n                    <TextField\r\n                        label=\"Date\"\r\n                        type=\"date\"\r\n                        style={{minWidth: '225px'}}\r\n                        variant={'outlined'}\r\n                        className={classes.formControl}\r\n                        value={correctDateTime(data.LastPortDeliveredDate)}\r\n                        onChange={(e) =>\r\n                            updateData({LastPortDeliveredDate: e.target.value})}\r\n                        InputLabelProps={{\r\n                            shrink: true,\r\n                        }}\r\n                    />\r\n                </Grid>\r\n\r\n            </div>\r\n            <Typography variant=\"h5\" component=\"h5\" gutterBottom style={{marginTop: '30px'}} className={classes.formControl}>\r\n                Waste items\r\n            </Typography>\r\n            <ReactDataGrid\r\n                columns={columns}\r\n                rowGetter={i => data.rows[i]}\r\n                rowsCount={data.rows.length}\r\n                onGridRowsUpdated={onGridRowsUpdated}\r\n                enableCellSelect={true}\r\n\r\n            />\r\n            <Button startIcon={<AddIcon/>} variant=\"primary\" onClick={addRow}>Add row</Button>\r\n            <Button startIcon={<DeleteOutlineIcon/>} variant=\"primary\" onClick={deleteRow}>Delete row</Button>\r\n        </div>\r\n\r\n    </>\r\n}\r\n\r\n\r\nexport default withStyles(styles)(WasteForm);","let dgClassifications = [\"(...)\", \"IMDG\", \"IGC\",\"IBC\",\"MARPOL_ANNEX1\",\"IMSBC\"]\r\nexport default dgClassifications","let classes = [\"(...)\", \"1\", \"1,1\", \"1,2\", \"1,3\", \"1,4\", \"1,5\", \"1,6\", \"2\", \"2,1\", \"2,2\", \"2,3\", \"3\", \"4\", \"4,1\", \"4,2\", \"4,3\", \"5\", \"5,1\", \"5,2\", \"6\", \"6,1\", \"6,2\", \"7\", \"8\", \"9\"];\r\nexport default classes","let groups = [\"(...)\", \"|\", \"||\",\"|||\",\"None\"]\r\nexport default groups","let codes = [\"(...)\",\"X\",\"Y\",\"Z\",\"OS\"]\r\nexport default codes;","import React, {useState} from \"react\";\r\nimport ReactDataGrid from 'react-data-grid';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {Editors} from 'react-data-grid-addons';\r\nimport dgClassifications from \"../../config/consts/dgClassifications\";\r\nimport IMOHazardClasses from \"../../config/consts/IMOHazardClasses\";\r\nimport packingGroups from \"../../config/consts/packingGroups\";\r\nimport pollutionCodes from \"../../config/consts/pollutionCodes\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\n\r\nconst {DropDownEditor} = Editors;\r\n\r\nconst styles = (theme) => ({\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n            width: '25ch',\r\n        },\r\n    },\r\n});\r\n\r\nconst dgClassificationEditor = <DropDownEditor options={dgClassifications}/>;\r\nconst IMOHazardEditor = <DropDownEditor options={IMOHazardClasses}/>;\r\nconst packingGroupsEditor = <DropDownEditor options={packingGroups}/>;\r\nconst pollutionCodesEditor = <DropDownEditor options={pollutionCodes}/>;\r\nconst columns = [\r\n    {key: \"Seq\", name: \"Seq\", editable: true, width: 50},\r\n    {key: \"Container_number\", name: \"Container number\", editable: false, width: 150},\r\n    {key: \"Textual_reference\", name: \"Textual reference\", editable: true, width: 150},\r\n    {key: \"DG_Classification\", name: \"DG Classification\", editable: true, width: 150, editor: dgClassificationEditor},\r\n    {key: \"IMO_hazard_classes\", name: \"IMO hazard classes\", editable: true, width: 150, editor: IMOHazardEditor},\r\n    {key: \"UN_number\", name: \"UN number\", editable: true, width: 150},\r\n    {key: \"Packing_group\", name: \"Packing group\", editable: true, width: 150, editor: packingGroupsEditor},\r\n    {key: \"Subsidiary_risk\", name: \"Subsidiary risk\", editable: true, width: 150},\r\n    {key: \"Flash_point\", name: \"Flash point\", editable: true, width: 150},\r\n    {key: \"pollution_code\", name: \"MARPOL pollution code\", editable: true, width: 200, editor: pollutionCodesEditor},\r\n    {key: \"EmS\", name: \"EmS\", editable: true, width: 100},\r\n    {key: \"Additional_information\", name: \"Additional information\", editable: true, width: 180},\r\n    {key: \"Segregation_information\", name: \"Segregation information\", editable: true, width: 180},\r\n    {key: \"On_board_location\", name: \"On board location\", editable: true, width: 150},\r\n\r\n];\r\n\r\n\r\nconst DPGForm = ({data, cargoData, updateData}) => {\r\n    const [openAlert, setOpenAlert] = useState({open: false, error: \"\", severity: 'error'});\r\n\r\n    function addRow() {\r\n        console.log(\"adding row\");\r\n        let row = {}\r\n        data.rows.push(row);\r\n        updateData(data)\r\n    }\r\n\r\n    function deleteRow() {\r\n        data.rows.pop();\r\n        updateData(data)\r\n    }\r\n\r\n\r\n    return <>\r\n        <div>\r\n            <Typography variant=\"h3\" component=\"h3\" gutterBottom>\r\n                Dangerous goods\r\n            </Typography>\r\n            {/*The Alerts*/}\r\n            <Collapse in={openAlert.open} style={{marginTop: '30px'}}>\r\n                <Alert\r\n                    severity={openAlert.severity}\r\n                    action={\r\n                        <IconButton\r\n                            aria-label=\"close\"\r\n                            color=\"inherit\"\r\n                            size=\"small\"\r\n                            onClick={() => {\r\n                                setOpenAlert({open: false, error: \"\", severity: 'error'});\r\n                            }}\r\n                        >\r\n                            <CloseIcon fontSize=\"inherit\"/>\r\n                        </IconButton>\r\n                    }\r\n                >\r\n                    {openAlert.error}\r\n                </Alert>\r\n            </Collapse>\r\n            <ReactDataGrid\r\n                columns={columns}\r\n                rowGetter={i => data.rows[i]}\r\n                rowsCount={data.rows.length}\r\n                onGridRowsUpdated={({fromRow, toRow, updated}) => {\r\n                    console.log('From row:', fromRow, 'to row: ', toRow, 'and updated: ', updated)\r\n                    const rows = data.rows;\r\n\r\n                    for (let i = fromRow; i <= toRow; i++) {\r\n                        let item = rows[i];\r\n                        if (updated.hasOwnProperty(\"Seq\")) {\r\n                            item.Seq = updated.Seq;\r\n\r\n                            let cargoItem = cargoData.rows.find(function (element) {\r\n                                console.log(\"comparison \", parseInt(element.Seq), \" === \", parseInt(item.Seq))\r\n                                return parseInt(element.Seq) === parseInt(item.Seq)\r\n                            });\r\n                            console.log(\"cargoItem \", cargoItem)\r\n                            if (!cargoItem) {\r\n                                item.Seq = '';\r\n                                setOpenAlert({\r\n                                    open: true,\r\n                                    error: \"Cargo with number \" + item.Seq\r\n                                        + \" does not exist. Please provide Seq with correct number reference of cargo item\",\r\n                                    severity: 'error'\r\n                                })\r\n                                setTimeout(() => setOpenAlert({open: false, error: \"\", severity: 'error'}), 5000);\r\n                                continue;\r\n                            } else {\r\n                                item.Container_number = cargoItem.Transport_unit;\r\n                                console.log(\"item modified \", item)\r\n                                item = {...item, ...updated};\r\n                            }\r\n\r\n                        } else {\r\n                            item = {...item, ...updated};\r\n                        }\r\n                        rows[i] = item;\r\n                    }\r\n                    updateData({rows: rows})\r\n\r\n                }}\r\n                enableCellSelect={true}\r\n\r\n            />\r\n            <Button variant=\"primary\" startIcon={<AddIcon/>} onClick={addRow}>Add row</Button>\r\n            <Button variant=\"primary\" startIcon={<DeleteOutlineIcon/>} onClick={deleteRow}>Delete row</Button>\r\n        </div>\r\n\r\n    </>\r\n}\r\n\r\n\r\nexport default withStyles(styles)(DPGForm);","import React from \"react\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select'\r\nimport '@date-io/date-fns';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport ListOfLanguages from \"../../data/languages\";\r\nimport ListOfCountries from \"../../data/countries\";\r\nimport {Editors} from \"react-data-grid-addons\";\r\nimport documentTypes from \"../../functions/list_getters/documentTypesGetter\";\r\nimport countryCodes from \"../../functions/list_getters/countryCodes\";\r\nimport ReactDataGrid from \"react-data-grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport DeleteOutlineIcon from \"@material-ui/icons/DeleteOutline\";\r\nimport datePicker from \"../pickers/datePicker\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 225,\r\n    },\r\n    datePicker: {\r\n        minWidth: 225,\r\n        width: 225\r\n    },\r\n    formControlNoMargin: {\r\n        minWidth: 225,\r\n    },\r\n    formControlNoMargin2: {\r\n        minWidth: 225,\r\n    },\r\n    selectEmpty: {\r\n        marginTop: theme.spacing(2),\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n\r\n    divisionLine:{\r\n        background: 'black',\r\n        color: 'black',\r\n        borderColor: 'black',\r\n        height: '3px',\r\n        width:\"100%\",\r\n        marginTop:\"30px\"\r\n    }\r\n}));\r\nconst {DropDownEditor} = Editors;\r\nconst documentTypesList = documentTypes.getDocumentsWithTypes();\r\nconst DocumentTypesEditor = <DropDownEditor options={documentTypesList}/>;\r\n\r\nconst documentsAttachedRows = [\r\n    {key: \"NR\", name: \"NR\", editable: false},\r\n    {key: \"TypeCode\", name: \"Type\", editable: true, editor: DocumentTypesEditor},\r\n    {key: \"Remarks\", name: \"Remarks\", editable: true},\r\n    {key: \"Date\", name: \"Date\", editable: true, editor: datePicker}\r\n];\r\n\r\nconst consignmentRows = [\r\n    {key: \"NR\", name: \"NR\", editable: false},\r\n    {key: \"Gross_weight\", name: \"Gross weight\", editable: true},\r\n    {key: \"Volume\", name: \"Volume\", editable: true},\r\n    {key: \"Nature_of_goods\", name: \"Nature of the goods\", editable: true},\r\n    {key: \"Number_of_packages\", name: \"Number of packages\", editable: true},\r\n    {key: \"Method_of_pa—Åking\", name: \"Method of pa—Åking\", editable: true},\r\n    {key: \"Marks_and_Nos\", name: \"Marks and Nos.\", editable: true}\r\n];\r\n\r\nfunction PortForm({data, updateData, locationNumber}) {\r\n    const classes = useStyles();\r\n    const emptyDiv = <div className={classes.formControlNoMargin} style={{height: '0px'}}/>\r\n\r\n    function addRowDocumentsAttached() {\r\n        let number = data.documentsAttached.length + 1\r\n        let row = {NR: number}\r\n        data.documentsAttached.push(row);\r\n        updateData(data)\r\n    }\r\n\r\n    function deleteRowDocumentsAttached() {\r\n        data.documentsAttached.pop();\r\n        updateData(data)\r\n    }\r\n\r\n    function onGridRowsUpdatedDocumentsAttached({fromRow, toRow, updated}) {\r\n\r\n        const documentsAttached = data.documentsAttached.slice();\r\n        for (let i = fromRow; i <= toRow; i++) {\r\n            documentsAttached[i] = {...documentsAttached[i], ...updated};\r\n        }\r\n        data.documentsAttached = documentsAttached;\r\n        updateData(data)\r\n    }\r\n\r\n    function addRowConsignment() {\r\n        let number = data.consignment.length + 1\r\n        let row = {NR: number}\r\n        data.consignment.push(row);\r\n        updateData(data)\r\n    }\r\n\r\n    function deleteRowConsignment() {\r\n        data.consignment.pop();\r\n        updateData(data)\r\n    }\r\n\r\n    function onGridRowsUpdatedConsignment({fromRow, toRow, updated}) {\r\n\r\n        const consignment = data.consignment.slice();\r\n        for (let i = fromRow; i <= toRow; i++) {\r\n            consignment[i] = {...consignment[i], ...updated};\r\n        }\r\n        data.consignment = consignment;\r\n        updateData(data)\r\n    }\r\n\r\n    return <>\r\n        <Typography variant=\"h3\" component=\"h3\" gutterBottom>\r\n            CMR information\r\n        </Typography>\r\n        <Grid container alignItems=\"flex-start\" style={{marginTop: '10px'}} spacing={2}>\r\n\r\n            <Grid container  style={{}} item xs={6}>\r\n                <Typography variant=\"h5\" component=\"h5\" gutterBottom align=\"center\">\r\n                    Sender details\r\n                </Typography>\r\n\r\n                <Grid container justify={'space-between'}style={{marginTop: '10px'}}>\r\n                    <TextField\r\n                        label=\"ID:\"\r\n                        value={data.sender_id}\r\n                        onChange={(e) => updateData({sender_id: e.target.value})}\r\n                        variant=\"outlined\"\r\n                    />\r\n\r\n                    <FormControl\r\n                        variant=\"outlined\"\r\n                        className={classes.formControlNoMargin}\r\n                    >\r\n                        <InputLabel id=\"departure-arrival-label\">Language</InputLabel>\r\n\r\n                        <Select\r\n                            labelId=\"departure-arrival-label\"\r\n                            value={data.sender_language_code}\r\n                            onChange={(e) => {\r\n                                updateData({sender_language_code: e.target.value})\r\n                            }}\r\n                        >\r\n                            {Object.keys(ListOfLanguages).map((language, index) =>\r\n                                <MenuItem key={index} value={language}>\r\n                                    {`${ListOfLanguages[language].name}-  ${language}`}\r\n                                </MenuItem>\r\n                            )}\r\n                        </Select>\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid container justify={'space-between'}style={{marginTop: '30px'}}>\r\n                    <TextField\r\n                        label=\"Name:\"\r\n                        value={data.sender_name}\r\n                        onChange={(e) => updateData({sender_name: e.target.value})}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n\r\n                <Grid container justify={'space-between'}style={{marginTop: '30px'}}>\r\n                    <TextField\r\n                        label=\"Tax Registration ID:\"\r\n                        value={data.sender_tax_id}\r\n                        onChange={(e) => updateData({sender_tax_id: e.target.value})}\r\n                        variant=\"outlined\"\r\n                    />\r\n\r\n                    <TextField\r\n                        label=\"Registered Tax/TypeCode:\"\r\n                        value={data.sender_tax_type_code}\r\n                        onChange={(e) => updateData({sender_tax_type_code: e.target.value})}\r\n                        variant=\"outlined\"\r\n                    />\r\n\r\n                </Grid>\r\n                <Typography variant=\"h5\" component=\"h5\" gutterBottom style={{marginTop: '30px'}}>\r\n                    Defined contract details\r\n                </Typography>\r\n                <Grid container justify={'space-between'} style={{marginTop: '10px'}}>\r\n\r\n                    <TextField\r\n                        label=\"Name:\"\r\n                        value={data.sender_person_name}\r\n                        onChange={(e) => updateData({sender_person_name: e.target.value})}\r\n                        variant=\"outlined\"\r\n                    />\r\n\r\n                    <TextField\r\n                        label=\"Mobile telefone:\"\r\n                        value={data.sender_complete_number}\r\n                        onChange={(e) => updateData({sender_complete_number: e.target.value})}\r\n                        variant=\"outlined\"\r\n                    />\r\n                </Grid>\r\n\r\n                <Grid container justify={'space-between'} style={{marginTop: '30px'}}>\r\n\r\n                    <TextField\r\n                        label=\"Email:\"\r\n                        value={data.sender_email}\r\n                        onChange={(e) => updateData({sender_email: e.target.value})}\r\n                        variant=\"outlined\"\r\n                    />\r\n\r\n                    <TextField\r\n                        label=\"Postcode:\"\r\n                        value={data.sender_postcode}\r\n                        onChange={(e) => updateData({sender_postcode: e.target.value})}\r\n                        variant=\"outlined\"\r\n                    />\r\n                </Grid>\r\n\r\n                <Grid container justify={'space-between'} style={{marginTop: '30px'}}>\r\n\r\n                    <TextField\r\n                        label=\"Street:\"\r\n                        value={data.sender_street_name}\r\n                        onChange={(e) => updateData({sender_street_name: e.target.value})}\r\n                        variant=\"outlined\"\r\n                    />\r\n\r\n                    <TextField\r\n                        label=\"City:\"\r\n                        value={data.sender_city_name}\r\n                        onChange={(e) => updateData({sender_city_name: e.target.value})}\r\n                        variant=\"outlined\"\r\n                    />\r\n                </Grid>\r\n\r\n                <Grid container justify={'space-between'} style={{marginTop: '30px'}}>\r\n\r\n                    <FormControl\r\n                        variant=\"outlined\"\r\n                        className={classes.formControlNoMargin}\r\n                    >\r\n                        <InputLabel id=\"departure-arrival-label\">Country</InputLabel>\r\n\r\n                        <Select\r\n                            labelId=\"departure-arrival-label\"\r\n                            value={data.sender_country_code}\r\n                            onChange={(e) => {\r\n                                updateData({sender_country_code: e.target.value})\r\n                            }}\r\n                        >\r\n                            {Object.keys(ListOfCountries).map((country, index) =>\r\n                                <MenuItem key={index} value={country}>\r\n                                    {`${country} - ${ListOfCountries[country]}`}\r\n                                </MenuItem>\r\n                            )}\r\n                        </Select>\r\n                    </FormControl>\r\n\r\n                    <TextField\r\n                        label=\"Country subdivision:\"\r\n                        value={data.sender_country_subdivision_name}\r\n                        onChange={(e) => updateData({sender_country_subdivision_name: e.target.value})}\r\n                        variant=\"outlined\"\r\n                    />\r\n                </Grid>\r\n\r\n            </Grid>\r\n            <Grid container  style={{}} item xs={6}>\r\n                <Typography variant=\"h5\" component=\"h5\" gutterBottom>\r\n                    Document details\r\n                </Typography>\r\n\r\n                <Grid container justify={'space-between'}style={{marginTop: '10px'}}>\r\n                    <TextField\r\n                        label=\"Number of document:\"\r\n                        value={data.cmr_id}\r\n                        onChange={(e) => updateData({cmr_id: e.target.value})}\r\n                        variant=\"outlined\"\r\n                    />\r\n\r\n                    <TextField\r\n                        label=\"Date of document\"\r\n                        type=\"date\"\r\n                        contentEditable={false}\r\n                        className={classes.datePicker}\r\n                        variant={'outlined'}\r\n                        value={correctDateTime(data.date_of_document)}\r\n                        onChange={(e) =>\r\n                            updateData({date_of_document: e.target.value})}\r\n                        InputLabelProps={{\r\n                            shrink: true,\r\n                        }}\r\n                    />\r\n                </Grid>\r\n\r\n                <Grid container justify={'space-between'}style={{marginTop: '30px'}}>\r\n                    <TextField\r\n                        label=\"Remarks:\"\r\n                        value={data.remarks}\r\n                        onChange={(e) => updateData({remarks: e.target.value})}\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={2}\r\n                        variant=\"outlined\"\r\n                    />\r\n\r\n                    {emptyDiv}\r\n                </Grid>\r\n\r\n            </Grid>\r\n\r\n            <hr\r\n                className={classes.divisionLine}\r\n            />\r\n            <Grid container alignItems=\"flex-start\" style={{marginTop: '10px'}} spacing={2}>\r\n\r\n                <Grid container  style={{}} item xs={6}>\r\n                    <Typography variant=\"h5\" component=\"h5\" gutterBottom align=\"center\">\r\n                        Consignee details\r\n                    </Typography>\r\n\r\n                    <Grid container justify={'space-between'}style={{marginTop: '10px'}}>\r\n                        <TextField\r\n                            label=\"ID:\"\r\n                            value={data.consignee_id}\r\n                            onChange={(e) => updateData({consignee_id: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n\r\n                        <FormControl\r\n                            variant=\"outlined\"\r\n                            className={classes.formControlNoMargin}\r\n                        >\r\n                            <InputLabel id=\"departure-arrival-label\">Language</InputLabel>\r\n\r\n                            <Select\r\n                                labelId=\"departure-arrival-label\"\r\n                                value={data.consignee_language_code}\r\n                                onChange={(e) => {\r\n                                    updateData({consignee_language_code: e.target.value})\r\n                                }}\r\n                            >\r\n                                {Object.keys(ListOfLanguages).map((language, index) =>\r\n                                    <MenuItem key={index} value={language}>\r\n                                        {`${ListOfLanguages[language].name}-  ${language}`}\r\n                                    </MenuItem>\r\n                                )}\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid container justify={'space-between'}style={{marginTop: '30px'}}>\r\n                        <TextField\r\n                            label=\"Name:\"\r\n                            value={data.consignee_name}\r\n                            onChange={(e) => updateData({consignee_name: e.target.value})}\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid container justify={'space-between'}style={{marginTop: '30px'}}>\r\n                        <TextField\r\n                            label=\"Tax Registration ID:\"\r\n                            value={data.consignee_tax_id}\r\n                            onChange={(e) => updateData({consignee_tax_id: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n\r\n                        <TextField\r\n                            label=\"Registered Tax/TypeCode:\"\r\n                            value={data.consignee_tax_type_code}\r\n                            onChange={(e) => updateData({consignee_tax_type_code: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n\r\n                    </Grid>\r\n                    <Typography variant=\"h5\" component=\"h5\" gutterBottom style={{marginTop: '30px'}}>\r\n                        Defined contract details\r\n                    </Typography>\r\n                    <Grid container justify={'space-between'} style={{marginTop: '10px'}}>\r\n\r\n                        <TextField\r\n                            label=\"Name:\"\r\n                            value={data.consignee_person_name}\r\n                            onChange={(e) => updateData({consignee_person_name: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n\r\n                        <TextField\r\n                            label=\"Mobile telefone:\"\r\n                            value={data.consignee_complete_number}\r\n                            onChange={(e) => updateData({consignee_complete_number: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid container justify={'space-between'} style={{marginTop: '30px'}}>\r\n\r\n                        <TextField\r\n                            label=\"Email:\"\r\n                            value={data.consignee_email}\r\n                            onChange={(e) => updateData({consignee_email: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n\r\n                        <TextField\r\n                            label=\"Postcode:\"\r\n                            value={data.consignee_postcode}\r\n                            onChange={(e) => updateData({consignee_postcode: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid container justify={'space-between'} style={{marginTop: '30px'}}>\r\n\r\n                        <TextField\r\n                            label=\"Street:\"\r\n                            value={data.consignee_street_name}\r\n                            onChange={(e) => updateData({consignee_street_name: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n\r\n                        <TextField\r\n                            label=\"City:\"\r\n                            value={data.consignee_city_name}\r\n                            onChange={(e) => updateData({consignee_city_name: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid container justify={'space-between'} style={{marginTop: '30px'}}>\r\n\r\n                        <FormControl\r\n                            variant=\"outlined\"\r\n                            className={classes.formControlNoMargin}\r\n                        >\r\n                            <InputLabel id=\"departure-arrival-label\">Country</InputLabel>\r\n\r\n                            <Select\r\n                                labelId=\"departure-arrival-label\"\r\n                                value={data.consignee_country_code}\r\n                                onChange={(e) => {\r\n                                    updateData({consignee_country_code: e.target.value})\r\n                                }}\r\n                            >\r\n                                {Object.keys(ListOfCountries).map((country, index) =>\r\n                                    <MenuItem key={index} value={country}>\r\n                                        {`${country} - ${ListOfCountries[country]}`}\r\n                                    </MenuItem>\r\n                                )}\r\n                            </Select>\r\n                        </FormControl>\r\n\r\n                        <TextField\r\n                            label=\"Country subdivision:\"\r\n                            value={data.consignee_country_subdivision_name}\r\n                            onChange={(e) => updateData({consignee_country_subdivision_name: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </Grid>\r\n\r\n                </Grid>\r\n\r\n                <Grid container  style={{}} item xs={6}>\r\n                    <Typography variant=\"h5\" component=\"h5\" gutterBottom align=\"center\">\r\n                        Carrier details\r\n                    </Typography>\r\n\r\n                    <Grid container justify={'space-between'}style={{marginTop: '10px'}}>\r\n                        <TextField\r\n                            label=\"ID:\"\r\n                            value={data.carrier_id}\r\n                            onChange={(e) => updateData({carrier_id: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n\r\n                        <FormControl\r\n                            variant=\"outlined\"\r\n                            className={classes.formControlNoMargin}\r\n                        >\r\n                            <InputLabel id=\"departure-arrival-label\">Language</InputLabel>\r\n\r\n                            <Select\r\n                                labelId=\"departure-arrival-label\"\r\n                                value={data.carrier_language_code}\r\n                                onChange={(e) => {\r\n                                    updateData({carrier_language_code: e.target.value})\r\n                                }}\r\n                            >\r\n                                {Object.keys(ListOfLanguages).map((language, index) =>\r\n                                    <MenuItem key={index} value={language}>\r\n                                        {`${ListOfLanguages[language].name}-  ${language}`}\r\n                                    </MenuItem>\r\n                                )}\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid container justify={'space-between'}style={{marginTop: '30px'}}>\r\n                        <TextField\r\n                            label=\"Name:\"\r\n                            value={data.carrier_name}\r\n                            onChange={(e) => updateData({carrier_name: e.target.value})}\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid container justify={'space-between'}style={{marginTop: '30px'}}>\r\n                        <TextField\r\n                            label=\"Tax Registration ID:\"\r\n                            value={data.carrier_tax_id}\r\n                            onChange={(e) => updateData({carrier_tax_id: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n\r\n                        <TextField\r\n                            label=\"Registered Tax/TypeCode:\"\r\n                            value={data.carrier_tax_type_code}\r\n                            onChange={(e) => updateData({carrier_tax_type_code: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n\r\n                    </Grid>\r\n                    <Typography variant=\"h5\" component=\"h5\" gutterBottom style={{marginTop: '30px'}}>\r\n                        Defined contract details\r\n                    </Typography>\r\n                    <Grid container justify={'space-between'} style={{marginTop: '10px'}}>\r\n\r\n                        <TextField\r\n                            label=\"Name:\"\r\n                            value={data.carrier_person_name}\r\n                            onChange={(e) => updateData({carrier_person_name: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n\r\n                        <TextField\r\n                            label=\"Mobile telefone:\"\r\n                            value={data.carrier_complete_number}\r\n                            onChange={(e) => updateData({carrier_complete_number: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid container justify={'space-between'} style={{marginTop: '30px'}}>\r\n\r\n                        <TextField\r\n                            label=\"Email:\"\r\n                            value={data.carrier_email}\r\n                            onChange={(e) => updateData({carrier_email: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n\r\n                        <TextField\r\n                            label=\"Postcode:\"\r\n                            value={data.carrier_postcode}\r\n                            onChange={(e) => updateData({carrier_postcode: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid container justify={'space-between'} style={{marginTop: '30px'}}>\r\n\r\n                        <TextField\r\n                            label=\"Street:\"\r\n                            value={data.carrier_street_name}\r\n                            onChange={(e) => updateData({carrier_street_name: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n\r\n                        <TextField\r\n                            label=\"City:\"\r\n                            value={data.carrier_city_name}\r\n                            onChange={(e) => updateData({carrier_city_name: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid container justify={'space-between'} style={{marginTop: '30px'}}>\r\n\r\n                        <FormControl\r\n                            variant=\"outlined\"\r\n                            className={classes.formControlNoMargin}\r\n                        >\r\n                            <InputLabel id=\"departure-arrival-label\">Country</InputLabel>\r\n\r\n                            <Select\r\n                                labelId=\"departure-arrival-label\"\r\n                                value={data.carrier_country_code}\r\n                                onChange={(e) => {\r\n                                    updateData({carrier_country_code: e.target.value})\r\n                                }}\r\n                            >\r\n                                {Object.keys(ListOfCountries).map((country, index) =>\r\n                                    <MenuItem key={index} value={country}>\r\n                                        {`${country} - ${ListOfCountries[country]}`}\r\n                                    </MenuItem>\r\n                                )}\r\n                            </Select>\r\n                        </FormControl>\r\n\r\n                        <TextField\r\n                            label=\"Country subdivision:\"\r\n                            value={data.carrier_country_subdivision_name}\r\n                            onChange={(e) => updateData({carrier_country_subdivision_name: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </Grid>\r\n\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <hr\r\n                className={classes.divisionLine}\r\n            />\r\n            <Grid container alignItems=\"flex-start\" style={{marginTop: '10px'}} spacing={2}>\r\n                <Grid container  style={{}} item xs={6}>\r\n                    <Typography variant=\"h5\" component=\"h5\" gutterBottom align=\"center\">\r\n                        Place and date of taking over the goods\r\n                    </Typography>\r\n                    <Grid container justify={'space-between'}style={{marginTop: '10px'}}>\r\n                        <TextField\r\n                            label=\"Date\"\r\n                            type=\"date\"\r\n                            contentEditable={false}\r\n                            className={classes.datePicker}\r\n                            variant={'outlined'}\r\n                            value={correctDateTime(data.date_of_pickup)}\r\n                            onChange={(e) =>\r\n                                updateData({date_of_pickup: e.target.value})}\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                        />\r\n\r\n                        <TextField\r\n                            label=\"Name:\"\r\n                            value={data.pickup_location_name}\r\n                            onChange={(e) => updateData({pickup_location_name: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid container justify={'space-between'}style={{marginTop: '30px'}}>\r\n                        <FormControl\r\n                            variant=\"outlined\"\r\n                            className={classes.formControlNoMargin}\r\n                        >\r\n                            <InputLabel id=\"departure-arrival-label\">Country</InputLabel>\r\n\r\n                            <Select\r\n                                labelId=\"departure-arrival-label\"\r\n                                value={data.pickup_country_code}\r\n                                onChange={(e) => {\r\n                                    updateData({pickup_country_code: e.target.value})\r\n                                }}\r\n                            >\r\n                                {Object.keys(ListOfCountries).map((country, index) =>\r\n                                    <MenuItem key={index} value={country}>\r\n                                        {`${country} - ${ListOfCountries[country]}`}\r\n                                    </MenuItem>\r\n                                )}\r\n                            </Select>\r\n                        </FormControl>\r\n\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container  style={{}} item xs={6}>\r\n                    <Typography variant=\"h5\" component=\"h5\" gutterBottom align=\"center\">\r\n                        Successive Carrier details\r\n                    </Typography>\r\n\r\n                    <Grid container justify={'space-between'}style={{marginTop: '10px'}}>\r\n                        <TextField\r\n                            label=\"ID:\"\r\n                            value={data.sub_carrier_id}\r\n                            onChange={(e) => updateData({sub_carrier_id: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n\r\n                        <FormControl\r\n                            variant=\"outlined\"\r\n                            className={classes.formControlNoMargin}\r\n                        >\r\n                            <InputLabel id=\"departure-arrival-label\">Language</InputLabel>\r\n\r\n                            <Select\r\n                                labelId=\"departure-arrival-label\"\r\n                                value={data.sub_carrier_language_code}\r\n                                onChange={(e) => {\r\n                                    updateData({sub_carrier_language_code: e.target.value})\r\n                                }}\r\n                            >\r\n                                {Object.keys(ListOfLanguages).map((language, index) =>\r\n                                    <MenuItem key={index} value={language}>\r\n                                        {`${ListOfLanguages[language].name}-  ${language}`}\r\n                                    </MenuItem>\r\n                                )}\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid container justify={'space-between'}style={{marginTop: '30px'}}>\r\n                        <TextField\r\n                            label=\"Name:\"\r\n                            value={data.sub_carrier_name}\r\n                            onChange={(e) => updateData({sub_carrier_name: e.target.value})}\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid container justify={'space-between'}style={{marginTop: '30px'}}>\r\n                        <TextField\r\n                            label=\"Tax Registration ID:\"\r\n                            value={data.sub_carrier_tax_id}\r\n                            onChange={(e) => updateData({sub_carrier_tax_id: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n\r\n                        <TextField\r\n                            label=\"Registered Tax/TypeCode:\"\r\n                            value={data.sub_carrier_tax_type_code}\r\n                            onChange={(e) => updateData({sub_carrier_tax_type_code: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n\r\n                    </Grid>\r\n                    <Typography variant=\"h5\" component=\"h5\" gutterBottom style={{marginTop: '30px'}}>\r\n                        Defined contract details\r\n                    </Typography>\r\n                    <Grid container justify={'space-between'} style={{marginTop: '10px'}}>\r\n\r\n                        <TextField\r\n                            label=\"Name:\"\r\n                            value={data.sub_carrier_person_name}\r\n                            onChange={(e) => updateData({sub_carrier_person_name: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n\r\n                        <TextField\r\n                            label=\"Mobile telefone:\"\r\n                            value={data.sub_carrier_complete_number}\r\n                            onChange={(e) => updateData({sub_carrier_complete_number: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid container justify={'space-between'} style={{marginTop: '30px'}}>\r\n\r\n                        <TextField\r\n                            label=\"Email:\"\r\n                            value={data.sub_carrier_email}\r\n                            onChange={(e) => updateData({sub_carrier_email: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n\r\n                        <TextField\r\n                            label=\"Postcode:\"\r\n                            value={data.sub_carrier_postcode}\r\n                            onChange={(e) => updateData({sub_carrier_postcode: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid container justify={'space-between'} style={{marginTop: '30px'}}>\r\n\r\n                        <TextField\r\n                            label=\"Street:\"\r\n                            value={data.sub_carrier_street_name}\r\n                            onChange={(e) => updateData({sub_carrier_street_name: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n\r\n                        <TextField\r\n                            label=\"City:\"\r\n                            value={data.sub_carrier_city_name}\r\n                            onChange={(e) => updateData({sub_carrier_city_name: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid container justify={'space-between'} style={{marginTop: '30px'}}>\r\n\r\n                        <FormControl\r\n                            variant=\"outlined\"\r\n                            className={classes.formControlNoMargin}\r\n                        >\r\n                            <InputLabel id=\"departure-arrival-label\">Country</InputLabel>\r\n\r\n                            <Select\r\n                                labelId=\"departure-arrival-label\"\r\n                                value={data.sub_carrier_country_code}\r\n                                onChange={(e) => {\r\n                                    updateData({sub_carrier_country_code: e.target.value})\r\n                                }}\r\n                            >\r\n                                {Object.keys(ListOfCountries).map((country, index) =>\r\n                                    <MenuItem key={index} value={country}>\r\n                                        {`${country} - ${ListOfCountries[country]}`}\r\n                                    </MenuItem>\r\n                                )}\r\n                            </Select>\r\n                        </FormControl>\r\n\r\n                        <TextField\r\n                            label=\"Country subdivision:\"\r\n                            value={data.sub_carrier_country_subdivision_name}\r\n                            onChange={(e) => updateData({sub_carrier_country_subdivision_name: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </Grid>\r\n\r\n                </Grid>\r\n\r\n            </Grid>\r\n            <hr\r\n                className={classes.divisionLine}\r\n            />\r\n            <Grid container alignItems=\"flex-start\" style={{marginTop: '10px'}} spacing={2}>\r\n                <Grid container  style={{}} item xs={6}>\r\n                    <Typography variant=\"h5\" component=\"h5\" gutterBottom align=\"center\">\r\n                        Place and date of delivery the goods\r\n                    </Typography>\r\n                    <Grid container justify={'space-between'}style={{marginTop: '10px'}}>\r\n                        <TextField\r\n                            label=\"Date\"\r\n                            type=\"date\"\r\n                            contentEditable={false}\r\n                            className={classes.datePicker}\r\n                            variant={'outlined'}\r\n                            value={correctDateTime(data.date_of_delivery)}\r\n                            onChange={(e) =>\r\n                                updateData({date_of_delivery: e.target.value})}\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                        />\r\n\r\n                        <TextField\r\n                            label=\"Name:\"\r\n                            value={data.delivery_place_name}\r\n                            onChange={(e) => updateData({delivery_place_name: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid container justify={'space-between'}style={{marginTop: '30px'}}>\r\n                        <FormControl\r\n                            variant=\"outlined\"\r\n                            className={classes.formControlNoMargin}\r\n                        >\r\n                            <InputLabel id=\"departure-arrival-label\">Country</InputLabel>\r\n\r\n                            <Select\r\n                                labelId=\"departure-arrival-label\"\r\n                                value={data.delivery_country_code}\r\n                                onChange={(e) => {\r\n                                    updateData({delivery_country_code: e.target.value})\r\n                                }}\r\n                            >\r\n                                {Object.keys(ListOfCountries).map((country, index) =>\r\n                                    <MenuItem key={index} value={country}>\r\n                                        {`${country} - ${ListOfCountries[country]}`}\r\n                                    </MenuItem>\r\n                                )}\r\n                            </Select>\r\n                        </FormControl>\r\n\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container  style={{}} item xs={6}>\r\n                    <Typography variant=\"h5\" component=\"h5\" gutterBottom align=\"center\">\r\n                        Carriers reservations and observations:\r\n                    </Typography>\r\n                    <Grid container justify={'space-between'}style={{marginTop: '10px'}}>\r\n\r\n                        <TextField\r\n                            label=\"Reservation/observation:\"\r\n                            value={data.additional_note_1}\r\n                            onChange={(e) => updateData({additional_note_1: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n                        <TextField\r\n                            label=\"Reservation/observation:\"\r\n                            value={data.additional_note_2}\r\n                            onChange={(e) => updateData({additional_note_2: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid container justify={'space-between'}style={{marginTop: '30px'}}>\r\n                        <TextField\r\n                            label=\"Reservation/observation:\"\r\n                            value={data.additional_note_3}\r\n                            onChange={(e) => updateData({additional_note_3: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n            <hr\r\n                className={classes.divisionLine}\r\n            />\r\n            <Grid container alignItems=\"flex-start\" style={{marginTop: '10px'}} spacing={2}>\r\n                <Grid container  style={{}} item xs={6}>\r\n                    <Typography variant=\"h5\" component=\"h5\" gutterBottom align=\"center\">\r\n                        Documents attached\r\n                    </Typography>\r\n                    <ReactDataGrid\r\n                        columns={documentsAttachedRows}\r\n                        rowGetter={i => data.documentsAttached[i]}\r\n                        rowsCount={data.documentsAttached.length}\r\n                        onGridRowsUpdated={onGridRowsUpdatedDocumentsAttached}\r\n                        enableCellSelect={true}\r\n\r\n                    />\r\n                    <Button variant=\"primary\" startIcon={<AddIcon/>} onClick={addRowDocumentsAttached}>Add row</Button>\r\n                    <Button variant=\"primary\" startIcon={<DeleteOutlineIcon/>} onClick={deleteRowDocumentsAttached}>Delete row</Button>\r\n                </Grid>\r\n            </Grid>\r\n            <hr\r\n                className={classes.divisionLine}\r\n            />\r\n            <Grid container alignItems=\"flex-start\" style={{marginTop: '10px'}} spacing={2}>\r\n                <Grid container  style={{}} item xs={6}>\r\n                    <Typography variant=\"h5\" component=\"h5\" gutterBottom align=\"center\">\r\n                        Supply Chain Consignment\r\n                    </Typography>\r\n                    <Grid container justify={'space-between'}style={{marginTop: '10px'}}>\r\n\r\n                        <TextField\r\n                            label=\"Gross weight (total):\"\r\n                            value={data.gross_weight}\r\n                            onChange={(e) => updateData({gross_weight: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n                        <TextField\r\n                            label=\"Volume (total):\"\r\n                            value={data.volume}\r\n                            onChange={(e) => updateData({volume: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid container justify={'space-between'}style={{marginTop: '30px'}}>\r\n                        <TextField\r\n                            label=\"COD amount:\"\r\n                            value={data.cod_amount}\r\n                            onChange={(e) => updateData({cod_amount: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n            <hr\r\n                className={classes.divisionLine}\r\n            />\r\n            <Typography variant=\"h5\" component=\"h5\" gutterBottom style={{marginTop: '30px'}}>\r\n                Consignment\r\n            </Typography>\r\n\r\n            <Grid container justify={'space-between'} style={{marginTop: '30px'}}>\r\n                <ReactDataGrid\r\n                    columns={consignmentRows}\r\n                    rowGetter={i => data.consignment[i]}\r\n                    rowsCount={data.consignment.length}\r\n                    onGridRowsUpdated={onGridRowsUpdatedConsignment}\r\n                    enableCellSelect={true}\r\n\r\n                />\r\n            </Grid>\r\n            <Button variant=\"primary\" startIcon={<AddIcon/>} onClick={addRowConsignment}>Add row</Button>\r\n            <Button variant=\"primary\" startIcon={<DeleteOutlineIcon/>} onClick={deleteRowConsignment}>Delete row</Button>\r\n            <hr\r\n                className={classes.divisionLine}\r\n            />\r\n            <Grid container justify={'space-between'} style={{marginTop: '30px'}}>\r\n\r\n                <FormControl\r\n                    variant=\"outlined\"\r\n                    className={classes.formControlNoMargin}\r\n                >\r\n                    <InputLabel id=\"departure-arrival-label\">Established in</InputLabel>\r\n\r\n                    <Select\r\n                        labelId=\"departure-arrival-label\"\r\n                        value={data.established_country_code}\r\n                        onChange={(e) => {\r\n                            updateData({established_country_code: e.target.value})\r\n                        }}\r\n                    >\r\n                        {Object.keys(ListOfCountries).map((country, index) =>\r\n                            <MenuItem key={index} value={country}>\r\n                                {`${country} - ${ListOfCountries[country]}`}\r\n                            </MenuItem>\r\n                        )}\r\n                    </Select>\r\n                </FormControl>\r\n\r\n                <TextField\r\n                    label=\"Truck:\"\r\n                    value={data.truck}\r\n                    onChange={(e) => updateData({truck: e.target.value})}\r\n                    variant=\"outlined\"\r\n                />\r\n\r\n\r\n                <TextField\r\n                    label=\"Trailer:\"\r\n                    value={data.trailer}\r\n                    onChange={(e) => updateData({trailer: e.target.value})}\r\n                    variant=\"outlined\"\r\n                />\r\n            </Grid>\r\n            <Grid container justify={'space-between'} style={{marginTop: '30px'}}>\r\n\r\n                <TextField\r\n                    label=\"Sender's instruction:\"\r\n                    value={data.instruction}\r\n                    onChange={(e) => updateData({instruction: e.target.value})}\r\n                    variant=\"outlined\"\r\n                    multiline\r\n                    fullWidth\r\n                    rowsMax={4}\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n\r\n\r\n\r\n\r\n    </>\r\n}\r\n\r\nfunction correctDateTime(date) {\r\n    date = \"\" + date;\r\n    return date.substr(0, 16);\r\n}\r\n\r\nexport default PortForm;\r\n","import React from \"react\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select'\r\nimport '@date-io/date-fns';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport ListOfLanguages from '../../data/languages'\r\nimport ListOfCountries from '../../data/countries'\r\nimport ListOfCurrencies from '../../data/currencies'\r\nimport ReactDataGrid from \"react-data-grid\";\r\nimport DeleteOutlineIcon from \"@material-ui/icons/DeleteOutline\";\r\nimport countryCodes from \"../../functions/list_getters/countryCodes\";\r\nimport {Editors} from \"react-data-grid-addons\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 225,\r\n    },\r\n    datePicker: {\r\n        minWidth: 225,\r\n        width: 225\r\n    },\r\n    formControlNoMargin: {\r\n        minWidth: 225,\r\n    },\r\n}));\r\nconst {DropDownEditor} = Editors;\r\nconst countryCodesList = countryCodes.getCountriesWithCodes();\r\ncountryCodesList.unshift(\"(...)\")\r\nconst CountryCodesEditor = <DropDownEditor options={countryCodesList}/>;\r\n\r\nconst tradeLineItemsColumns = [\r\n    {key: \"NR\", name: \"NR\", editable: false, width: 50},\r\n    {key: \"Name\", name: \"Name\", editable: true, width: 150},\r\n    {key: \"Description\", name: \"Description\", editable: true, width: 250},\r\n    {key: \"Net_weight\", name: \"Net weight\", editable: true, width: 150},\r\n    {key: \"Gross_weight\", name: \"Gross weight\", editable: true, width: 150},\r\n    {key: \"Class_code\", name: \"Class Code\", editable: true, width: 150},\r\n    {key: \"Origin_country\", name: \"Origin  Country\", editable: true, editor: CountryCodesEditor, width: 150},\r\n    {key: \"Charge_amount\", name: \"Charge Amount\", editable: true, width: 150},\r\n    {key: \"Basis_quantity\", name: \"Basis Quantity\", editable: true, width: 150},\r\n    {key: \"Billed_quantity\", name: \"Billed Quantity\", editable: true, width: 150},\r\n    {key: \"Total_amount\", name: \"Total Amount\", editable: true, width: 150},\r\n    {key: \"Tax_total_amount\", name: \"Tax Total Amount\", editable: true, width: 150},\r\n    {key: \"Net_total_amount\", name: \"Net Total Amount\", editable: true, width: 150},\r\n];\r\n\r\nfunction PortForm({data, updateData, locationNumber}) {\r\n    const classes = useStyles();\r\n    const emptyDiv = <div className={classes.formControlNoMargin} style={{height: '0px'}}/>\r\n\r\n    function addRow() {\r\n        console.log(\"adding row\");\r\n        let number = data.tradeLineItems.length + 1\r\n        let row = {NR: number}\r\n        data.tradeLineItems.push(row);\r\n        updateData(data)\r\n    }\r\n\r\n    function deleteRow() {\r\n        data.tradeLineItems.pop();\r\n        updateData(data)\r\n    }\r\n\r\n    function onGridRowsUpdated({fromRow, toRow, updated}) {\r\n\r\n        const tradeLineItems = data.tradeLineItems.slice();\r\n        for (let i = fromRow; i <= toRow; i++) {\r\n            tradeLineItems[i] = {...tradeLineItems[i], ...updated};\r\n        }\r\n        data.tradeLineItems = tradeLineItems;\r\n        updateData(data)\r\n    }\r\n\r\n\r\n    return <>\r\n        <Typography variant=\"h3\" component=\"h3\" gutterBottom>\r\n            Invoice information\r\n        </Typography>\r\n\r\n        <Grid container justify={'space-between'} style={{marginTop: '30px'}}>\r\n\r\n            <TextField\r\n                label=\"Number of document:\"\r\n                value={data.invoice_id}\r\n                onChange={(e) => updateData({invoice_id: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Date of document\"\r\n                type=\"date\"\r\n                contentEditable={false}\r\n                className={classes.datePicker}\r\n                variant={'outlined'}\r\n                value={correctDateTime(data.date_of_document)}\r\n                onChange={(e) =>\r\n                    updateData({date_of_document: e.target.value})}\r\n                InputLabelProps={{\r\n                    shrink: true,\r\n                }}\r\n            />\r\n\r\n            {emptyDiv}\r\n        </Grid>\r\n\r\n        <Typography variant=\"h5\" component=\"h5\" gutterBottom style={{marginTop: '30px'}}>\r\n            Sender details\r\n        </Typography>\r\n\r\n        <Grid container justify={'space-between'}>\r\n\r\n            <TextField\r\n                label=\"ID:\"\r\n                value={data.seller_id}\r\n                onChange={(e) => updateData({seller_id: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Name:\"\r\n                value={data.seller_name}\r\n                onChange={(e) => updateData({seller_name: e.target.value})}\r\n                variant=\"outlined\"\r\n                style={{width: '59%'}}\r\n            />\r\n\r\n\r\n        </Grid>\r\n\r\n        <Grid container justify={'space-between'} style={{marginTop: '30px'}}>\r\n\r\n\r\n            <FormControl\r\n                variant=\"outlined\"\r\n                className={classes.formControlNoMargin}\r\n            >\r\n                <InputLabel id=\"departure-arrival-label\">Language</InputLabel>\r\n\r\n                <Select\r\n                    labelId=\"departure-arrival-label\"\r\n                    value={data.seller_language_code}\r\n                    onChange={(e) => {\r\n                        updateData({seller_language_code: e.target.value})\r\n                    }}\r\n                >\r\n                    {Object.keys(ListOfLanguages).map((language, index) =>\r\n                        <MenuItem key={index} value={language}>\r\n                            {`${ListOfLanguages[language].name}-  ${language}`}\r\n                        </MenuItem>\r\n                    )}\r\n                </Select>\r\n            </FormControl>\r\n\r\n            <TextField\r\n                label=\"Tax Registration ID:\"\r\n                value={data.seller_tax_id}\r\n                onChange={(e) => updateData({seller_tax_id: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Registered Tax/TypeCode:\"\r\n                value={data.seller_tax_type_code}\r\n                onChange={(e) => updateData({seller_tax_type_code: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n\r\n        </Grid>\r\n\r\n        <Typography variant=\"h5\" component=\"h5\" gutterBottom style={{marginTop: '30px'}}>\r\n            Defined contract details\r\n        </Typography>\r\n\r\n        <Grid container justify={'space-between'} style={{marginTop: '30px'}}>\r\n\r\n            <TextField\r\n                label=\"Name:\"\r\n                value={data.seller_person_name}\r\n                onChange={(e) => updateData({seller_person_name: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Mobile telefone:\"\r\n                value={data.seller_complete_number}\r\n                onChange={(e) => updateData({seller_complete_number: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Email:\"\r\n                value={data.seller_email}\r\n                onChange={(e) => updateData({seller_email: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n        </Grid>\r\n\r\n        <Grid container justify={'space-between'} style={{marginTop: '30px'}}>\r\n\r\n            <TextField\r\n                label=\"Postcode:\"\r\n                value={data.seller_postcode}\r\n                onChange={(e) => updateData({seller_postcode: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Street:\"\r\n                value={data.seller_street_name}\r\n                onChange={(e) => updateData({seller_street_name: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"City:\"\r\n                value={data.seller_city_name}\r\n                onChange={(e) => updateData({seller_city_name: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n        </Grid>\r\n\r\n        <Grid container justify={'space-between'} style={{marginTop: '30px'}}>\r\n\r\n            <FormControl\r\n                variant=\"outlined\"\r\n                className={classes.formControlNoMargin}\r\n            >\r\n                <InputLabel id=\"departure-arrival-label\">Country</InputLabel>\r\n\r\n                <Select\r\n                    labelId=\"departure-arrival-label\"\r\n                    value={data.seller_country_code}\r\n                    onChange={(e) => {\r\n                        updateData({seller_country_code: e.target.value})\r\n                    }}\r\n                >\r\n                    {Object.keys(ListOfCountries).map((country, index) =>\r\n                        <MenuItem key={index} value={country}>\r\n                            {`${country} - ${ListOfCountries[country]}`}\r\n                        </MenuItem>\r\n                    )}\r\n                </Select>\r\n            </FormControl>\r\n\r\n            <TextField\r\n                label=\"Country subdivision:\"\r\n                value={data.seller_country_subdivision_name}\r\n                onChange={(e) => updateData({seller_country_subdivision_name: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            {emptyDiv}\r\n        </Grid>\r\n\r\n        <Typography variant=\"h5\" component=\"h5\" gutterBottom style={{marginTop: '30px'}}>\r\n            Buyer details\r\n        </Typography>\r\n\r\n        <Grid container justify={'space-between'}>\r\n\r\n            <TextField\r\n                label=\"ID:\"\r\n                value={data.buyer_id}\r\n                onChange={(e) => updateData({buyer_id: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Name:\"\r\n                value={data.buyer_name}\r\n                onChange={(e) => updateData({buyer_name: e.target.value})}\r\n                variant=\"outlined\"\r\n                style={{width: '59%'}}\r\n            />\r\n\r\n\r\n\r\n        </Grid>\r\n\r\n        <Grid container justify={'space-between'} style={{marginTop: '30px'}}>\r\n\r\n            <FormControl\r\n                variant=\"outlined\"\r\n                className={classes.formControlNoMargin}\r\n            >\r\n                <InputLabel id=\"departure-arrival-label\">Language</InputLabel>\r\n\r\n                <Select\r\n                    labelId=\"departure-arrival-label\"\r\n                    value={data.buyer_language_code}\r\n                    onChange={(e) => {\r\n                        updateData({buyer_language_code: e.target.value})\r\n                    }}\r\n                >\r\n                    {Object.keys(ListOfLanguages).map((language, index) =>\r\n                        <MenuItem key={index} value={language}>\r\n                            {`${ListOfLanguages[language].name}-  ${language}`}\r\n                        </MenuItem>\r\n                    )}\r\n                </Select>\r\n            </FormControl>\r\n\r\n            <TextField\r\n                label=\"Tax Registration ID:\"\r\n                value={data.buyer_tax_id}\r\n                onChange={(e) => updateData({buyer_tax_id: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Registered Tax/TypeCode:\"\r\n                value={data.buyer_tax_type_code}\r\n                onChange={(e) => updateData({buyer_tax_type_code: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n\r\n        </Grid>\r\n\r\n        <Typography variant=\"h5\" component=\"h5\" gutterBottom style={{marginTop: '30px'}}>\r\n            Defined contract details\r\n        </Typography>\r\n\r\n        <Grid container justify={'space-between'} style={{marginTop: '30px'}}>\r\n\r\n            <TextField\r\n                label=\"Name:\"\r\n                value={data.buyer_person_name}\r\n                onChange={(e) => updateData({buyer_person_name: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Mobile telefone:\"\r\n                value={data.buyer_complete_number}\r\n                onChange={(e) => updateData({buyer_complete_number: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Email:\"\r\n                value={data.buyer_email}\r\n                onChange={(e) => updateData({buyer_email: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n        </Grid>\r\n\r\n        <Grid container justify={'space-between'} style={{marginTop: '30px'}}>\r\n\r\n            <TextField\r\n                label=\"Postcode:\"\r\n                value={data.buyer_postcode}\r\n                onChange={(e) => updateData({buyer_postcode: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Street:\"\r\n                value={data.buyer_street_name}\r\n                onChange={(e) => updateData({buyer_street_name: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"City:\"\r\n                value={data.buyer_city_name}\r\n                onChange={(e) => updateData({buyer_city_name: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n        </Grid>\r\n\r\n        <Grid container justify={'space-between'} style={{marginTop: '30px'}}>\r\n\r\n            <FormControl\r\n                variant=\"outlined\"\r\n                className={classes.formControlNoMargin}\r\n            >\r\n                <InputLabel id=\"departure-arrival-label\">Country</InputLabel>\r\n\r\n                <Select\r\n                    labelId=\"departure-arrival-label\"\r\n                    value={data.buyer_country_code}\r\n                    onChange={(e) => {\r\n                        updateData({buyer_country_code: e.target.value})\r\n                    }}\r\n                >\r\n                    {Object.keys(ListOfCountries).map((country, index) =>\r\n                        <MenuItem key={index} value={country}>\r\n                            {`${country} - ${ListOfCountries[country]}`}\r\n                        </MenuItem>\r\n                    )}\r\n                </Select>\r\n            </FormControl>\r\n\r\n            <TextField\r\n                label=\"Country subdivision:\"\r\n                value={data.buyer_country_subdivision_name}\r\n                onChange={(e) => updateData({buyer_country_subdivision_name: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            {emptyDiv}\r\n        </Grid>\r\n\r\n        <Typography variant=\"h5\" component=\"h5\" gutterBottom style={{marginTop: '30px'}}>\r\n            Trade line items\r\n        </Typography>\r\n\r\n        <Grid container justify={'space-between'} style={{marginTop: '30px'}}>\r\n        <ReactDataGrid\r\n            columns={tradeLineItemsColumns}\r\n            rowGetter={i => data.tradeLineItems[i]}\r\n            rowsCount={data.tradeLineItems.length}\r\n            onGridRowsUpdated={onGridRowsUpdated}\r\n            enableCellSelect={true}\r\n\r\n        />\r\n        </Grid>\r\n\r\n        <Button variant=\"primary\" startIcon={<AddIcon/>} onClick={addRow}>Add row</Button>\r\n        <Button variant=\"primary\" startIcon={<DeleteOutlineIcon/>} onClick={deleteRow}>Delete row</Button>\r\n\r\n        <Typography variant=\"h5\" component=\"h5\" gutterBottom style={{marginTop: '30px'}}>\r\n            Related Consignment\r\n        </Typography>\r\n\r\n        <Grid container justify={'space-between'} style={{marginTop: '30px'}}>\r\n\r\n            <TextField\r\n                label=\"Gross Weight:\"\r\n                value={data.gross_weight}\r\n                onChange={(e) => updateData({gross_weight: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Net Weight:\"\r\n                value={data.net_weight}\r\n                onChange={(e) => updateData({net_weight: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Package Quantity:\"\r\n                value={data.package_quantity}\r\n                onChange={(e) => updateData({package_quantity: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n        </Grid>\r\n\r\n\r\n        <Grid container justify={'space-between'} style={{marginTop: '30px'}}>\r\n\r\n            <TextField\r\n                label=\"Used  Logistics  Transport Means:\"\r\n                value={data.transport_means_id}\r\n                onChange={(e) => updateData({transport_means_id: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Occurrence\"\r\n                type=\"datetime-local\"\r\n                contentEditable={false}\r\n                className={classes.datePicker}\r\n                variant={'outlined'}\r\n                value={correctDateTime(data.occurrence_date_time)}\r\n                onChange={(e) =>\r\n                    updateData({occurrence_date_time: e.target.value})}\r\n                InputLabelProps={{\r\n                    shrink: true,\r\n                }}\r\n            />\r\n\r\n            {emptyDiv}\r\n        </Grid>\r\n\r\n        <Grid container justify={'space-between'} style={{marginTop: '30px'}}>\r\n\r\n            <TextField\r\n                label=\"Due Payable  Amount:\"\r\n                value={data.due_payable_amount}\r\n                onChange={(e) => updateData({due_payable_amount: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <FormControl\r\n                variant=\"outlined\"\r\n                className={classes.formControlNoMargin}\r\n            >\r\n                <InputLabel id=\"departure-arrival-label\">Currency</InputLabel>\r\n\r\n                <Select\r\n                    labelId=\"departure-arrival-label\"\r\n                    value={data.invoice_currency_code}\r\n                    onChange={(e) => {\r\n                        updateData({invoice_currency_code: e.target.value})\r\n                    }}\r\n                >\r\n                    {ListOfCurrencies.map((currency, index) =>\r\n                        <MenuItem key={index} value={currency.cc}>\r\n                            {`${currency.cc} - ${currency.name}`}\r\n                        </MenuItem>\r\n                    )}\r\n                </Select>\r\n            </FormControl>\r\n\r\n            {emptyDiv}\r\n        </Grid>\r\n\r\n        <Typography variant=\"h5\" component=\"h5\" gutterBottom style={{marginTop: '30px'}}>\r\n            Payee Party. Creditor Financial Account\r\n        </Typography>\r\n\r\n        <Grid container justify={'space-between'} style={{marginTop: '30px'}}>\r\n\r\n            <TextField\r\n                label=\"IBAN:\"\r\n                value={data.ibanID}\r\n                onChange={(e) => updateData({ibanID: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Account:\"\r\n                value={data.account_name}\r\n                onChange={(e) => updateData({account_name: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n            {emptyDiv}\r\n        </Grid>\r\n\r\n        <Typography variant=\"h5\" component=\"h5\" gutterBottom style={{marginTop: '30px'}}>\r\n            Trade Tax\r\n        </Typography>\r\n\r\n        <Grid container justify={'space-between'} style={{marginTop: '30px'}}>\r\n\r\n            <TextField\r\n                label=\"Exemption Reason Code:\"\r\n                value={data.exemption_reason_code}\r\n                onChange={(e) => updateData({exemption_reason_code: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Trade Payment Terms:\"\r\n                value={data.payment_term_description}\r\n                onChange={(e) => updateData({payment_term_description: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n            {emptyDiv}\r\n        </Grid>\r\n    </>\r\n}\r\n\r\nfunction correctDateTime(date) {\r\n    date = \"\" + date;\r\n    return date.substr(0, 16);\r\n}\r\n\r\n\r\n\r\nexport default PortForm;\r\n","import React, {useState} from \"react\";\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport ShipFormComponent from \"../components/blocks/shipFormComponent\";\r\nimport PortForm from \"../components/blocks/portFormComponent\";\r\nimport VoyageForm from \"../components/blocks/voyageFormComponent\";\r\nimport CrewForm from \"../components/blocks/crewFormComponent\";\r\nimport Button from '@material-ui/core/Button';\r\nimport {config} from \"../config/shipDetailsConfig\";\r\nimport defaultDataConst from \"../config/consts/defaultDataConst\";\r\nimport listOfOptionsConst from \"../config/consts/listOfOptionsConst\";\r\nimport readXML from \"../functions/readXML/readXML\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport readXLS from \"../functions/readExcel/readXLSParent\";\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\r\nimport GetAppIcon from '@material-ui/icons/GetApp';\r\nimport PassengersForm from \"../components/blocks/passengersFormComponent\";\r\nimport createXML from \"../functions/generateXML/generateXML\";\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport HealthFormComponent from \"../components/blocks/healthFormComponent\";\r\nimport ShipStoresForm from \"../components/blocks/shipStoresFormComponent\";\r\nimport CrewEffectsForm from \"../components/blocks/crewEffectsFormComponent\";\r\nimport CargoForm from \"../components/blocks/cargoFormComponent\";\r\nimport SecurityFormComponent from \"../components/blocks/securityFormComponent\";\r\nimport DPGForm from \"../components/blocks/dpgFormComponent\";\r\nimport WasteFormComponent from \"../components/blocks/WasteFormComponent\";\r\nimport _ from 'underscore'\r\nimport MainPageInfo from './../config/JSON/shipCallsData.json'\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport CMRFormComponent from \"../components/blocks/cmrFormComponent\";\r\nimport InvoiceFormComponent from \"../components/blocks/invoiceFormComponent\";\r\nconst listOfOptions = listOfOptionsConst;\r\n\r\n\r\nconst defaultOption = 'CMR';\r\n\r\nconst drawerWidth = config.showDrawerIcons ? 200 : 180;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        // height: 70\r\n    },\r\n    drawer: {\r\n        width: drawerWidth,\r\n        flexShrink: 0,\r\n    },\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n    },\r\n    drawerContainer: {\r\n        overflow: 'auto',\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        padding: theme.spacing(3),\r\n    },\r\n    uploadFile: {\r\n        display: 'none'\r\n    }\r\n}));\r\n\r\nfunction CarDetails({history}) {\r\n    const location = history.location.pathname;\r\n    let locationNumber = parseInt(location.split('/')[2]);\r\n    locationNumber--;\r\n    const classes = useStyles();\r\n    const [activeItem, setActiveItem] = useState(listOfOptions.indexOf(listOfOptions.find(el => el.label === defaultOption)));\r\n\r\n    const [data, setData] = useState(() => {\r\n    //     let portOfCall = MainPageInfo[locationNumber].portCall;\r\n    //     let eta = MainPageInfo[locationNumber].ETA;\r\n    //     if (eta.split('.').length !== 0) {\r\n    //         let dates = eta.split('.');\r\n    //         if (dates[0].length !== 2) {\r\n    //             eta = `${dates[0]}-${dates[1]}-${dates[2]}T00:00`;\r\n    //         } else {\r\n    //             eta = `${dates[2]}-${dates[1]}-${dates[0]}T00:00`;\r\n    //         }\r\n    //     }\r\n    //     let companyName = MainPageInfo[locationNumber].agent;\r\n    //     let imo = MainPageInfo[locationNumber].imo;\r\n    //     let ship = MainPageInfo[locationNumber].ship;\r\n    //\r\n        const def = defaultDataConst;\r\n    //     def.port.portOfCall = portOfCall;\r\n    //     def.port.ETAPortOfCall = eta;\r\n    //     def.port.agent.company = companyName;\r\n    //     def.ship.name = ship;\r\n    //     def.ship.IMOnumber = imo;\r\n        return def\r\n    });\r\n    const [openErrorDialog, setOpenErrorDialog] = useState({open: false, error: {}});\r\n    const [uploadAnchorEl, setUploadAnchorEl] = React.useState(null);\r\n    const [downloadAnchorEl, setDownloadAnchorEl] = React.useState(null);\r\n    const handleUploadClick = (event) => {\r\n        setUploadAnchorEl(event.currentTarget);\r\n    };\r\n    const handleDownloadClick = (event) => {\r\n        setDownloadAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setUploadAnchorEl(null);\r\n        setDownloadAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <CssBaseline/>\r\n            <AppBar position=\"fixed\" className={classes.appBar}>\r\n                <Toolbar>\r\n                    <Grid container justify={'space-between'}>\r\n                        <Typography variant=\"h6\">\r\n                            –ü—Ä–æ—Ç–æ—Ç–∏–ø –£–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ –ú–æ—Ä—Å—å–∫–æ–≥–æ –Ñ–¥–∏–Ω–æ–≥–æ –í—ñ–∫–Ω–∞<br/>Ukrainian Maritime Single Window Prototype\r\n                        </Typography>\r\n                        <div>\r\n                            <Grid container justify={'flex-end'} style={{marginTop: '12px'}}>\r\n                                <Button\r\n                                    aria-controls=\"upload-menu\"\r\n                                    style={{marginRight: '30px'}}\r\n                                    variant=\"contained\"\r\n                                    startIcon={<CloudUploadIcon/>}\r\n                                    aria-haspopup=\"true\"\r\n                                    onClick={handleUploadClick}\r\n                                >\r\n                                    Upload\r\n                                </Button>\r\n                                <Menu\r\n                                    id=\"upload-menu\"\r\n                                    anchorEl={uploadAnchorEl}\r\n                                    keepMounted\r\n                                    open={Boolean(uploadAnchorEl)}\r\n                                    onClose={handleClose}\r\n                                >\r\n                                    <MenuItem onClick={handleClose}>\r\n                                        <label htmlFor=\"read-invoice-xml-file\">Upload Invoice XML document</label>\r\n                                    </MenuItem>\r\n                                    <MenuItem onClick={handleClose}>\r\n                                        <label htmlFor=\"read-cmr-xml-file\">Upload CMR XML document</label>\r\n                                    </MenuItem>\r\n                                </Menu>\r\n                                <Button\r\n                                    aria-controls=\"download-menu\"\r\n                                    startIcon={<GetAppIcon/>}\r\n                                    aria-haspopup=\"true\"\r\n                                    onClick={handleDownloadClick}\r\n                                    variant=\"contained\"\r\n                                >\r\n                                    Download\r\n                                </Button>\r\n                                <Menu\r\n                                    id=\"download-menu\"\r\n                                    anchorEl={downloadAnchorEl}\r\n                                    keepMounted\r\n                                    open={Boolean(downloadAnchorEl)}\r\n                                    onClose={handleClose}\r\n                                >\r\n                                    <MenuItem onClick={() => {\r\n                                        createXML(data, () => {}, false,\"invoice\")\r\n                                        handleClose();\r\n                                    }}>Save Invoice to XML (as draft)</MenuItem>\r\n                                    <MenuItem onClick={() => {\r\n                                        const onError = (errors) => {\r\n                                            let missingFields = [];\r\n                                            for (let block in errors) {\r\n                                                if (!errors.hasOwnProperty(block) || _.isEmpty(errors['' + block])) continue;\r\n                                                missingFields.push(`Block ${block}:`);\r\n                                                for (let field in errors['' + block]) {\r\n                                                    if (!errors['' + block].hasOwnProperty(field)) continue;\r\n                                                    if (typeof errors[block][field] === typeof true) {\r\n                                                        missingFields.push(`‚Üí  ${field} is empty`);\r\n                                                    } else {\r\n                                                        missingFields.push(`‚Üí  ${field} columns are empty`);\r\n                                                    }\r\n                                                }\r\n                                                missingFields.push(\"\");\r\n                                            }\r\n                                            setOpenErrorDialog({\r\n                                                open: true,\r\n                                                error: {\r\n                                                    title: \"Please fill in required fields first: \",\r\n                                                    text: missingFields\r\n                                                }\r\n                                            })\r\n                                        }\r\n                                   createXML(data, onError, true,\"invoice\");\r\n                                      handleClose();\r\n                                    }}>Generate full invoice XML file</MenuItem>\r\n                                    <MenuItem onClick={() => {\r\n                                        createXML(data, () => {}, false,\"cmr\")\r\n                                        handleClose();\r\n                                    }}>Save CMR to XML (as draft)</MenuItem>\r\n                                </Menu>\r\n                            </Grid>\r\n                            <input\r\n                                className={classes.uploadFile}\r\n                                onChange={() => {\r\n                                    const file = document.getElementById(\"read-invoice-xml-file\").files[0];\r\n                                    const reader = new FileReader();\r\n\r\n                                    reader.onload = (() => {\r\n                                        try {\r\n                                            let invoice = readXML(reader.result,'invoice');\r\n\r\n                                            let dataCopy = JSON.parse(JSON.stringify(data));\r\n                                            console.log(\"invoice in main \", invoice);\r\n                                            setData({\r\n                                                ...dataCopy, ...{\r\n                                                    invoice\r\n                                                }\r\n                                            });\r\n                                        } catch (e) {\r\n                                            setOpenErrorDialog({\r\n                                                open: true, error: {\r\n                                                    title: 'Error while reading XML',\r\n                                                    text: [e]\r\n                                                }\r\n                                            })\r\n                                            console.error(e);\r\n                                        }\r\n                                    })\r\n                                    reader.readAsText(file);\r\n                                }}\r\n                                id=\"read-invoice-xml-file\"\r\n                                type=\"file\"\r\n                            />\r\n                            <input\r\n                                className={classes.uploadFile}\r\n                                onChange={() => {\r\n                                    console.log('Change!!!')\r\n                                    const file = document.getElementById(\"read-cmr-xml-file\").files[0];\r\n                                    const reader = new FileReader();\r\n\r\n                                    reader.onload = (() => {\r\n                                        try {\r\n                                            let cmr = readXML(reader.result,'cmr');\r\n\r\n                                            let dataCopy = JSON.parse(JSON.stringify(data));\r\n                                            setData({\r\n                                                ...dataCopy, ...{\r\n                                                    cmr\r\n                                                }\r\n                                            });\r\n                                        } catch (e) {\r\n                                            setOpenErrorDialog({\r\n                                                open: true, error: {\r\n                                                    title: 'Error while reading XML',\r\n                                                    text: [e]\r\n                                                }\r\n                                            })\r\n                                            console.error(e);\r\n                                        }\r\n                                    })\r\n                                    reader.readAsText(file);\r\n                                }}\r\n                                id=\"read-cmr-xml-file\"\r\n                                type=\"file\"\r\n                            />\r\n                        </div>\r\n                    </Grid>\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            <Drawer\r\n                className={classes.drawer}\r\n                variant=\"permanent\"\r\n                classes={{\r\n                    paper: classes.drawerPaper,\r\n                }}\r\n            >\r\n                <Toolbar/>\r\n                <div className={classes.drawerContainer}>\r\n                    <List>\r\n                        {listOfOptions.map((item, index) => (\r\n                            <ListItem\r\n                                key={index}\r\n                                button\r\n                                color={'success'}\r\n                                selected={activeItem === index}\r\n                                onClick={() => {\r\n                                    setActiveItem(index)\r\n                                }}>\r\n\r\n                                {(config.showDrawerIcons && item.icon) && <ListItemIcon>{item.icon}</ListItemIcon>}\r\n                                <ListItemText primary={item.label}/>\r\n\r\n                            </ListItem>\r\n                        ))}\r\n                    </List>\r\n                </div>\r\n            </Drawer>\r\n            <main className={classes.content}>\r\n                <Toolbar/>\r\n                {getChildComponent(activeItem, [data, setData])}\r\n            </main>\r\n\r\n            <Dialog\r\n                open={openErrorDialog.open}\r\n                onClose={() => setOpenErrorDialog({\r\n                    open: false,\r\n                    error: {text: []}\r\n                })}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-title\">{openErrorDialog.error.title}</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-description\">\r\n                        {\r\n                            (Array.isArray(openErrorDialog.error.text))\r\n                                ?\r\n                                openErrorDialog.error.text.map((el) => <>{el}<br/></>)\r\n                                : openErrorDialog.error.text\r\n                        }\r\n\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        onClick={() => setOpenErrorDialog({\r\n                            open: false,\r\n                            error: {}\r\n                        })}\r\n                        color=\"primary\" autoFocus>\r\n                        Understood\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction getChildComponent(activeItem, [data, setData]) {\r\n    let selectedItem = listOfOptions[activeItem].value;\r\n\r\n    switch (selectedItem) {\r\n        case 'cmr':\r\n            return <CMRFormComponent data={data.cmr} updateData={(dataItem) => {\r\n                setData({...data, cmr: {...data.cmr, ...dataItem}})\r\n            }}/>\r\n        case 'invoice':\r\n            return <InvoiceFormComponent data={data.invoice} updateData={(dataItem) => {\r\n                setData({...data, invoice: {...data.invoice, ...dataItem}})\r\n            }}/>\r\n        default:\r\n            return <h1>Not supported yet</h1>\r\n    }\r\n}\r\n\r\nif (config.addOnCloseEvent) {\r\n    window.onload = function () {\r\n        window.addEventListener(\"beforeunload\", function (e) {\r\n            const confirmationMessage = 'It looks like you have been editing something. '\r\n                + 'If you leave before saving, your changes will be lost.';\r\n\r\n            (e || window.event).returnValue = confirmationMessage; //Gecko + IE\r\n            return confirmationMessage; //Gecko + Webkit, Safari, Chrome etc.\r\n        });\r\n    };\r\n}\r\nexport default CarDetails;","import React from \"react\";\r\nimport {\r\n    HashRouter as Router,\r\n    Switch,\r\n    Route,\r\n} from \"react-router-dom\";\r\nimport {createBrowserHistory} from 'history';\r\n\r\nimport HomePage from \"./pages/homePage\";\r\nimport NotFound from \"./pages/404NotFound\";\r\nimport CarDetails from \"./pages/carDetails\";\r\n\r\nconst history = createBrowserHistory();\r\n\r\nexport default class AppRouter extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <Router history={history}>\r\n                <Switch>\r\n                    <Route path={'/'} exact component={HomePage}/>\r\n                    <Route path={'/details/:id'} component={CarDetails}/>\r\n                    <Route path={'/fal-ukraine/'} exact component={HomePage}/>\r\n                    <Route path={'/fal-ukraine/details/:id'} exact component={HomePage}/>\r\n                    <Route component={NotFound}/>\r\n                </Switch>\r\n            </Router>\r\n        )\r\n\r\n    }\r\n\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport AppRouter from \"./router\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <AppRouter/>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}