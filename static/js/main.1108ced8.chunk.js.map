{"version":3,"sources":["pages/homePage.js","pages/404NotFound.js","components/blocks/shipFormComponent.js","components/blocks/portFormComponent.js","components/pickers/datePicker.js","components/blocks/voyageFormComponent.js","functions/list_getters/countryCodes.js","components/blocks/crewFormComponent.js","config/shipDetailsConfig.js","config/consts/defaultDataConst.js","config/consts/listOfOptionsConst.js","functions/readXML/readInvoiceXML.js","functions/readXML/readXML.js","functions/readExcel/readXLSParent.js","components/blocks/passengersFormComponent.js","functions/generateXML/generateInvoice.js","functions/generateXML/generateCMR.js","functions/generateXML/generateXML.js","config/consts/unitList.js","components/blocks/healthFormComponent.js","components/blocks/shipStoresFormComponent.js","components/blocks/crewEffectsFormComponent.js","config/consts/kindOfPackagesList.js","components/blocks/cargoFormComponent.js","components/blocks/securityFormComponent.js","components/blocks/WasteFormComponent.js","config/consts/dgClassifications.js","config/consts/IMOHazardClasses.js","config/consts/packingGroups.js","config/consts/pollutionCodes.js","components/blocks/dpgFormComponent.js","functions/list_getters/documentTypesGetter.js","components/blocks/cmrFormComponent.js","components/blocks/invoiceFormComponent.js","pages/carDetails.js","router.js","index.js"],"names":["console","log","shipCallsData","columns","field","headerName","width","useStyles","makeStyles","theme","root","display","appBar","zIndex","drawer","drawerContainer","overflow","content","flexGrow","padding","spacing","uploadFile","HomePage","history","classes","className","CssBaseline","AppBar","position","Toolbar","Grid","container","justify","Typography","variant","style","marginTop","height","align","rows","pageSize","onRowClick","e","push","id","disableSelectionOnClick","NotFound","React","Component","formControl","margin","minWidth","formControlNoMargin","button","topMargin","ShipFormComponent","datePicker","formControlNoMargin2","selectEmpty","PortForm","startDate","Date","props","onSelect","date","setState","color","onCommit","onChange","forceUpdate","state","this","column","key","moment","format","ReactDOM","findDOMNode","getElementsByTagName","selected","dateFormat","DropDownEditor","Editors","ports","ListOfPorts","map","port","code","countryCode","name","editable","editor","options","withStyles","data","updateData","component","gutterBottom","rowGetter","i","rowsCount","length","onGridRowsUpdated","fromRow","toRow","updated","slice","enableCellSelect","columnAutoWidth","Button","startIcon","onClick","row","NR","pop","countryCodes","require","getCountryCodes","Object","keys","getCountriesWithCodes","countriesWithCodes","countryWithCode","values","getCountryWithCodeByCode","GendersEditor","IDTypesEditor","RanksOfRatingEditor","countryCodesList","unshift","CountryCodesEditor","config","cmr","cmr_id","remarks","date_of_document","documentsAttached","consignment","invoice","tradeLineItems","invoice_id","seller_id","seller_name","seller_language_code","seller_tax_id","seller_tax_type_code","seller_person_name","seller_complete_number","seller_email","seller_postcode","seller_street_name","seller_city_name","seller_country_code","seller_country_subdivision_name","buyer_id","buyer_name","buyer_language_code","buyer_tax_id","buyer_tax_type_code","buyer_person_name","buyer_complete_number","buyer_email","buyer_postcode","buyer_street_name","buyer_city_name","buyer_country_code","buyer_country_subdivision_name","gross_weight","net_weight","package_quantity","transport_means_id","occurrence_date_time","due_payable_amount","invoice_currency_code","ibanID","account_name","exemption_reason_code","payment_term_description","label","value","icon","readInvoiceXML","xml","children","tradeLineItem","tradeLineItemToSave","Name","Description","Net_weight","Gross_weight","Class_code","Origin_country","Charge_amount","Basis_quantity","Billed_quantity","Total_amount","Tax_total_amount","Net_total_amount","seller","buyer","relatedConsignment","readXML","fileContent","xmlType","XMLParser","parseFromString","defaultData","readXLS","TransitEditor","PortEditor","generateInvoice","SupplyChainTradeTransaction","IncludedTradeLineItem","TradeProduct","NetWeight","GrossWeight","Classification","ClassCode","originCountryCode","split","OriginCountry","Code","LineTradeAgreement","ProductGrossPrice","ChargeAmount","BasisQuantity","LineTradeDelivery","BilledQuantity","LineTradeSettlement","MonetarySummation","LineTotalAmount","TaxTotalAmount","NetLineTotalAmount","HeaderTradeAgreement","Seller","ID","LanguageCode","DefinedContractDetails","PersonName","MobileTelephone","CompleteNumber","EmailAddress","URI","PostalAddress","Postcode","StreetName","CityName","CountryCode","ContryName","listOfCountries","CountrySubDivisionName","TaxRegistration","RegisteredTax","TypeCode","Buyer","HeaderTradeDelivery","RelatedConsignment","PackageQuantity","SpecifiedTransportMovement","UsedTransportMeans","ActualDespatchEvent","OccurenceDateTime","HeaderTradeSettlement","DuePayableAmount","InvoiceCurrencyCode","PaymentMeans","PayeeCreditorFinancialAccount","IBANID","TradeTax","ExemptionReasonCode","PaymentTerms","CIIMessage","ExchangedDocument","IssueDateTime","generateCMR","eCMRHeaderDetails","eCMRID","eCMRIssueDate","ContractualRemarks","AdditionalParticularNote","ContentText","additional_note_1","additional_note_2","additional_note_3","IssueLocation","established_country_code","RoadConsignment","GrossVolume","volume","CODAmount","cod_amount","Sender","sender_id","sender_name","sender_language_code","sender_person_name","sender_complete_number","sender_email","sender_postcode","sender_street_name","sender_city_name","sender_country_code","sender_country_subdivision_name","sender_tax_id","sender_tax_type_code","Consignee","consignee_id","consignee_name","consignee_language_code","consignee_person_name","consignee_complete_number","consignee_email","consignee_postcode","consignee_street_name","consignee_city_name","consignee_country_code","consignee_country_subdivision_name","consignee_tax_id","consignee_tax_type_code","Carrier","carrier_id","carrier_name","carrier_language_code","carrier_person_name","carrier_complete_number","carrier_email","carrier_postcode","carrier_street_name","carrier_city_name","carrier_country_code","carrier_country_subdivision_name","carrier_tax_id","carrier_tax_type_code","SubsequentCarrier","sub_carrier_id","sub_carrier_name","sub_carrier_language_code","sub_carrier_person_name","sub_carrier_complete_number","sub_carrier_email","sub_carrier_postcode","sub_carrier_street_name","sub_carrier_city_name","sub_carrier_country_code","sub_carrier_country_subdivision_name","sub_carrier_tax_id","sub_carrier_tax_type_code","document","documentTypeCode","AssociatedDocument","Remarks","FormattedIssueDateTime","ConsigneeDeliveryEvent","ActualOccurrenceDateTime","date_of_delivery","ActualOccurrenceLocation","delivery_place_name","delivery_country_code","CountryName","CarrierPickUpEvent","date_of_pickup","pickup_location_name","pickup_country_code","consignment_item","IncludedConsignmentItem","SequenceNumber","Volume","GoodsDescription","IdentificationText","Nature_of_goods","TransportPackage","ItemQuantity","Number_of_packages","Method_of_pa—Åking","ShippingMarks","MarkingText","Marks_and_Nos","TransportDetails","StageCode","truck","ModeCode","trailer","ConsignirProvidedRegulatoryFormalitiesInstructions","instruction","MMTCCBDAeCMRMessage","downloadXMLfile","xmlValue","filename","file","Blob","a","createElement","url","URL","createObjectURL","href","download","body","appendChild","click","setTimeout","removeChild","window","revokeObjectURL","createXML","onError","checkForErrors","errors","Invoice","checkRequiredInvoice","forEach","el","_","isEmpty","checkRequiredFields","invoiceXML","xmlValueInvoice","declaration","cmrXML","xmlValueCMR","units","selectControl","labelControl","unitList","crewData","useState","open","error","severity","openAlert","setOpenAlert","Collapse","in","Alert","action","IconButton","aria-label","size","fontSize","item","hasOwnProperty","crewItem","find","element","parseInt","Family_name","Given_name","Rank_of_rating","kindOfPackages","KindOfPackagesEditor","kindOfPackagesList","UnitEditor","Seq","dgClassifications","groups","codes","IMOHazardClasses","packingGroups","pollutionCodes","cargoData","cargoItem","Container_number","Transport_unit","wasteTypesList","wasteTypes","wasteTypeFormatted","WasteTypesEditor","marginLeft","FormControl","fullWidth","InputLabel","Select","labelId","WasteDeliveryStatus","target","MenuItem","LastPortDelivered","index","TextField","type","LastPortDeliveredDate","substr","InputLabelProps","shrink","documentTypes","getDocumentTypes","getDocumentsWithTypes","documentsWithTypes","documentWithType","getDocumentWithCodeByCode","documentType","divisionLine","background","borderColor","documentTypesList","documentsAttachedRows","consignmentRows","correctDateTime","locationNumber","emptyDiv","alignItems","xs","ListOfLanguages","language","ListOfCountries","country","contentEditable","multiline","rowsMax","tradeLineItemsColumns","ListOfCurrencies","currency","cc","listOfOptions","listOfOptionsConst","drawerWidth","flexShrink","drawerPaper","getChildComponent","activeItem","setData","dataItem","onload","addEventListener","confirmationMessage","event","returnValue","CarDetails","location","pathname","indexOf","setActiveItem","defaultDataConst","openErrorDialog","setOpenErrorDialog","uploadAnchorEl","setUploadAnchorEl","downloadAnchorEl","setDownloadAnchorEl","handleClose","aria-controls","marginRight","aria-haspopup","currentTarget","Menu","anchorEl","keepMounted","Boolean","onClose","htmlFor","missingFields","block","title","text","getElementById","files","reader","FileReader","result","dataCopy","JSON","parse","stringify","readAsText","Drawer","paper","List","ListItem","ListItemIcon","ListItemText","primary","Dialog","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","Array","isArray","DialogActions","autoFocus","createBrowserHistory","AppRouter","path","exact","render","StrictMode"],"mappings":"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","file":"static/js/main.1108ced8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {DataGrid} from '@material-ui/data-grid';\r\nimport shipCallsData from './../config/JSON/shipCallsData.json'\r\n\r\n\r\nconsole.log('COlumn data: ', shipCallsData)\r\nconst columns = [\r\n    {field: 'id', headerName: 'ID', width: 100},\r\n    {\r\n        field: 'TruckNumber',\r\n        headerName: 'Truck number',\r\n        width: 200,\r\n    },\r\n    {\r\n        field: 'Country',\r\n        headerName: 'Country',\r\n        width: 200,\r\n    },\r\n    {\r\n        field: 'DocumentNumber',\r\n        headerName: '‚Ññ of document',\r\n        width: 200,\r\n    },\r\n    {\r\n        field: 'DateOfDocument',\r\n        headerName: 'Date of document',\r\n        width: 200,\r\n    },\r\n];\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n    },\r\n    drawerContainer: {\r\n        overflow: 'auto',\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        padding: theme.spacing(3),\r\n    },\r\n    uploadFile: {\r\n        display: 'none'\r\n    }\r\n}));\r\n\r\nexport default function HomePage({history}) {\r\n\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <CssBaseline/>\r\n            <AppBar position=\"fixed\" className={classes.appBar}>\r\n                <Toolbar>\r\n                    <Grid container justify={'space-between'}>\r\n                        <Typography variant=\"h6\">\r\n                            –ü—Ä–æ—Ç–æ—Ç–∏–ø –£–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ –ú–æ—Ä—Å—å–∫–æ–≥–æ –Ñ–¥–∏–Ω–æ–≥–æ –í—ñ–∫–Ω–∞<br/>Ukrainian Maritime Single Window Prototype\r\n                        </Typography>\r\n                    </Grid>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <main className={classes.content}>\r\n                <Toolbar/>\r\n\r\n                <Grid container style={{marginTop: '10px'}} justify={'center'}>\r\n                    <Typography variant=\"h5\">\r\n                        –ü–µ—Ä–µ–ª—ñ–∫ —Å—É–¥–Ω–æ–∑–∞—Ö–æ–¥—ñ–≤ / Ship calls\r\n                    </Typography>\r\n                </Grid>\r\n\r\n                <Grid container style={{marginTop: '30px'}} justify={'center'}>\r\n\r\n                    <div style={{width: '905px', height: '300px', align:'center'}}>\r\n                        <DataGrid\r\n                            rows={shipCallsData}\r\n                            columns={columns}\r\n                            pageSize={4}\r\n                            onRowClick={(e) => {\r\n                                history.push(`/details/${e.id}`);\r\n                            }}\r\n                            disableSelectionOnClick\r\n                        />\r\n                    </div>\r\n                </Grid>\r\n\r\n                <Grid container style={{marginTop: '20px'}} justify={'center'}>\r\n                    <Typography style={{width: '900px'}} variant=\"p\">\r\n                        Prototype is aimed to help public authorities implement electronic information exchange systems.\r\n                        <br/><br/>\r\n                        Prototype implements the Annex to the Convention on the Facilitation of International Navigation\r\n                        of 1965, approved by International Maritime Organization Resolution FAL.12 (40), Standard\r\n                        1.3bis, based on UN/CEFACT MMT reference data model (RDM) and refers to the European Union‚Äôs\r\n                        Maritime Single Window Environment (of the European Maritime Safety Agency, EMSA) requirements.\r\n                    </Typography>\r\n                </Grid>\r\n            </main>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\n\r\nexport default class NotFound extends React.Component {\r\n\r\n    render() {\r\n        return <h1>404 Page does not exists :(</h1>\r\n    }\r\n\r\n}","import React from 'react'\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\n\r\nimport countryList from \"../../functions/countryList\"\r\nimport ListOfPorts from \"../../config/JSON/listOfPorts\";\r\nimport ListOfShipTypes from \"../../config/consts/listOfShipTypesConst\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 200,\r\n    },\r\n    formControlNoMargin: {\r\n        minWidth: 225,\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    topMargin: {\r\n        marginTop: theme.spacing(5)\r\n    }\r\n}));\r\n\r\nconst ShipFormComponent = ({data, updateData, locationNumber}) => {\r\n    const classes = useStyles();\r\n\r\n    const marginTop = {marginTop: '30px'};\r\n    const miniMarginTop = {marginTop: '10px'};\r\n    const emptyDIV = <div style={{width: '225px'}}/>;\r\n\r\n    return <>\r\n\r\n        <Typography variant=\"h3\" component=\"h3\" gutterBottom>\r\n            Ship information\r\n        </Typography>\r\n\r\n        <Typography style={marginTop} variant=\"h5\" classes={classes.topMargin} component=\"h5\" gutterBottom>\r\n            Ship identification\r\n        </Typography>\r\n\r\n        <Grid container style={marginTop} classes={classes.topMargin} justify=\"space-between\">\r\n            <TextField\r\n                label=\"Ship name\"\r\n                contentEditable={false}\r\n                value={data.name}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"IMO number\"\r\n                value={data.IMOnumber}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Other ship related information\"\r\n                value={data.otherInfo}\r\n                onChange={(e) =>\r\n                    updateData({otherInfo: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n        </Grid>\r\n\r\n        <Grid container style={marginTop} justify={'space-between'}>\r\n            <TextField\r\n                label=\"Call sign\"\r\n                value={data.callSign}\r\n                onChange={(e) =>\r\n                    updateData({callSign: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"MMSI number\"\r\n                value={data.mmsiNumner}\r\n                onChange={(e) =>\r\n                    updateData({mmsiNumner: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            {emptyDIV}\r\n        </Grid>\r\n\r\n        <Typography style={marginTop} variant=\"h5\" classes={classes.topMargin} component=\"h5\" gutterBottom>\r\n            Ship particulars\r\n        </Typography>\r\n\r\n        <Grid style={marginTop} container justify={'space-between'}>\r\n\r\n            <FormControl\r\n                variant=\"outlined\"\r\n                className={classes.formControlNoMargin}\r\n            >\r\n                <InputLabel id=\"flag-state-label\">Flag state</InputLabel>\r\n                <Select\r\n                    labelId=\"flag-state-label\"\r\n                    value={data.flagState}\r\n                    onChange={(e) => {\r\n                        updateData({flagState: e.target.value})\r\n                    }}\r\n                >\r\n                    {countryList.map((item, index) => {\r\n                        let country = item.split(\":\")[0];\r\n                        return <MenuItem key={index} value={country}>\r\n                            {item}\r\n                        </MenuItem>\r\n                    })}\r\n                </Select>\r\n            </FormControl>\r\n\r\n\r\n            <FormControl\r\n                variant=\"outlined\"\r\n                className={classes.formControlNoMargin}\r\n            >\r\n                <InputLabel id=\"ship-type-label\">Ship state</InputLabel>\r\n                <Select\r\n                    labelId=\"ship-type-label\"\r\n                    value={data.shipType}\r\n                    onChange={(e) => {\r\n                        updateData({shipType: e.target.value})\r\n                    }}\r\n                >\r\n                    {ListOfShipTypes.map((item, index) =>\r\n                        <MenuItem key={index} value={item.code}>\r\n                            {`${item.name}(${item.code})`}\r\n                        </MenuItem>\r\n                    )}\r\n                </Select>\r\n            </FormControl>\r\n\r\n            {emptyDIV}\r\n        </Grid>\r\n\r\n        <Grid container style={marginTop} justify={'space-between'}>\r\n            <TextField\r\n                label=\"Gross tonnage\"\r\n                value={data.grossTonnage}\r\n                onChange={(e) =>\r\n                    updateData({grossTonnage: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Net tonnage\"\r\n                value={data.netTonnage}\r\n                onChange={(e) =>\r\n                    updateData({netTonnage: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            {emptyDIV}\r\n        </Grid>\r\n\r\n        <Typography style={marginTop} variant=\"h5\" classes={classes.topMargin} component=\"h5\" gutterBottom>\r\n            Certificate of registry\r\n        </Typography>\r\n\r\n        <Grid style={marginTop} container justify={'space-between'}>\r\n            <FormControl\r\n                variant=\"outlined\"\r\n                className={classes.formControlNoMargin}\r\n            >\r\n                <InputLabel id=\"port-label\">Port</InputLabel>\r\n                <Select\r\n                    labelId=\"port-label\"\r\n                    value={data.port}\r\n                    onChange={(e) => {\r\n                        updateData({port: e.target.value})\r\n                    }}\r\n                >\r\n                    {ListOfPorts.map((port, index) =>\r\n                        <MenuItem key={index} value={`${port.code}`}>\r\n                            {`${port.code} - ${port.countryCode} - ${port.name}`}\r\n                        </MenuItem>\r\n                    )}\r\n                </Select>\r\n            </FormControl>\r\n\r\n            <TextField\r\n                label=\"Date of issue\"\r\n                type=\"date\"\r\n                style={{minWidth: '225px'}}\r\n                variant={'outlined'}\r\n                value={correctDateTime(data.issueDate)}\r\n                onChange={(e) =>\r\n                    updateData({issueDate: e.target.value})}\r\n                InputLabelProps={{\r\n                    shrink: true,\r\n                }}\r\n            />\r\n\r\n            <TextField\r\n                label=\"Number\"\r\n                variant={'outlined'}\r\n                value={data.certificateNumber}\r\n                onChange={(e) =>\r\n                    updateData({certificateNumber: e.target.value})\r\n                }\r\n            />\r\n\r\n        </Grid>\r\n\r\n        <Typography style={marginTop} variant=\"h5\" classes={classes.topMargin} component=\"h5\" gutterBottom>\r\n            Company\r\n        </Typography>\r\n\r\n        <Grid container style={marginTop} justify={'space-between'}>\r\n            <TextField\r\n                style={{width: 'calc(90% - 225px)'}}\r\n                label=\"Company name\"\r\n                multiline\r\n                rowsMax={2}\r\n                value={data.companyName}\r\n                onChange={(e) => {\r\n                    updateData({companyName: e.target.value})\r\n                }}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"IMO company number\"\r\n                variant=\"outlined\"\r\n                value={data.iMOCompany}\r\n                onChange={(e) => {\r\n                    let iMOCompany = e.target.value;\r\n                    updateData({iMOCompany})\r\n                }}\r\n            />\r\n        </Grid>\r\n\r\n        <Grid container style={miniMarginTop} justify={'space-between'}>\r\n            <TextField\r\n                label=\"Phone\"\r\n                margin={'normal'}\r\n                value={data.phone}\r\n                onChange={(e) => {\r\n                    let phone = e.target.value;\r\n                    updateData({phone})\r\n                }}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Fax\"\r\n                margin={'normal'}\r\n                value={data.fax}\r\n                onChange={(e) => {\r\n                    let fax = e.target.value;\r\n                    updateData({fax})\r\n                }}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Email\"\r\n                margin={'normal'}\r\n                value={data.email}\r\n                onChange={(e) => {\r\n                    let email = e.target.value;\r\n                    updateData({email})\r\n                }}\r\n                variant=\"outlined\"\r\n            />\r\n        </Grid>\r\n\r\n        <Grid container style={miniMarginTop} justify={'space-between'}>\r\n            <TextField\r\n                label=\"Year of built\"\r\n                margin={'normal'}\r\n                value={data.builtYear}\r\n                onChange={(e) => {\r\n                    let builtYear = e.target.value;\r\n                    updateData({builtYear})\r\n                }}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Dead weight\"\r\n                margin={'normal'}\r\n                value={data.deadWeight}\r\n                onChange={(e) => {\r\n                    let deadWeight = e.target.value;\r\n                    updateData({deadWeight})\r\n                }}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            {emptyDIV}\r\n        </Grid>\r\n\r\n        <Grid container style={miniMarginTop} justify={'space-between'}>\r\n            <TextField\r\n                label=\"Length overall\"\r\n                margin={'normal'}\r\n                value={data.length}\r\n                onChange={(e) => {\r\n                    let length = e.target.value;\r\n                    updateData({length})\r\n                }}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Beam\"\r\n                margin={'normal'}\r\n                value={data.beam}\r\n                onChange={(e) => {\r\n                    let beam = e.target.value;\r\n                    updateData({beam})\r\n                }}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Summer draught\"\r\n                margin={'normal'}\r\n                value={data.summerDraught}\r\n                onChange={(e) => {\r\n                    let summerDraught = e.target.value;\r\n                    updateData({summerDraught})\r\n                }}\r\n                variant=\"outlined\"\r\n            />\r\n        </Grid>\r\n    </>\r\n\r\n\r\n}\r\n\r\nfunction correctDateTime(date) {\r\n    date = \"\" + date;\r\n    return date.substr(0, 16);\r\n}\r\n\r\nexport default ShipFormComponent;","import React from \"react\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select'\r\nimport '@date-io/date-fns';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport ListOfPurposesOfCalls from '../../config/consts/listOfPurposesOfCallsConst';\r\nimport ListOfPorts from '../../config/JSON/listOfPorts'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 225,\r\n    },\r\n    datePicker: {\r\n        minWidth: 250,\r\n        width: 250\r\n    },\r\n    formControlNoMargin: {\r\n        minWidth: 225,\r\n    },\r\n    formControlNoMargin2: {\r\n        minWidth: 225,\r\n        // minHeight: 60\r\n    },\r\n    selectEmpty: {\r\n        marginTop: theme.spacing(2),\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n}));\r\n\r\n\r\nfunction PortForm({data, updateData, locationNumber}) {\r\n    const classes = useStyles();\r\n    const emptyDiv = <div className={classes.formControlNoMargin} style={{height: '0px'}}/>\r\n\r\n\r\n    return <>\r\n        <Typography variant=\"h3\" component=\"h3\" gutterBottom>\r\n            Port information\r\n        </Typography>\r\n\r\n        <Grid container justify={'space-between'}>\r\n            <FormControl\r\n                variant=\"outlined\"\r\n                className={classes.formControlNoMargin}\r\n            >\r\n                <InputLabel id=\"departure-arrival-label\">Departure / Arrival</InputLabel>\r\n\r\n                <Select\r\n                    labelId=\"departure-arrival-label\"\r\n                    value={data.arrivalDeparture}\r\n                    onChange={(e) => {\r\n                        updateData({arrivalDeparture: e.target.value})\r\n                    }}\r\n                >\r\n                    <MenuItem value={'Arrival'}>Arrival</MenuItem>\r\n                    <MenuItem value={'Departure'}>Departure</MenuItem>\r\n                </Select>\r\n            </FormControl>\r\n\r\n            <TextField\r\n                label=\"Voyage Number:\"\r\n                value={data.voyageNumber}\r\n                onChange={(e) => updateData({voyageNumber: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            {emptyDiv}\r\n        </Grid>\r\n\r\n        <Typography variant=\"h5\" component=\"h5\" gutterBottom style={{marginTop: '30px'}}>\r\n            Port of call\r\n        </Typography>\r\n\r\n        {/*Port of call and all time pickers*/}\r\n        <Grid container justify=\"space-between\">\r\n\r\n            <FormControl\r\n                variant=\"outlined\"\r\n                className={classes.formControlNoMargin}\r\n                margin={\"normal\"}\r\n            >\r\n                <InputLabel id=\"port-of-call-label\">Port of call</InputLabel>\r\n\r\n                <Select\r\n                    labelId=\"port-of-call-label\"\r\n                    value={data.portOfCall}\r\n                >\r\n                    {ListOfPorts.map((port, index) =>\r\n                        <MenuItem key={index} value={`${port.code}`}>\r\n                            {`${port.code} - ${port.countryCode} - ${port.name}`}\r\n                        </MenuItem>\r\n                    )}\r\n                </Select>\r\n            </FormControl>\r\n\r\n\r\n            <TextField\r\n                label=\"ETA to port of call\"\r\n                type=\"datetime-local\"\r\n                variant={'outlined'}\r\n                className={classes.datePicker}\r\n                margin={\"normal\"}\r\n                value={correctDateTime(data.ETAPortOfCall)}\r\n                InputLabelProps={{\r\n                    shrink: true,\r\n                }}\r\n                inputProps={{\r\n                    step: 300, // 5 min\r\n                }}\r\n            />\r\n\r\n            <TextField\r\n                label=\"ATA to port of call\"\r\n                type=\"datetime-local\"\r\n                variant={'outlined'}\r\n                className={classes.datePicker}\r\n                margin={\"normal\"}\r\n                value={correctDateTime(data.ATAPortOfCall)}\r\n                onChange={(e) =>\r\n                    updateData({ATAPortOfCall: e.target.value})}\r\n                InputLabelProps={{\r\n                    shrink: true,\r\n                }}\r\n            />\r\n        </Grid>\r\n\r\n        <Grid container justify=\"space-between\">\r\n            <TextField\r\n                style={{marginTop: '15px'}}\r\n                value={data.portFacilityAtArrival}\r\n                onChange={(e) =>\r\n                    updateData({portFacilityAtArrival: e.target.value})}\r\n                label=\"Port facility at arrival\"\r\n                variant=\"outlined\"\r\n                margin={\"normal\"}\r\n            />\r\n\r\n\r\n            <TextField\r\n                label=\"ETD to port of call\"\r\n                type=\"datetime-local\"\r\n                contentEditable={false}\r\n                className={classes.datePicker}\r\n                variant={'outlined'}\r\n                margin={\"normal\"}\r\n                value={correctDateTime(data.ETDPortOfCall)}\r\n                onChange={(e) =>\r\n                    updateData({ETDPortOfCall: e.target.value})}\r\n                InputLabelProps={{\r\n                    shrink: true,\r\n                }}\r\n            />\r\n\r\n\r\n            <TextField\r\n                label=\"ATD to port of call\"\r\n                type=\"datetime-local\"\r\n                className={classes.datePicker}\r\n                variant={'outlined'}\r\n                margin={\"normal\"}\r\n                value={correctDateTime(data.ATDPortOfCall)}\r\n                onChange={(e) =>\r\n                    updateData({ATDPortOfCall: e.target.value})}\r\n                InputLabelProps={{\r\n                    shrink: true,\r\n                }}\r\n            />\r\n        </Grid>\r\n\r\n        {/*Port of arrival / last port of call / next port of call*/}\r\n        <Grid container justify=\"space-between\" style={{marginTop: '30px'}}>\r\n\r\n            <FormControl\r\n                variant=\"outlined\"\r\n                className={classes.formControlNoMargin}\r\n            >\r\n                <InputLabel id=\"port-of-arrival-label\">Port of arrival</InputLabel>\r\n\r\n                <Select\r\n                    labelId=\"port-of-arrival-label\"\r\n                    value={data.portOfArrival}\r\n                    onChange={(e) => {\r\n                        updateData({portOfArrival: e.target.value})\r\n                    }}\r\n                >\r\n                    {ListOfPorts.map((port, index) =>\r\n                        <MenuItem key={index} value={`${port.code}`}>\r\n                            {`${port.code} - ${port.countryCode} - ${port.name}`}\r\n                        </MenuItem>\r\n                    )}\r\n                </Select>\r\n            </FormControl>\r\n\r\n            <FormControl\r\n                variant=\"outlined\"\r\n                className={classes.formControlNoMargin}\r\n            >\r\n                <InputLabel id=\"last-port-call-label\">Last port of call</InputLabel>\r\n                <Select\r\n                    labelId=\"last-port-call-label\"\r\n                    value={data.lastPortOfCall}\r\n                    onChange={(e) => {\r\n                        updateData({lastPortOfCall: e.target.value})\r\n                    }}\r\n                >\r\n                    {ListOfPorts.map((port, index) =>\r\n                        <MenuItem key={index} value={`${port.code}`}>\r\n                            {`${port.code} - ${port.countryCode} - ${port.name}`}\r\n                        </MenuItem>\r\n                    )}\r\n                </Select>\r\n            </FormControl>\r\n\r\n\r\n            <FormControl\r\n                variant=\"outlined\"\r\n                // required\r\n                className={classes.formControlNoMargin}\r\n            >\r\n                <InputLabel id=\"next-port-call-label\">Next port of call</InputLabel>\r\n                <Select\r\n                    labelId=\"next-port-call-label\"\r\n                    value={data.nextPortOfCall}\r\n                    onChange={(e) => {\r\n                        updateData({nextPortOfCall: e.target.value})\r\n                    }}\r\n                >\r\n                    {ListOfPorts.map((port, index) =>\r\n                        <MenuItem key={index} value={`${port.code}`}>\r\n                            {`${port.code} - ${port.countryCode} - ${port.name}`}\r\n                        </MenuItem>\r\n                    )}\r\n                </Select>\r\n            </FormControl>\r\n        </Grid>\r\n\r\n        <FormControl\r\n            variant=\"outlined\"\r\n            required\r\n            className={classes.formControlNoMargin}\r\n            style={{marginTop: \"30px\"}}\r\n        >\r\n            <InputLabel id=\"next-port-call-label\">Call at anchorage</InputLabel>\r\n            <Select\r\n                labelId=\"next-port-call-label\"\r\n                value={data.callAnchorage}\r\n                onChange={(e) => {\r\n                    updateData({callAnchorage: e.target.value})\r\n                }}\r\n            >\r\n                <MenuItem value={'Yes'}>Yes</MenuItem>\r\n                <MenuItem value={'No'}>No</MenuItem>\r\n            </Select>\r\n        </FormControl>\r\n\r\n        <Typography variant=\"h5\" component=\"h5\" style={{marginTop: '30px'}} gutterBottom>\r\n            Position at port of call\r\n        </Typography>\r\n\r\n        {/*Latitude, longitute and time*/\r\n        }\r\n        <Grid container justify=\"space-between\" style={{marginTop: '15px'}}>\r\n\r\n            <TextField\r\n                label=\"Latitude\"\r\n                value={data.position.latitude}\r\n                onChange={(e) => {\r\n                    let latitude = e.target.value;\r\n                    let position = data.position;\r\n                    updateData({position: {...position, latitude}})\r\n                }}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Longitude\"\r\n                value={data.position.longitude}\r\n                onChange={(e) => {\r\n                    let longitude = e.target.value;\r\n                    let position = data.position;\r\n                    updateData({position: {...position, longitude}})\r\n                }}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Time\"\r\n                type=\"datetime-local\"\r\n                className={classes.datePicker}\r\n                variant={'outlined'}\r\n                value={correctDateTime(data.position.time)}\r\n                onChange={(e) => {\r\n                    let time = e.target.value;\r\n                    let position = {...data.position, time};\r\n                    updateData({position})\r\n                }}\r\n                InputLabelProps={{\r\n                    shrink: true,\r\n                }}\r\n                inputProps={{\r\n                    step: 300, // 5 min\r\n                }}\r\n            />\r\n\r\n        </Grid>\r\n\r\n        <TextField\r\n            style={{marginTop: '30px'}}\r\n            id=\"cargo-description\"\r\n            label=\"Brief description of onboard cargo\"\r\n            multiline\r\n            fullWidth\r\n            rowsMax={4}\r\n            value={data.cargoDescription}\r\n            onChange={(e) => updateData({cargoDescription: e.target.value})}\r\n            variant=\"outlined\"\r\n        />\r\n\r\n        <Typography variant=\"h5\" component=\"h5\" style={{marginTop: '30px'}} gutterBottom>\r\n            Name of master\r\n        </Typography>\r\n\r\n        <Grid container justify={'space-between'}>\r\n\r\n            <TextField\r\n                label=\"Family name\"\r\n                value={data.nameOfMaster.familyName}\r\n                onChange={(e) => {\r\n                    let familyName = e.target.value;\r\n                    let nameOfMaster = {...data.nameOfMaster, familyName};\r\n                    updateData({nameOfMaster})\r\n                }}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Given name\"\r\n                value={data.nameOfMaster.givenName}\r\n                onChange={(e) => {\r\n                    let givenName = e.target.value;\r\n                    let nameOfMaster = {...data.nameOfMaster, givenName};\r\n                    updateData({nameOfMaster})\r\n                }}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            {emptyDiv}\r\n\r\n        </Grid>\r\n\r\n        <Typography variant=\"h5\" component=\"h5\" style={{marginTop: '30px'}} gutterBottom>\r\n            Purpose of call\r\n        </Typography>\r\n        <div style={{marginTop: \"20px\"}}>\r\n            {data.callPurpose.map((item, index) => <div key={index}>\r\n\r\n                <FormControl\r\n                    key={index}\r\n                    variant=\"outlined\"\r\n                    className={classes.formControlNoMargin}\r\n\r\n                >\r\n\r\n                    <InputLabel id={`purpose-of-call-label${index}`}>\r\n                        {index === 0 ? 'Call purpose' : `Call purpose (${index})`}\r\n                    </InputLabel>\r\n\r\n                    <Select\r\n                        labelId={`purpose-of-call-label${index}`}\r\n                        value={data.callPurpose[index]}\r\n                        onChange={(e) => {\r\n                            let purposeArr = data.callPurpose;\r\n                            purposeArr[index] = e.target.value;\r\n                            updateData({callPurpose: purposeArr})\r\n                        }}\r\n                    >\r\n                        {ListOfPurposesOfCalls.map((purpose, index) => {\r\n                            return <MenuItem key={index} value={purpose.callPurposeCode}>\r\n                                {`${purpose.callPurposeText}(${purpose.callPurposeCode})`}\r\n                            </MenuItem>\r\n                        })}\r\n                    </Select>\r\n                </FormControl>\r\n\r\n                <IconButton\r\n                    style={{\r\n                        marginLeft: '10px',\r\n                        marginBottom: '20px'\r\n                    }}\r\n                    color={'secondary'}\r\n                    aria-label=\"delete\"\r\n                    variant={'outlined'}\r\n                    onClick={() => {\r\n                        if (index === 0 && data.callPurpose.length === 1) {\r\n                            updateData({callPurpose: ['']})\r\n                        } else {\r\n                            let slicedData = JSON.parse(JSON.stringify(data.callPurpose));\r\n                            slicedData.splice(index, 1);\r\n                            updateData({callPurpose: slicedData})\r\n                        }\r\n                    }}\r\n                >\r\n                    <DeleteIcon/>\r\n                </IconButton>\r\n\r\n            </div>)}\r\n\r\n            <Button\r\n                style={{marginTop: '15px'}}\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n                disabled={data.callPurpose[data.callPurpose.length - 1] === ''}\r\n                className={classes.button}\r\n                onClick={() => updateData({purposeOfCall: data.callPurpose.push('')})}\r\n                startIcon={<AddIcon/>}\r\n            >\r\n                Add new row\r\n            </Button>\r\n\r\n        </div>\r\n\r\n        <TextField\r\n            style={{marginTop: '20px'}}\r\n            id=\"air-draught-field\"\r\n            label=\"Air draught\"\r\n            value={data.airDraught}\r\n            onChange={(e) => updateData({airDraught: e.target.value})}\r\n            variant=\"outlined\"\r\n        />\r\n\r\n\r\n        <Typography variant=\"h5\" component=\"h5\" style={{marginTop: '30px'}} gutterBottom>\r\n            {data.arrivalDeparture ? data.arrivalDeparture : 'Departure'} draught\r\n        </Typography>\r\n\r\n        <Grid container justify={'space-between'}>\r\n            <TextField\r\n                label=\"Fore draught\"\r\n                value={data.arrivalDraught.foreDraught}\r\n                onChange={(e) => {\r\n                    let foreDraught = e.target.value;\r\n                    let arrivalDraught = {...data.arrivalDraught, foreDraught};\r\n                    updateData({arrivalDraught})\r\n                }}\r\n                margin={'normal'}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Mid-ship draught\"\r\n                value={data.arrivalDraught.midShipDraught}\r\n                onChange={(e) => {\r\n                    let midShipDraught = e.target.value;\r\n                    let arrivalDraught = {...data.arrivalDraught, midShipDraught};\r\n                    updateData({arrivalDraught})\r\n                }}\r\n                margin={'normal'}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Aft draught\"\r\n                value={data.arrivalDraught.aftDraught}\r\n                onChange={(e) => {\r\n                    let aftDraught = e.target.value;\r\n                    let arrivalDraught = {...data.arrivalDraught, aftDraught};\r\n                    updateData({arrivalDraught})\r\n                }}\r\n                margin={'normal'}\r\n                variant=\"outlined\"\r\n            />\r\n        </Grid>\r\n\r\n\r\n        <Typography variant=\"h5\" component=\"h5\" style={{marginTop: '30px'}} gutterBottom>\r\n            Name and contact details of ship's agent\r\n        </Typography>\r\n\r\n        <Grid container justify={'space-between'}>\r\n            <TextField\r\n                style={{width: 'calc(90% - 220px)'}}\r\n                label=\"Name\"\r\n                multiline\r\n                rowsMax={2}\r\n                value={data.agent.company}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Mobile telephone\"\r\n                variant=\"outlined\"\r\n                value={data.agent.contactNumbers.mobileTelephone}\r\n                onChange={(e) => {\r\n                    let mobileTelephone = e.target.value;\r\n                    let contactNumbers = {...data.agent.contactNumbers, mobileTelephone};\r\n                    let agent = {...data.agent, contactNumbers};\r\n                    updateData({agent})\r\n                }}\r\n            />\r\n        </Grid>\r\n\r\n        <Grid container justify={'space-between'}>\r\n            <TextField\r\n                label=\"Business telephone\"\r\n                margin={'normal'}\r\n                value={data.agent.contactNumbers.businessTelephone}\r\n                onChange={(e) => {\r\n                    let businessTelephone = e.target.value;\r\n                    let contactNumbers = {...data.agent.contactNumbers, businessTelephone};\r\n                    let agent = {...data.agent, contactNumbers};\r\n                    updateData({agent})\r\n                }}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Telefax\"\r\n                margin={'normal'}\r\n                value={data.agent.contactNumbers.telefax}\r\n                onChange={(e) => {\r\n                    let telefax = e.target.value;\r\n                    let contactNumbers = {...data.agent.contactNumbers, telefax};\r\n                    let agent = {...data.agent, contactNumbers};\r\n                    updateData({agent})\r\n                }}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Email\"\r\n                margin={'normal'}\r\n                value={data.agent.contactNumbers.EMail}\r\n                onChange={(e) => {\r\n                    let EMail = e.target.value;\r\n                    let contactNumbers = {...data.agent.contactNumbers, EMail};\r\n                    let agent = {...data.agent, contactNumbers};\r\n                    updateData({agent})\r\n                }}\r\n                variant=\"outlined\"\r\n            />\r\n        </Grid>\r\n\r\n        <Typography variant=\"h5\" component=\"h5\" style={{marginTop: '30px'}} gutterBottom>\r\n            Number of persons on board\r\n        </Typography>\r\n\r\n        <Grid container justify={'space-between'}>\r\n            <TextField\r\n                label=\"Number of persons\"\r\n                margin={'normal'}\r\n                value={data.personsOnBoard.numberOfPersonsOnBoard}\r\n                onChange={(e) => {\r\n                    let numberOfPersonsOnBoard = e.target.value;\r\n                    let personsOnBoard = {...data.personsOnBoard, numberOfPersonsOnBoard};\r\n                    updateData({personsOnBoard});\r\n                }}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Number of crew\"\r\n                margin={'normal'}\r\n                value={data.personsOnBoard.crew}\r\n                onChange={(e) => {\r\n                    let crew = e.target.value;\r\n                    let personsOnBoard = {...data.personsOnBoard, crew};\r\n                    updateData({personsOnBoard});\r\n                }}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Number of passengers\"\r\n                margin={'normal'}\r\n                value={data.personsOnBoard.passengers}\r\n                onChange={(e) => {\r\n                    let passengers = e.target.value;\r\n                    let personsOnBoard = {...data.personsOnBoard, passengers};\r\n                    updateData({personsOnBoard});\r\n                }}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n        </Grid>\r\n\r\n        <Grid container justify={'space-between'}>\r\n            <FormControl\r\n                variant=\"outlined\"\r\n                className={classes.formControlNoMargin2}\r\n                margin={\"normal\"}\r\n            >\r\n                <InputLabel id=\"stowaways-label\">Have any stowaways been found on boards</InputLabel>\r\n\r\n                <Select\r\n                    className={classes.formControlNoMargin2}\r\n                    labelId=\"stowaways-label\"\r\n                    value={data.stowaways}\r\n                    onChange={(e) => updateData({stowaways: e.target.value})}\r\n                >\r\n                    <MenuItem value={'Yes'}>Yes</MenuItem>\r\n                    <MenuItem value={'No'}>No</MenuItem>\r\n                </Select>\r\n            </FormControl>\r\n\r\n            <TextField\r\n                label=\"Period of stay\"\r\n                margin={'normal'}\r\n                style={{marginLeft: '30px'}}\r\n                variant=\"outlined\"\r\n                value={data.periodOfStay}\r\n                onChange={(e) =>\r\n                    updateData({periodOfStay: e.target.value})\r\n                }\r\n            />\r\n\r\n            {emptyDiv}\r\n\r\n        </Grid>\r\n    </>\r\n}\r\n\r\nfunction correctDateTime(date) {\r\n    date = \"\" + date;\r\n    return date.substr(0, 16);\r\n}\r\n\r\nexport default PortForm;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport moment from \"moment\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nlet startDate = new Date();\r\n\r\nclass datePicker extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {color: new Date()};\r\n    }\r\n\r\n    getValue() {\r\n        return {[this.props.column.key]: moment(startDate).format(\"DD/MM/YYYY\")};\r\n    }\r\n\r\n    getInputNode() {\r\n        return ReactDOM.findDOMNode(this).getElementsByTagName(\"input\")[0];\r\n    }\r\n\r\n    onSelect = date => {\r\n        return this.setState({color: date}, () => this.props.onCommit());\r\n    };\r\n    // onChange = date => {\r\n    //     return this.setState({ color: date }, () => this.props.onCommit());\r\n    // };\r\n    // onChange = date => {\r\n    //\r\n    //     console.log(\"\")\r\n    //     if (moment(date,\"DD/MM/YYYY\").isValid()){\r\n    //         return this.setState({ color: date }, () => this.props.onCommit());\r\n    //     }\r\n    //\r\n    //\r\n    //\r\n    // };;\r\n\r\n    onChange = date => {\r\n        startDate = date;\r\n        this.forceUpdate()\r\n    };\r\n    ;\r\n\r\n    render() {\r\n        return <DatePicker selected={startDate} onChange={this.onChange} dateFormat=\"dd/MM/yyyy\"/>;\r\n    }\r\n}\r\n\r\nexport default datePicker;","import React from \"react\";\r\nimport ReactDataGrid from 'react-data-grid';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {Editors} from 'react-data-grid-addons';\r\nimport datePicker from \"../pickers/datePicker\";\r\nimport ListOfPorts from \"../../config/JSON/listOfPorts\";\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\n\r\nconst {DropDownEditor} = Editors;\r\n\r\nconst styles = (theme) => ({\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n            width: '25ch',\r\n        },\r\n    },\r\n});\r\n\r\nconst ports = [\"(...)\"];\r\nListOfPorts.map((port) =>\r\n    ports.push(port.code + ' - ' + port.countryCode + ' - ' + port.name)\r\n);\r\nconst PortEditor = <DropDownEditor options={ports}/>;\r\nconst securityLevels = [\"(...)\", \"Security level 1\", \"Security level 2\", \"Security level 3\"];\r\nconst SecurityEditor = <DropDownEditor options={securityLevels}/>;\r\n\r\nconst columns = [\r\n    {key: \"NR\", name: \"NR\", editable: true, width: 50},\r\n    {key: \"Date_of_arrival\", name: \"Date of arrival\", editable: true, editor: datePicker},\r\n    {key: \"Date_of_departure\", name: \"Date of departure\", editable: true, editor: datePicker},\r\n    {key: \"Port\", name: \"Port(Locode)\", editable: true, editor: PortEditor},\r\n    {key: \"Port_facility\", name: \"Port facility(GISIS)\", editable: true},\r\n    {key: \"Security_level\", name: \"Security level\", editable: true, editor: SecurityEditor},\r\n    {\r\n        key: \"Security_measures\",\r\n        name: \"Special or additional security measures taken by the ship\",\r\n        editable: true,\r\n        width: 400\r\n    }\r\n];\r\n\r\n\r\nfunction VoyageForm({data, updateData}) {\r\n    function addRow() {\r\n        console.log(\"adding row\");\r\n        let number = data.rows.length + 1\r\n        let row = {NR: number}\r\n        data.rows.push(row);\r\n        updateData(data)\r\n    }\r\n\r\n    function deleteRow() {\r\n        data.rows.pop();\r\n        updateData(data)\r\n    }\r\n\r\n    function onGridRowsUpdated({fromRow, toRow, updated}) {\r\n\r\n        const rows = data.rows.slice();\r\n        for (let i = fromRow; i <= toRow; i++) {\r\n            rows[i] = {...rows[i], ...updated};\r\n        }\r\n        data.rows = rows\r\n        updateData(data)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Typography variant=\"h3\" component=\"h3\" gutterBottom>\r\n                Voyage information\r\n            </Typography>\r\n            <ReactDataGrid\r\n                columns={columns}\r\n                rowGetter={i => data.rows[i]}\r\n                rowsCount={data.rows.length}\r\n                onGridRowsUpdated={onGridRowsUpdated}\r\n                enableCellSelect={true}\r\n                columnAutoWidth=\"true\"\r\n\r\n            />\r\n            <Button startIcon={<AddIcon/>} variant=\"primary\" onClick={addRow}>Add row</Button>\r\n            <Button startIcon={<DeleteOutlineIcon/>} variant=\"primary\" onClick={deleteRow}>Delete row</Button>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\n\r\nexport default withStyles(styles)(VoyageForm);","const countryCodes = require(\"../../data/countries\")\r\n\r\nexport function getCountryCodes() {\r\n    return Object.keys(countryCodes);\r\n}\r\n\r\nexport function getCountriesWithCodes() {\r\n    let countriesWithCodes = [];\r\n    for (let i = 0; i < Object.keys(countryCodes).length; i++) {\r\n        let countryWithCode = Object.values(countryCodes)[i] + ' - ' + Object.keys(countryCodes)[i];\r\n        countriesWithCodes.push(countryWithCode);\r\n    }\r\n    return countriesWithCodes;\r\n}\r\n\r\nexport function getCountryWithCodeByCode(countryCode) {\r\n    if (countryCode !== '' && countryCode != null) {\r\n        return countryCodes[countryCode] + ' - ' + countryCode;\r\n    }\r\n    return '';\r\n\r\n}\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default {getCountryCodes, getCountriesWithCodes, getCountryWithCodeByCode};","import React from \"react\";\r\nimport ReactDataGrid from 'react-data-grid';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {Editors} from 'react-data-grid-addons';\r\nimport datePicker from \"../pickers/datePicker\";\r\nimport countryCodes from \"../../functions/list_getters/countryCodes\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport DeleteOutlineIcon from \"@material-ui/icons/DeleteOutline\";\r\n\r\nconst {DropDownEditor} = Editors;\r\n\r\nconst styles = (theme) => ({\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n            width: '25ch',\r\n        },\r\n    },\r\n});\r\n\r\nconst genders = [\"(...)\", 'Male', 'Female']\r\nconst GendersEditor = <DropDownEditor options={genders}/>;\r\n\r\nconst idTypes = [\"(...)\", 'Musterbook', 'Passport', 'Residential permit', 'Picture id', 'Others']\r\nconst IDTypesEditor = <DropDownEditor options={idTypes}/>;\r\n\r\nconst RanksOfRating = [\"(...)\", 'AbleSeaman', 'Agent', 'AsstFoodBevMngr', 'BarManager', 'BarService', 'Bosun', 'Cadet', 'Captain', 'CargoTechnician', 'CasinoStaff', 'ChiefCook', 'ChiefElectrician', 'ChiefHousekeeper', 'ChiefEngineer', 'ChiefMaster', 'ChiefMate', 'ChiefOfficer', 'ChiefPurser', 'ChiefSteward', 'ClassSurveyor', 'CSO', 'Cook', 'CraneOperator', 'CrewMember', 'CruiseDirector', 'CruiseStaff', 'DeckApprentice', 'DeckFitter', 'DeckOfficer', 'Deckhand', 'Doctor', 'Donkeyman', 'ElectricalEngineer', 'ElectricalOfficer', 'Electrician', 'EngineerCadet', 'EngineeringCrew', 'EngineFitter', 'Entertainment', 'FacilitiesCrew', 'FacilitiesManager', 'FirstAsstEngineer', 'FirstEngineer', 'FirstMate', 'FirstOfficer', 'Fitter', 'FourthOfficer', 'FoodBevMngr', 'FoodService', 'FourthAsstEngineer', 'Greaser', 'Hospitality', 'HotelDirector', 'HotelStaff', 'HousekeepingStaff', 'InformationTechnology', 'JuniorEngineer', 'LaundryMaster', 'Lifeboatman', 'Maitred', 'MarineCrew', 'MarketingRevenueMngr', 'Master', 'MasterFirstClassPilot', 'MateFirstClassPilot', 'Mechanic', 'MedicalStaff', 'Messman', 'Motorman', 'Oiler', 'Operator', 'OrdinarySeaman', 'Owner', 'Painter', 'Porter', 'Provision', 'ProvisionMaster', 'Pumpman', 'QMED', 'RadioOfficer', 'Reeferman', 'Repairman', 'RiddingCrew', 'SafetyAndSecurity', 'SecondAsstEngineer', 'SecondMate', 'SecondOfficer', 'SSO', 'StaffCaptain', 'Steward', 'Superintendent', 'Tankerman', 'ThirdAsstEngineer', 'ThirdMate', 'ThirdOfficer', 'ThirdParty', 'TruckMechanic', 'Tunnelman', 'UtilityPerson', 'VettingInspector', 'Welder', 'Wiper', 'YardPersonnel', 'Other']\r\nconst RanksOfRatingEditor = <DropDownEditor options={RanksOfRating}/>;\r\n\r\nconst countryCodesList = countryCodes.getCountriesWithCodes();\r\ncountryCodesList.unshift(\"(...)\")\r\nconst CountryCodesEditor = <DropDownEditor options={countryCodesList}/>;\r\n\r\n\r\nconst columns = [\r\n    {key: \"NR\", name: \"NR\", editable: true, width: 50},\r\n    {key: \"Family_name\", name: \"Family name\", editable: true, width: 120},\r\n    {key: \"Given_name\", name: \"Given name\", editable: true, width: 120},\r\n    {key: \"Gender\", name: \"Gender\", editable: true, width: 80, editor: GendersEditor},\r\n    {key: \"Rank_of_rating\", name: \"Rank of rating\", editable: true, editor: RanksOfRatingEditor, width: 120},\r\n    {key: \"Nationality\", name: \"Nationality\", editable: true, editor: CountryCodesEditor, width: 100},\r\n    {key: \"Country_of_birth\", name: \"Country of birth\", editable: true, editor: CountryCodesEditor, width: 120},\r\n    {key: \"Place_of_birth\", name: \"Place of birth\", editable: true, width: 120},\r\n    {key: \"date_of_birth\", name: \"Date of birth\", editable: true, editor: datePicker, width: 120},\r\n    {key: \"ID_type\", name: \"ID type\", editable: true, width: 80, editor: IDTypesEditor},\r\n    {key: \"ID_document_number\", name: \"ID document number\", editable: true, width: 150},\r\n    {\r\n        key: \"Issuing_state_of_identity_document\",\r\n        name: \"Issuing state of identity document\",\r\n        editable: true,\r\n        editor: CountryCodesEditor,\r\n        width: 250\r\n    },\r\n    {\r\n        key: \"Expiry_date_of_identity_document\",\r\n        name: \"Expiry date of identity document\",\r\n        editable: true,\r\n        editor: datePicker,\r\n        width: 250\r\n    },\r\n    {key: \"Visa_Residence_permit_number\", name: \"Visa/Residence permit number\", editable: true, width: 250},\r\n];\r\n\r\nfunction CrewForm({data, updateData}) {\r\n    function addRow() {\r\n        let number = data.rows.length + 1\r\n        let row = {NR: number}\r\n        data.rows.push(row);\r\n        updateData(data)\r\n    }\r\n\r\n    function deleteRow() {\r\n        data.rows.pop();\r\n        updateData(data)\r\n    }\r\n\r\n\r\n    function onGridRowsUpdated({fromRow, toRow, updated}) {\r\n\r\n        const rows = data.rows.slice();\r\n        for (let i = fromRow; i <= toRow; i++) {\r\n            rows[i] = {...rows[i], ...updated};\r\n        }\r\n        data.rows = rows\r\n        console.log(\"rows \", data.rows)\r\n        updateData(data)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Typography variant=\"h3\" component=\"h3\" gutterBottom>\r\n                Crew list\r\n            </Typography>\r\n            <ReactDataGrid\r\n                columns={columns}\r\n                rowGetter={i => data.rows[i]}\r\n                rowsCount={data.rows.length}\r\n                onGridRowsUpdated={onGridRowsUpdated}\r\n                enableCellSelect={true}\r\n\r\n            />\r\n            <Button variant=\"primary\" startIcon={<AddIcon/>} onClick={addRow}>Add row</Button>\r\n            <Button variant=\"primary\" startIcon={<DeleteOutlineIcon/>} onClick={deleteRow}>Delete row</Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default withStyles(styles)(CrewForm);","let config = {\r\n    showDrawerIcons: true,\r\n    addOnCloseEvent: true,\r\n};\r\n\r\nexport {config}","// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default {\r\n    cmr: {\r\n        cmr_id :'',\r\n        remarks :'',\r\n        date_of_document:'',\r\n        documentsAttached: [\r\n            {\"NR\": 1}\r\n        ],\r\n        consignment: [\r\n            {\"NR\": 1}\r\n        ],\r\n        },\r\n\r\n    invoice: {\r\n        tradeLineItems: [\r\n            {\"NR\": 1}\r\n        ],\r\n        invoice_id:'',\r\n        date_of_document:'',\r\n        seller_id:'',\r\n        seller_name:'',\r\n        seller_language_code:'',\r\n        seller_tax_id:'',\r\n        seller_tax_type_code:'',\r\n        seller_person_name:'',\r\n        seller_complete_number:'',\r\n        seller_email:'',\r\n        seller_postcode:'',\r\n        seller_street_name:'',\r\n        seller_city_name:'',\r\n        seller_country_code:'',\r\n        seller_country_subdivision_name:'',\r\n        buyer_id:'',\r\n        buyer_name:'',\r\n        buyer_language_code:'',\r\n        buyer_tax_id:'',\r\n        buyer_tax_type_code:'',\r\n        buyer_person_name:'',\r\n        buyer_complete_number:'',\r\n        buyer_email:'',\r\n        buyer_postcode:'',\r\n        buyer_street_name:'',\r\n        buyer_city_name:'',\r\n        buyer_country_code:'',\r\n        buyer_country_subdivision_name:'',\r\n        gross_weight:'',\r\n        net_weight:'',\r\n        package_quantity:'',\r\n        transport_means_id:'',\r\n        occurrence_date_time:'',\r\n        due_payable_amount:'',\r\n        invoice_currency_code:'',\r\n        ibanID:'',\r\n        account_name:'',\r\n        exemption_reason_code:'',\r\n        payment_term_description:'',\r\n    },\r\n}\r\n","import ArticleIcon from '@material-ui/icons/Description';\r\nimport ReceiptIcon from '@material-ui/icons/Receipt';\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default [\r\n    {\r\n        label: 'CMR',\r\n        value: 'cmr',\r\n        icon: <ArticleIcon/>\r\n    }, {\r\n        label: 'Invoice',\r\n        value: 'invoice',\r\n        icon: <ReceiptIcon/>\r\n    }\r\n];","import countryCodes from \"../list_getters/countryCodes\";\r\n\r\nconst readInvoiceXML = (invoice, xml) => {\r\n\r\n   invoice.invoice_id = xml.getElementsByTagName('ExchangedDocument')[0].children[0].value;\r\n   invoice.date_of_document = xml.getElementsByTagName('IssueDateTime')[0].value;\r\n\r\n   invoice.tradeLineItems = [];\r\n\r\n   let tradeLineItems = xml.getElementsByTagName('IncludedTradeLineItem');\r\n   for (let i = 0; i <tradeLineItems.length; i++) {\r\n\r\n      let tradeLineItem = tradeLineItems[i];\r\n\r\n      let tradeLineItemToSave = {\r\n         NR: i + 1,\r\n         Name: tradeLineItem.children[2].children[0].value,\r\n         Description: tradeLineItem.children[2].children[1].value,\r\n         Net_weight: tradeLineItem.children[2].children[2].value,\r\n         Gross_weight: tradeLineItem.children[2].children[3].value,\r\n         Class_code: tradeLineItem.children[2].children[4].children[0].value,\r\n         Origin_country: countryCodes.getCountryWithCodeByCode(tradeLineItem.children[2].children[5].children[0].value),\r\n         Charge_amount: tradeLineItem.children[0].children[0].children[0].value,\r\n         Basis_quantity: tradeLineItem.children[0].children[0].children[1].value,\r\n         Billed_quantity: tradeLineItem.children[1].children[0].value,\r\n         Total_amount: tradeLineItem.children[3].children[0].children[0].value,\r\n         Tax_total_amount: tradeLineItem.children[3].children[0].children[1].value,\r\n         Net_total_amount: tradeLineItem.children[3].children[0].children[2].value,\r\n      }\r\n\r\n      invoice.tradeLineItems.push(tradeLineItemToSave)\r\n\r\n   }\r\n   let seller = xml.getElementsByTagName('Seller')[0];\r\n\r\n\r\n   invoice.seller_id = seller.children[0].value;\r\n   invoice.seller_name = seller.children[1].value;\r\n   invoice.seller_language_code = seller.children[2].value;\r\n   invoice.seller_tax_id = seller.children[5].children[0].value;\r\n   invoice.seller_tax_type_code = seller.children[5].children[1].children[0].value;\r\n   invoice.seller_person_name = seller.children[3].children[0].value;\r\n   invoice.seller_complete_number = seller.children[3].children[1].children[0].value;\r\n   invoice.seller_email = seller.children[3].children[2].children[0].value;\r\n   invoice.seller_postcode = seller.children[4].children[0].value;\r\n   invoice.seller_street_name = seller.children[4].children[1].value;\r\n   invoice.seller_city_name = seller.children[4].children[2].value;\r\n   invoice.seller_country_code = seller.children[4].children[3].value;\r\n   invoice.seller_country_subdivision_name = seller.children[4].children[5].value;\r\n\r\n   let buyer = xml.getElementsByTagName('Buyer')[0];\r\n\r\n   invoice.buyer_id = buyer.children[0].value;\r\n   invoice.buyer_name = buyer.children[1].value;\r\n   invoice.buyer_language_code = buyer.children[2].value;\r\n   invoice.buyer_tax_id = buyer.children[5].children[0].value;\r\n   invoice.buyer_tax_type_code = buyer.children[5].children[1].children[0].value;\r\n   invoice.buyer_person_name = buyer.children[3].children[0].value;\r\n   invoice.buyer_complete_number = buyer.children[3].children[1].children[0].value;\r\n   invoice.buyer_email = buyer.children[3].children[2].children[0].value;\r\n   invoice.buyer_postcode = buyer.children[4].children[0].value;\r\n   invoice.buyer_street_name = buyer.children[4].children[1].value;\r\n   invoice.buyer_city_name = buyer.children[4].children[2].value;\r\n   invoice.buyer_country_code = buyer.children[4].children[3].value;\r\n   invoice.buyer_country_subdivision_name = buyer.children[4].children[5].value;\r\n\r\n   let relatedConsignment = xml.getElementsByTagName('RelatedConsignment')[0];\r\n   invoice.gross_weight = relatedConsignment.children[0].value;\r\n   invoice.net_weight = relatedConsignment.children[1].value\r\n   invoice.package_quantity = relatedConsignment.children[2].value\r\n   invoice.transport_means_id = relatedConsignment.children[3].children[0].children[0].value\r\n\r\n   invoice.occurrence_date_time = xml.getElementsByTagName('OccurenceDateTime')[0].value;\r\n   invoice.due_payable_amount = xml.getElementsByTagName('DuePayableAmount')[0].value;\r\n   invoice.invoice_currency_code = xml.getElementsByTagName('InvoiceCurrencyCode')[0].value;\r\n   invoice.ibanID = xml.getElementsByTagName('IBANID')[0].value;\r\n   invoice.exemption_reason_code = xml.getElementsByTagName('ExemptionReasonCode')[0].value;\r\n   invoice.account_name = xml.getElementsByTagName('PayeeCreditorFinancialAccount')[0].children[1].value;\r\n   invoice.payment_term_description = xml.getElementsByTagName('PaymentTerms')[0].children[0].value;\r\n\r\n\r\n\r\n\r\n   // console.log(\"tradeLineItems \",tradeLineItems)\r\n};\r\n\r\nexport default readInvoiceXML;","import XMLParser from 'react-xml-parser';\r\nimport defaultData from '../../config/consts/defaultDataConst'\r\nimport readInvoiceXML from \"./readInvoiceXML\";\r\nimport xml from \"xml\";\r\n\r\nfunction readXML(fileContent, xmlType) {\r\n    let xml = new XMLParser().parseFromString(fileContent);\r\n\r\n\r\n    switch (xmlType) {\r\n        case 'invoice':\r\n            let invoice = defaultData.invoice;\r\n\r\n            readInvoiceXML(invoice, xml);\r\n            return invoice;\r\n\r\n    }\r\n    return defaultData.invoice\r\n\r\n}\r\n\r\n// A function to assign the references on different elements\r\n// function makeReferences(data) {\r\n//     data.health.illList.map(el => {\r\n//         let {NR, crewPassenger} = el;\r\n//         if (crewPassenger === 'Crew') {\r\n//             let crewItem = data.crew.rows.find(item => item.NR === NR);\r\n//             if (!crewItem) {\r\n//                 return el;\r\n//             }\r\n//             el.firstName = crewItem.Given_name;\r\n//             el.familyName = crewItem.Family_name;\r\n//         } else if (crewPassenger === 'Passenger') {\r\n//             let passengerItem = data.passengers.rows.find(item => item.NR === NR);\r\n//             if (!passengerItem) {\r\n//                 return el;\r\n//             }\r\n//             el.firstName = passengerItem.Given_name;\r\n//             el.familyName = passengerItem.Family_name;\r\n//         }\r\n//\r\n//         return el;\r\n//     })\r\n// }\r\n\r\nexport default readXML\r\n\r\n","import readXlsxFile from 'read-excel-file'\r\nimport readXLSPort from \"./readXLSPort\";\r\nimport readXLSCrew from \"./readXLSCrew\";\r\nimport readXLSPassengers from \"./readXLSPassengers\"\r\nimport readXLSShip from \"./readXLSShip\";\r\nimport readXLSVoyage from \"./readXLSVoyage\";\r\nimport readXLSHealth from './readXLSHealth'\r\nimport readXLSShipStores from \"./readXLSShipStores\";\r\nimport readXLSSecurity from \"./readXLSSecurity\";\r\nimport readXLSCargo from \"./readXLSCargo\";\r\nimport readXLSWaste from \"./readXLSWaste\";\r\n\r\nfunction readXLS(files, setOpenErrorDialog, onSave) {\r\n\r\n    if (!files || files.length === 0) return {};\r\n\r\n    for (let i = 0; i < files.length; i++) {\r\n        //store to promises\r\n\r\n        readXlsxFile(files[i]).then((rows) => {\r\n            try {\r\n                let name = rows[0][0].toLowerCase();\r\n\r\n                console.log('EXCEL', rows);\r\n\r\n                if (name === \"port information\") {\r\n                    readXLSPort(files[i], onSave)\r\n                } else if (name === \"crew list\") {\r\n                    readXLSCrew(files[i], onSave);\r\n                } else if (name === \"ship information\") {\r\n                    readXLSShip(files[i], onSave);\r\n                } else if (name === \"passenger list\") {\r\n                    readXLSPassengers(files[i], onSave);\r\n                } else if (name === \"voyage information\") {\r\n                    readXLSVoyage(files[i], onSave);\r\n                } else if (name === \"maritime declaration of health\") {\r\n                    readXLSHealth(files[i], onSave);\r\n                } else if (name === \"ship stores\") {\r\n                    readXLSShipStores(files[i], onSave);\r\n                } else if (name === \"security information\") {\r\n                    readXLSSecurity(files[i], onSave);\r\n                } else if (name === \"cargo consignment\") {\r\n                    readXLSCargo(files[i], onSave);\r\n                } else if (name === \"waste information\") {\r\n                    readXLSWaste(files[i], onSave);\r\n                }\r\n            } catch (e) {\r\n                setOpenErrorDialog({\r\n                    open: true, error: {\r\n                        title: 'Error while reading Excel file',\r\n                        text: 'The file is most likely broken or empty.' +\r\n                            'Developer console can say a little more about the error.'\r\n                    }\r\n                })\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport default readXLS;","import React from \"react\";\r\nimport ReactDataGrid from 'react-data-grid';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {Editors} from 'react-data-grid-addons';\r\nimport datePicker from \"../pickers/datePicker\";\r\nimport countryCodes from \"../../functions/list_getters/countryCodes\";\r\nimport ListOfPorts from '../../config/JSON/listOfPorts'\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\nconst {DropDownEditor} = Editors;\r\n\r\nconst styles = (theme) => ({\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n            width: '25ch',\r\n        },\r\n    },\r\n});\r\n\r\nconst genders = [\"(...)\", 'Male', 'Female']\r\nconst GendersEditor = <DropDownEditor options={genders}/>;\r\n\r\nconst idTypes = [\"(...)\", 'Musterbook', 'Passport', 'Residential permit', 'Picture id', 'Others']\r\nconst IDTypesEditor = <DropDownEditor options={idTypes}/>;\r\n\r\nconst countryCodesList = countryCodes.getCountriesWithCodes();\r\ncountryCodesList.unshift(\"(...)\")\r\nconst CountryCodesEditor = <DropDownEditor options={countryCodesList}/>;\r\n\r\nconst yesNo = [\"(...)\", 'Yes', 'No']\r\nconst TransitEditor = <DropDownEditor options={yesNo}/>;\r\n\r\nconst ports = [\"(...)\"];\r\nListOfPorts.map((port) =>\r\n    ports.push(port.code + ' - ' + port.countryCode + ' - ' + port.name)\r\n);\r\nconst PortEditor = <DropDownEditor options={ports}/>;\r\n\r\n\r\nconst columns = [\r\n    {key: \"NR\", name: \"NR\", editable: true, width: 50},\r\n    {key: \"Family_name\", name: \"Family name\", editable: true, width: 120},\r\n    {key: \"Given_name\", name: \"Given name\", editable: true, width: 120},\r\n    {key: \"Gender\", name: \"Gender\", editable: true, width: 80, editor: GendersEditor},\r\n    {key: \"Nationality\", name: \"Nationality\", editable: true, editor: CountryCodesEditor, width: 100},\r\n    {key: \"Country_of_birth\", name: \"Country of birth\", editable: true, editor: CountryCodesEditor, width: 120},\r\n    {key: \"Place_of_birth\", name: \"Place of birth\", editable: true, width: 120},\r\n    {key: \"date_of_birth\", name: \"Date of birth\", editable: true, editor: datePicker, width: 120},\r\n    {key: \"ID_type\", name: \"ID type\", editable: true, width: 80, editor: IDTypesEditor},\r\n    {key: \"ID_document_number\", name: \"ID document number\", editable: true, width: 150},\r\n    {\r\n        key: \"Issuing_state_of_identity_document\",\r\n        name: \"Issuing state of identity document\",\r\n        editable: true,\r\n        editor: datePicker,\r\n        width: 250\r\n    },\r\n    {\r\n        key: \"Expiry_date_of_identity_document\",\r\n        name: \"Expiry date of identity document\",\r\n        editable: true,\r\n        editor: datePicker,\r\n        width: 250\r\n    },\r\n    {key: \"Port_of_embarkation\", name: \"Port of embarkation\", editable: true, width: 150, editor: PortEditor},\r\n    {key: \"Port_of_disembarkation\", name: \"Port of disembarkation\", editable: true, width: 170, editor: PortEditor},\r\n    {key: \"Transit\", name: \"Transit\", editable: true, width: 80, editor: TransitEditor},\r\n    {key: \"Visa_Residence_permit_number\", name: \"Visa/Residence permit number\", editable: true, width: 250},\r\n];\r\n\r\nfunction PassengersForm({data, updateData}) {\r\n    function addRow() {\r\n        let number = data.rows.length + 1\r\n        let row = {NR: number}\r\n        data.rows.push(row);\r\n        updateData(data)\r\n    }\r\n\r\n    function deleteRow() {\r\n        data.rows.pop();\r\n        updateData(data)\r\n    }\r\n\r\n\r\n    function onGridRowsUpdated({fromRow, toRow, updated}) {\r\n\r\n        const rows = data.rows.slice();\r\n        for (let i = fromRow; i <= toRow; i++) {\r\n            rows[i] = {...rows[i], ...updated};\r\n        }\r\n        data.rows = rows;\r\n        updateData(data)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Typography variant=\"h3\" component=\"h3\" gutterBottom>\r\n                Passenger list\r\n            </Typography>\r\n            <ReactDataGrid\r\n                columns={columns}\r\n                rowGetter={i => data.rows[i]}\r\n                rowsCount={data.rows.length}\r\n                onGridRowsUpdated={onGridRowsUpdated}\r\n                enableCellSelect={true}\r\n            />\r\n            <Button startIcon={<AddIcon/>} variant=\"primary\" onClick={addRow}>Add row</Button>\r\n            <Button startIcon={<DeleteOutlineIcon/>} variant=\"primary\" onClick={deleteRow}>Delete row</Button>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\n\r\nexport default withStyles(styles)(PassengersForm);","import listOfCountries from \"../../data/countries\";\r\n\r\nconst generateInvoice = (invoice) => {\r\n\r\n    let SupplyChainTradeTransaction = [];\r\n    for (let i = 0; i < invoice.tradeLineItems.length; i++) {\r\n        let tradeLineItem = invoice.tradeLineItems[i];\r\n        let IncludedTradeLineItem = [];\r\n\r\n        let TradeProduct = [];\r\n        TradeProduct.push({Name: tradeLineItem.Name});\r\n        TradeProduct.push({Description: tradeLineItem.Description});\r\n        TradeProduct.push({NetWeight: tradeLineItem.Net_weight});\r\n        TradeProduct.push({GrossWeight: tradeLineItem.Gross_weight});\r\n        TradeProduct.push({Classification: [{ClassCode:tradeLineItem.Class_code}]});\r\n\r\n        let originCountryCode = '';\r\n        if (tradeLineItem.Origin_country && tradeLineItem.Origin_country !== '') {\r\n            let originCountry = tradeLineItem.Origin_country.split('- ');\r\n            originCountryCode = originCountry[1];\r\n        }\r\n\r\n        TradeProduct.push({OriginCountry: [{Code:originCountryCode}]});\r\n\r\n        IncludedTradeLineItem.push({LineTradeAgreement: [\r\n                {ProductGrossPrice:[\r\n                    {ChargeAmount:tradeLineItem.Charge_amount},\r\n                    {BasisQuantity:tradeLineItem.Basis_quantity}\r\n                    ]}\r\n\r\n            ]});\r\n\r\n        IncludedTradeLineItem.push({LineTradeDelivery: [{BilledQuantity:tradeLineItem.Billed_quantity}]})\r\n        IncludedTradeLineItem.push({TradeProduct: TradeProduct})\r\n        IncludedTradeLineItem.push({LineTradeSettlement: [\r\n                {MonetarySummation:[\r\n                        {LineTotalAmount:tradeLineItem.Total_amount},\r\n                        {TaxTotalAmount:tradeLineItem.Tax_total_amount},\r\n                        {NetLineTotalAmount:tradeLineItem.Net_total_amount}\r\n                    ]}\r\n\r\n            ]});\r\n        SupplyChainTradeTransaction.push({IncludedTradeLineItem: IncludedTradeLineItem})\r\n\r\n    }\r\n\r\n    let HeaderTradeAgreement = [];\r\n\r\n    let Seller = [];\r\n\r\n    Seller.push({ID: invoice.seller_id});\r\n    Seller.push({Name: invoice.seller_name});\r\n    Seller.push({LanguageCode: invoice.seller_language_code});\r\n\r\n    Seller.push({DefinedContractDetails: [\r\n            {PersonName:invoice.seller_person_name},\r\n            {MobileTelephone:[\r\n                    {CompleteNumber: invoice.seller_complete_number},\r\n                ]},\r\n            {EmailAddress: [\r\n                    {URI: invoice.seller_email}\r\n                ]}\r\n        ]});\r\n\r\n    Seller.push({PostalAddress: [\r\n            {Postcode: invoice.seller_postcode},\r\n            {StreetName: invoice.seller_street_name},\r\n            {CityName: invoice.seller_city_name},\r\n            {CountryCode: invoice.seller_country_code},\r\n            {ContryName: listOfCountries[invoice.seller_country_code]},\r\n            {CountrySubDivisionName: invoice.seller_country_subdivision_name},\r\n        ]});\r\n\r\n    Seller.push({TaxRegistration:[\r\n            {ID:invoice.seller_tax_id},\r\n            {RegisteredTax:[\r\n                    {TypeCode:invoice.seller_tax_type_code},\r\n                ]}\r\n        ]});\r\n\r\n    let Buyer = [];\r\n\r\n    Buyer.push({ID: invoice.buyer_id});\r\n    Buyer.push({Name: invoice.buyer_name});\r\n    Buyer.push({LanguageCode: invoice.buyer_language_code});\r\n\r\n    Buyer.push({DefinedContractDetails: [\r\n            {PersonName:invoice.buyer_person_name},\r\n            {MobileTelephone:[\r\n                    {CompleteNumber: invoice.buyer_complete_number},\r\n                ]},\r\n            {EmailAddress: [\r\n                    {URI: invoice.buyer_email}\r\n                ]}\r\n        ]});\r\n\r\n    Buyer.push({PostalAddress: [\r\n            {Postcode: invoice.buyer_postcode},\r\n            {StreetName: invoice.buyer_street_name},\r\n            {CityName: invoice.buyer_city_name},\r\n            {CountryCode: invoice.buyer_country_code},\r\n            {ContryName: listOfCountries[invoice.buyer_country_code]},\r\n            {CountrySubDivisionName: invoice.buyer_country_subdivision_name},\r\n        ]});\r\n    Buyer.push({TaxRegistration:[\r\n            {ID:invoice.buyer_tax_id},\r\n            {RegisteredTax:[\r\n                    {TypeCode:invoice.buyer_tax_type_code},\r\n                ]}\r\n        ]});\r\n\r\n    HeaderTradeAgreement.push({Seller:Seller});\r\n    HeaderTradeAgreement.push({Buyer:Buyer});\r\n    SupplyChainTradeTransaction.push({HeaderTradeAgreement:HeaderTradeAgreement})\r\n\r\n    let HeaderTradeDelivery = [];\r\n    HeaderTradeDelivery.push({RelatedConsignment:[\r\n            {GrossWeight:invoice.gross_weight},\r\n            {NetWeight:invoice.net_weight},\r\n            {PackageQuantity:invoice.package_quantity},\r\n            {SpecifiedTransportMovement:[\r\n                    {UsedTransportMeans:[{ID:invoice.transport_means_id}]}]}\r\n        ]});\r\n    HeaderTradeDelivery.push({ActualDespatchEvent:[{\r\n            OccurenceDateTime:invoice.occurrence_date_time\r\n        }]});\r\n\r\n\r\n    SupplyChainTradeTransaction.push({HeaderTradeDelivery:HeaderTradeDelivery});\r\n\r\n    let HeaderTradeSettlement = [];\r\n\r\n    HeaderTradeSettlement.push({DuePayableAmount:invoice.due_payable_amount})\r\n    HeaderTradeSettlement.push({InvoiceCurrencyCode:invoice.invoice_currency_code})\r\n    HeaderTradeSettlement.push({PaymentMeans:[\r\n            {PayeeCreditorFinancialAccount:[\r\n                    {IBANID: invoice.ibanID},\r\n                    {Name: invoice.account_name}\r\n                ]}\r\n            ]});\r\n    HeaderTradeSettlement.push({TradeTax:[\r\n            {ExemptionReasonCode:invoice.exemption_reason_code}\r\n        ]});\r\n    HeaderTradeSettlement.push({PaymentTerms:[\r\n            {Description:invoice.payment_term_description}\r\n        ]});\r\n\r\n    SupplyChainTradeTransaction.push({HeaderTradeSettlement:HeaderTradeSettlement});\r\n\r\n\r\n    let invoiceXML = {\r\n        CIIMessage:[{\r\n            ExchangedDocument: [\r\n                {ID: invoice.invoice_id},\r\n                {IssueDateTime: invoice.date_of_document},\r\n                ],\r\n\r\n        },\r\n            {SupplyChainTradeTransaction:SupplyChainTradeTransaction},\r\n\r\n        ]\r\n    }\r\n\r\n    return invoiceXML;\r\n};\r\n\r\nexport const checkRequiredInvoice = (errors, invoice) => {\r\n    errors.Invoice = {};\r\n    if (!invoice.invoice_id) errors.Invoice[\"ID\"] = true;\r\n    if (!invoice.date_of_document) errors.Invoice[\"Date of document\"] = true;\r\n}\r\n\r\nexport default generateInvoice;","import listOfCountries from \"../../data/countries\";\r\n\r\nconst generateCMR = (cmr) => {\r\n    console.log(\"generating cmr\")\r\n\r\n    let eCMRHeaderDetails = [];\r\n\r\n    eCMRHeaderDetails.push({eCMRID:cmr.cmr_id});\r\n    eCMRHeaderDetails.push({eCMRIssueDate:cmr.date_of_document});\r\n    eCMRHeaderDetails.push({ContractualRemarks:cmr.remarks});\r\n    eCMRHeaderDetails.push({AdditionalParticularNote:[\r\n            {ContentText:cmr.additional_note_1}\r\n        ]});\r\n    eCMRHeaderDetails.push({AdditionalParticularNote:[\r\n            {ContentText:cmr.additional_note_2}\r\n        ]});\r\n    eCMRHeaderDetails.push({AdditionalParticularNote:[\r\n            {ContentText:cmr.additional_note_3}\r\n        ]});\r\n    eCMRHeaderDetails.push({IssueLocation:[\r\n            {ContryName: listOfCountries[cmr.established_country_code]},\r\n            {CountryCode: cmr.established_country_code},\r\n        ]});\r\n\r\n\r\n    let RoadConsignment = [];\r\n    RoadConsignment.push({GrossWeight:cmr.gross_weight});\r\n    RoadConsignment.push({GrossVolume:cmr.volume});\r\n    RoadConsignment.push({CODAmount:cmr.cod_amount});\r\n\r\n    let Sender = [];\r\n\r\n    Sender.push({ID: cmr.sender_id});\r\n    Sender.push({Name: cmr.sender_name});\r\n    Sender.push({LanguageCode: cmr.sender_language_code});\r\n\r\n    Sender.push({DefinedContractDetails: [\r\n            {PersonName:cmr.sender_person_name},\r\n            {MobileTelephone:[\r\n                    {CompleteNumber: cmr.sender_complete_number},\r\n                ]},\r\n            {EmailAddress: [\r\n                    {URI: cmr.sender_email}\r\n                ]}\r\n        ]});\r\n\r\n    Sender.push({PostalAddress: [\r\n            {Postcode: cmr.sender_postcode},\r\n            {StreetName: cmr.sender_street_name},\r\n            {CityName: cmr.sender_city_name},\r\n            {CountryCode: cmr.sender_country_code},\r\n            {ContryName: listOfCountries[cmr.sender_country_code]},\r\n            {CountrySubDivisionName: cmr.sender_country_subdivision_name},\r\n        ]});\r\n\r\n    Sender.push({TaxRegistration:[\r\n            {ID:cmr.sender_tax_id},\r\n            {RegisteredTax:[\r\n                    {TypeCode:cmr.sender_tax_type_code},\r\n                ]}\r\n        ]});\r\n\r\n    let Consignee = [];\r\n\r\n    Consignee.push({ID: cmr.consignee_id});\r\n    Consignee.push({Name: cmr.consignee_name});\r\n    Consignee.push({LanguageCode: cmr.consignee_language_code});\r\n\r\n    Consignee.push({DefinedContractDetails: [\r\n            {PersonName:cmr.consignee_person_name},\r\n            {MobileTelephone:[\r\n                    {CompleteNumber: cmr.consignee_complete_number},\r\n                ]},\r\n            {EmailAddress: [\r\n                    {URI: cmr.consignee_email}\r\n                ]}\r\n        ]});\r\n\r\n    Consignee.push({PostalAddress: [\r\n            {Postcode: cmr.consignee_postcode},\r\n            {StreetName: cmr.consignee_street_name},\r\n            {CityName: cmr.consignee_city_name},\r\n            {CountryCode: cmr.consignee_country_code},\r\n            {ContryName: listOfCountries[cmr.consignee_country_code]},\r\n            {CountrySubDivisionName: cmr.consignee_country_subdivision_name},\r\n        ]});\r\n    Consignee.push({TaxRegistration:[\r\n            {ID:cmr.consignee_tax_id},\r\n            {RegisteredTax:[\r\n                    {TypeCode:cmr.consignee_tax_type_code},\r\n                ]}\r\n        ]});\r\n\r\n    let Carrier = [];\r\n\r\n    Carrier.push({ID: cmr.carrier_id});\r\n    Carrier.push({Name: cmr.carrier_name});\r\n    Carrier.push({LanguageCode: cmr.carrier_language_code});\r\n\r\n    Carrier.push({DefinedContractDetails: [\r\n            {PersonName:cmr.carrier_person_name},\r\n            {MobileTelephone:[\r\n                    {CompleteNumber: cmr.carrier_complete_number},\r\n                ]},\r\n            {EmailAddress: [\r\n                    {URI: cmr.carrier_email}\r\n                ]}\r\n        ]});\r\n\r\n    Carrier.push({PostalAddress: [\r\n            {Postcode: cmr.carrier_postcode},\r\n            {StreetName: cmr.carrier_street_name},\r\n            {CityName: cmr.carrier_city_name},\r\n            {CountryCode: cmr.carrier_country_code},\r\n            {ContryName: listOfCountries[cmr.carrier_country_code]},\r\n            {CountrySubDivisionName: cmr.carrier_country_subdivision_name},\r\n        ]});\r\n\r\n    Carrier.push({TaxRegistration:[\r\n            {ID:cmr.carrier_tax_id},\r\n            {RegisteredTax:[\r\n                    {TypeCode:cmr.carrier_tax_type_code},\r\n                ]}\r\n        ]});\r\n\r\n    let SubsequentCarrier = [];\r\n\r\n    SubsequentCarrier.push({ID: cmr.sub_carrier_id});\r\n    SubsequentCarrier.push({Name: cmr.sub_carrier_name});\r\n    SubsequentCarrier.push({LanguageCode: cmr.sub_carrier_language_code});\r\n\r\n    SubsequentCarrier.push({DefinedContractDetails: [\r\n            {PersonName:cmr.sub_carrier_person_name},\r\n            {MobileTelephone:[\r\n                    {CompleteNumber: cmr.sub_carrier_complete_number},\r\n                ]},\r\n            {EmailAddress: [\r\n                    {URI: cmr.sub_carrier_email}\r\n                ]}\r\n        ]});\r\n\r\n    SubsequentCarrier.push({PostalAddress: [\r\n            {Postcode: cmr.sub_carrier_postcode},\r\n            {StreetName: cmr.sub_carrier_street_name},\r\n            {CityName: cmr.sub_carrier_city_name},\r\n            {CountryCode: cmr.sub_carrier_country_code},\r\n            {ContryName: listOfCountries[cmr.sub_carrier_country_code]},\r\n            {CountrySubDivisionName: cmr.sub_carrier_country_subdivision_name},\r\n        ]});\r\n    SubsequentCarrier.push({TaxRegistration:[\r\n            {ID:cmr.sub_carrier_tax_id},\r\n            {RegisteredTax:[\r\n                    {TypeCode:cmr.sub_carrier_tax_type_code},\r\n                ]}\r\n        ]});\r\n\r\n\r\n    RoadConsignment.push({Sender:Sender});\r\n    RoadConsignment.push({Consignee:Consignee});\r\n    RoadConsignment.push({Carrier:Carrier});\r\n    RoadConsignment.push({SubsequentCarrier:SubsequentCarrier});\r\n\r\n    for (let i = 0; i <cmr.documentsAttached.length ; i++) {\r\n        let document = cmr.documentsAttached[i];\r\n\r\n        let documentTypeCode = ''\r\n        if (document.TypeCode && document.TypeCode !== '') {\r\n            let typeCode = document.TypeCode.split('- ');\r\n            documentTypeCode = typeCode[1];\r\n        }\r\n        RoadConsignment.push({AssociatedDocument:[\r\n                {TypeCode:documentTypeCode},\r\n                {ID:document.NR},\r\n                {Remarks:document.Remarks},\r\n                {FormattedIssueDateTime:document.Date},\r\n            ]})\r\n\r\n    }\r\n\r\n    RoadConsignment.push({\r\n        ConsigneeDeliveryEvent:[\r\n            {ActualOccurrenceDateTime:cmr.date_of_delivery},\r\n            {ActualOccurrenceLocation:[\r\n                    {Name:cmr.delivery_place_name},\r\n                    {CountryCode: cmr.delivery_country_code},\r\n                    {CountryName: listOfCountries[cmr.delivery_country_code]},\r\n                ]}\r\n        ]\r\n    });\r\n\r\n    RoadConsignment.push({\r\n        CarrierPickUpEvent:[\r\n            {ActualOccurrenceDateTime:cmr.date_of_pickup},\r\n            {ActualOccurrenceLocation:[\r\n                    {Name:cmr.pickup_location_name},\r\n                    {CountryCode: cmr.pickup_country_code},\r\n                    {CountryName: listOfCountries[cmr.pickup_country_code]},\r\n                ]}\r\n        ]\r\n    });\r\n\r\n    for (let i = 0; i <cmr.consignment.length ; i++) {\r\n        let consignment_item = cmr.consignment[i];\r\n        RoadConsignment.push({IncludedConsignmentItem: [\r\n                {SequenceNumber:consignment_item.NR},\r\n                {GrossWeight:consignment_item.Gross_weight},\r\n                {GrossVolume:consignment_item.Volume},\r\n                {GoodsDescription:[{IdentificationText:consignment_item.Nature_of_goods}]}\r\n            ]})\r\n    }\r\n\r\n    for (let i = 0; i <cmr.consignment.length ; i++) {\r\n        let consignment_item = cmr.consignment[i];\r\n        RoadConsignment.push({TransportPackage: [\r\n                {ItemQuantity:consignment_item.Number_of_packages},\r\n                {TypeCode:consignment_item.Method_of_pa—Åking},\r\n                {ShippingMarks:[{MarkingText:consignment_item.Marks_and_Nos}]}\r\n            ]})\r\n\r\n    }\r\n\r\n    RoadConsignment.push({TransportDetails:[\r\n            {StageCode:cmr.truck},\r\n            {ModeCode:cmr.trailer},\r\n        ]});\r\n\r\n    RoadConsignment.push({ConsignirProvidedRegulatoryFormalitiesInstructions:[\r\n            {Description:cmr.instruction},\r\n        ]});\r\n\r\n\r\n    let cmrXML = {\r\n        MMTCCBDAeCMRMessage:[\r\n            {eCMRHeaderDetails:eCMRHeaderDetails},\r\n            {RoadConsignment:RoadConsignment},\r\n\r\n        ]\r\n    }\r\n\r\n    return cmrXML;\r\n\r\n};\r\n\r\nexport const checkRequiredCMR = (errors, cmr) => {\r\n    errors.CMR = {};\r\n    // if (!cmr.invoice_id) errors.Invoice[\"ID\"] = true;\r\n    // if (!cmr.date_of_document) errors.Invoice[\"Date of document\"] = true;\r\n}\r\n\r\nexport default generateCMR;","import xml from 'xml'\r\nimport generateInvoice, {checkRequiredInvoice} from \"./generateInvoice\";\r\nimport _ from 'underscore'\r\nimport generateCMR from \"./generateCMR\";\r\n\r\nfunction createXML(data, onError, checkForErrors,xmlType) {\r\n    if(checkForErrors){\r\n        const errors = checkRequiredFields(data);\r\n        if (!_.isEmpty(errors)) {\r\n            onError(errors);\r\n            return;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    switch (xmlType) {\r\n        case 'invoice':\r\n            let invoiceXML = generateInvoice(data.invoice)\r\n            let xmlValueInvoice = xml([invoiceXML], {declaration: true});\r\n            downloadXMLfile(xmlValueInvoice);\r\n        case 'cmr':\r\n            let cmrXML = generateCMR(data.cmr)\r\n            let xmlValueCMR = xml([cmrXML], {declaration: true});\r\n            downloadXMLfile(xmlValueCMR);\r\n\r\n    }\r\n}\r\n\r\nfunction checkRequiredFields(data) {\r\n    console.log(\"checking for errors\")\r\n    const errors = {};\r\n    checkRequiredInvoice(errors, data.invoice);\r\n\r\n\r\n    //deleting empty objects\r\n    Object.keys(errors).forEach(el => {\r\n        if (_.isEmpty(errors[el])) delete errors[el];\r\n    })\r\n\r\n    return errors;\r\n}\r\n\r\nlet downloadXMLfile = (xmlValue) => {\r\n    let data = xmlValue;\r\n    let filename = `XML config ${new Date()}.xml`\r\n    let file = new Blob([data], /*{type: type}*/);\r\n\r\n    let a = document.createElement(\"a\"),\r\n        url = URL.createObjectURL(file);\r\n    a.href = url;\r\n    a.download = filename;\r\n    document.body.appendChild(a);\r\n    a.click();\r\n    setTimeout(function () {\r\n        document.body.removeChild(a);\r\n        window.URL.revokeObjectURL(url);\r\n    }, 100);\r\n}\r\n\r\nexport default createXML;","let units = [\"[Unit]\", \"KGM\", \"TNE\",\"M3\",\"PCS\",\"LTR\"]\r\nexport default units","import {makeStyles} from \"@material-ui/core/styles\";\r\nimport React, {useState} from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport ReactDataGrid from \"react-data-grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport datePicker from \"../pickers/datePicker\";\r\nimport {Editors} from 'react-data-grid-addons';\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\n\r\nconst {DropDownEditor} = Editors;\r\n\r\nconst illGridRef = React.createRef();\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 200,\r\n    },\r\n    formControlNoMargin: {\r\n        minWidth: 225,\r\n        height: 85\r\n    },\r\n    selectControl: {\r\n        height: 85\r\n    },\r\n    labelControl: {\r\n        width: \"90%\"\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    topMargin: {\r\n        marginTop: theme.spacing(5)\r\n    }\r\n}));\r\n\r\nconst HealthFormComponent = ({data, updateData, crewData, passengerData}) => {\r\n\r\n    const classes = useStyles();\r\n    const [openAlert, setOpenAlert] = useState({open: false, error: \"\", severity: 'error'})\r\n    const marginTop = {marginTop: '30px'};\r\n    const widthOfLongQuestion = {width: '65%'}\r\n\r\n    return <>\r\n        <Typography variant=\"h3\" component=\"h3\" gutterBottom>\r\n            Maritime Declaration of Health\r\n        </Typography>\r\n\r\n        <Typography style={marginTop} variant=\"h5\" classes={classes.topMargin} component=\"h5\" gutterBottom>\r\n            Health questions\r\n        </Typography>\r\n\r\n        <Grid container style={marginTop} classes={classes.topMargin} justify=\"space-between\">\r\n            <div style={widthOfLongQuestion}>\r\n                <FormControl\r\n                    variant=\"outlined\"\r\n                    className={classes.formControlNoMargin}\r\n                    fullWidth\r\n                >\r\n                    <InputLabel className={classes.labelControl} id=\"enum-1-label\">(1) Has any person died on board\r\n                        during the voyage otherwise than as a\r\n                        result of accident? </InputLabel>\r\n                    <Select\r\n                        labelId=\"enum-1-label\"\r\n                        value={data.enum1}\r\n                        className={classes.selectControl}\r\n                        onChange={(e) => {\r\n                            updateData({enum1: e.target.value})\r\n                        }}\r\n                    >\r\n                        <MenuItem value={'Yes'}>Yes</MenuItem>\r\n                        <MenuItem value={'No'}>No</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </div>\r\n            <TextField\r\n                label=\"Total no. of death\"\r\n                value={data.nrOfDeath}\r\n                style={{marginRight: \"30px\"}}\r\n                onChange={(e) =>\r\n                    updateData({nrOfDeath: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n        </Grid>\r\n\r\n        <Grid container style={marginTop} classes={classes.topMargin} justify=\"space-between\">\r\n            <div style={widthOfLongQuestion}>\r\n                <FormControl\r\n                    style={{height: \"85px\"}}\r\n                    variant=\"outlined\"\r\n                    className={classes.formControlNoMargin}\r\n                    fullWidth\r\n                >\r\n                    <InputLabel className={classes.labelControl} id=\"enum-2-label\">(2) Is there on board or has there\r\n                        been during the international\r\n                        voyage any case of disease which you suspect to be of an infectious nature?</InputLabel>\r\n                    <Select\r\n                        className={classes.selectControl}\r\n                        labelId=\"enum-2-label\"\r\n                        value={data.enum2}\r\n                        onChange={(e) => {\r\n                            updateData({enum2: e.target.value})\r\n                        }}\r\n                    >\r\n                        <MenuItem value={'Yes'}>Yes</MenuItem>\r\n                        <MenuItem value={'No'}>No</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </div>\r\n        </Grid>\r\n\r\n        <Grid container style={marginTop} classes={classes.topMargin} justify=\"space-between\">\r\n            <div style={widthOfLongQuestion}>\r\n                <FormControl\r\n                    variant=\"outlined\"\r\n                    className={classes.formControlNoMargin}\r\n                    fullWidth\r\n                >\r\n                    <InputLabel className={classes.labelControl} id=\"enum-3-label\">(3) Has the total number of ill\r\n                        passengers during the voyage been\r\n                        greater than normal/expected?</InputLabel>\r\n                    <Select\r\n                        className={classes.selectControl}\r\n                        labelId=\"enum-3-label\"\r\n                        value={data.enum3}\r\n                        onChange={(e) => {\r\n                            updateData({enum3: e.target.value})\r\n                        }}\r\n                    >\r\n                        <MenuItem value={'Yes'}>Yes</MenuItem>\r\n                        <MenuItem value={'No'}>No</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </div>\r\n            <TextField\r\n                label=\"How many ill persons?\"\r\n                value={data.nrOfIll}\r\n                style={{marginRight: \"30px\"}}\r\n                onChange={(e) =>\r\n                    updateData({nrOfIll: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n        </Grid>\r\n\r\n        <Grid container style={marginTop} classes={classes.topMargin} justify=\"space-between\">\r\n            <div style={widthOfLongQuestion}>\r\n                <FormControl\r\n                    variant=\"outlined\"\r\n                    className={classes.formControlNoMargin}\r\n                    fullWidth\r\n                >\r\n                    <InputLabel className={classes.labelControl} id=\"enum-4-label\">(4) Is there any ill person on board\r\n                        now?</InputLabel>\r\n                    <Select\r\n                        className={classes.selectControl}\r\n                        labelId=\"enum-4-label\"\r\n                        value={data.enum4}\r\n                        onChange={(e) => {\r\n                            updateData({enum4: e.target.value})\r\n                        }}\r\n                    >\r\n                        <MenuItem value={'Yes'}>Yes</MenuItem>\r\n                        <MenuItem value={'No'}>No</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </div>\r\n        </Grid>\r\n\r\n        <Grid container style={marginTop} classes={classes.topMargin} justify=\"space-between\">\r\n            <div style={widthOfLongQuestion}>\r\n                <FormControl\r\n                    variant=\"outlined\"\r\n                    className={classes.formControlNoMargin}\r\n                    fullWidth\r\n                >\r\n                    <InputLabel className={classes.labelControl} id=\"enum-5-label\">(5) Was a medical practitioner\r\n                        consulted?</InputLabel>\r\n                    <Select\r\n                        className={classes.selectControl}\r\n                        labelId=\"enum-5-label\"\r\n                        value={data.enum5}\r\n                        onChange={(e) => {\r\n                            updateData({enum5: e.target.value})\r\n                        }}\r\n                    >\r\n                        <MenuItem value={'Yes'}>Yes</MenuItem>\r\n                        <MenuItem value={'No'}>No</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </div>\r\n        </Grid>\r\n\r\n        <Grid container style={marginTop} classes={classes.topMargin} justify=\"space-between\">\r\n            <div style={widthOfLongQuestion}>\r\n                <FormControl\r\n                    variant=\"outlined\"\r\n                    className={classes.formControlNoMargin}\r\n                    fullWidth\r\n                >\r\n                    <InputLabel className={classes.labelControl} id=\"enum-6-label\">(6) Are you aware of any condition on\r\n                        board which may lead to\r\n                        infection or spread of disease?</InputLabel>\r\n                    <Select\r\n                        className={classes.selectControl}\r\n                        labelId=\"enum-6-label\"\r\n                        value={data.enum6}\r\n                        onChange={(e) => {\r\n                            updateData({enum6: e.target.value})\r\n                        }}\r\n                    >\r\n                        <MenuItem value={'Yes'}>Yes</MenuItem>\r\n                        <MenuItem value={'No'}>No</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </div>\r\n        </Grid>\r\n\r\n        <Grid container style={marginTop} classes={classes.topMargin} justify=\"space-between\">\r\n            <div style={widthOfLongQuestion}>\r\n                <FormControl\r\n                    variant=\"outlined\"\r\n                    className={classes.formControlNoMargin}\r\n                    fullWidth\r\n                >\r\n                    <InputLabel className={classes.labelControl} id=\"enum-7-label\">(7) Has any sanitary measure (e.g.\r\n                        quarantine, isolation, disinfection\r\n                        or decontamination) been applied on board?</InputLabel>\r\n                    <Select\r\n                        className={classes.selectControl}\r\n                        labelId=\"enum-7-label\"\r\n                        value={data.enum7}\r\n                        onChange={(e) => {\r\n                            updateData({enum7: e.target.value})\r\n                        }}\r\n                    >\r\n                        <MenuItem value={'Yes'}>Yes</MenuItem>\r\n                        <MenuItem value={'No'}>No</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </div>\r\n        </Grid>\r\n\r\n        <div style={{width: '470px', position: 'relative', marginTop: '30px'}}>\r\n            <ReactDataGrid\r\n                columns={[\r\n                    {key: \"type\", name: \"Type\", editable: true, width: 150},\r\n                    {key: \"place\", name: \"Place\", editable: true, width: 150},\r\n                    {key: \"date\", name: \"Date\", editable: true, editor: datePicker, width: 150}\r\n                ]}\r\n                rowGetter={i => data.sanitaryMeasures[i]}\r\n                rowsCount={data.sanitaryMeasures.length}\r\n                onGridRowsUpdated={({fromRow, toRow, updated}) => {\r\n                    const sanitaryMeasures = data.sanitaryMeasures.slice();\r\n                    for (let i = fromRow; i <= toRow; i++) {\r\n                        sanitaryMeasures[i] = {...sanitaryMeasures[i], ...updated};\r\n                    }\r\n                    updateData({sanitaryMeasures})\r\n                }}\r\n                enableCellSelect={true}\r\n            />\r\n            <Button startIcon={<AddIcon/>} variant=\"primary\" onClick={() => {\r\n                let sanitaryMeasures = data.sanitaryMeasures;\r\n                sanitaryMeasures.push({});\r\n                updateData({sanitaryMeasures})\r\n            }}>\r\n                Add row\r\n            </Button>\r\n            <Button startIcon={<DeleteOutlineIcon/>} variant=\"primary\" onClick={() => {\r\n                let sanitaryMeasures = data.sanitaryMeasures;\r\n                sanitaryMeasures.pop();\r\n                updateData({sanitaryMeasures});\r\n            }}>Delete row</Button>\r\n        </div>\r\n\r\n        <Grid container style={marginTop} classes={classes.topMargin} justify=\"space-between\">\r\n            <div style={widthOfLongQuestion}>\r\n                <FormControl\r\n                    variant=\"outlined\"\r\n                    className={classes.formControlNoMargin}\r\n                    fullWidth\r\n                >\r\n                    <InputLabel className={classes.labelControl} id=\"enum-8-label\">(8) have any stowaways been found on\r\n                        board?</InputLabel>\r\n                    <Select\r\n                        className={classes.selectControl}\r\n                        labelId=\"enum-8-label\"\r\n                        value={data.enum8}\r\n                        onChange={(e) => {\r\n                            updateData({enum8: e.target.value})\r\n                        }}\r\n                    >\r\n                        <MenuItem value={'Yes'}>Yes</MenuItem>\r\n                        <MenuItem value={'No'}>No</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </div>\r\n\r\n            <TextField\r\n                label=\"If yes, where did they join the ship (if known)?\"\r\n                margin={'normal'}\r\n                value={data.joinedStowaways}\r\n                style={{marginRight: \"30px\"}}\r\n                onChange={(e) => {\r\n                    let joinedStowaways = e.target.value;\r\n                    updateData({joinedStowaways})\r\n                }}\r\n                variant=\"outlined\"\r\n            />\r\n        </Grid>\r\n\r\n        <Grid container style={marginTop} classes={classes.topMargin} justify=\"space-between\">\r\n            <div style={widthOfLongQuestion}>\r\n                <FormControl\r\n                    variant=\"outlined\"\r\n                    className={classes.formControlNoMargin}\r\n                    fullWidth\r\n                >\r\n                    <InputLabel className={classes.labelControl} id=\"enum-9-label\">(9) Is there a sick animal or pet on\r\n                        board?</InputLabel>\r\n                    <Select\r\n                        className={classes.selectControl}\r\n                        labelId=\"enum-9-label\"\r\n                        value={data.enum9}\r\n                        onChange={(e) => {\r\n                            updateData({enum9: e.target.value})\r\n                        }}\r\n                    >\r\n                        <MenuItem value={'Yes'}>Yes</MenuItem>\r\n                        <MenuItem value={'No'}>No</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </div>\r\n        </Grid>\r\n\r\n        <Typography style={marginTop} variant=\"p\" classes={classes.topMargin} component=\"p\" gutterBottom>\r\n            Note: In the absence of a surgeon, the master should regard the following symptoms as grounds for suspecting\r\n            the existence of a disease of an infectious nature:<br/>\r\n            (a) fever, persisting for several days or accompanied by (i) prostration; (ii) decreased consciousness;\r\n            (iii) glandular swelling; (iv) jaundice; (v) cough or shortness of breath; (vi) unusual bleeding; or (vii)\r\n            paralysis.<br/>\r\n            (b) with or without fever: (i) any acute skin rash or eruption; (ii) severe vomiting (other than sea\r\n            sickness); (iii) severediarrhoea; or (iv) recurrent convulsions.\r\n        </Typography>\r\n\r\n        {/*The Alerts*/}\r\n        <Collapse in={openAlert.open} style={{marginTop: '30px'}}>\r\n            <Alert\r\n                severity={openAlert.severity}\r\n                action={\r\n                    <IconButton\r\n                        aria-label=\"close\"\r\n                        color=\"inherit\"\r\n                        size=\"small\"\r\n                        onClick={() => {\r\n                            setOpenAlert({open: false, error: \"\", severity: 'error'});\r\n                        }}\r\n                    >\r\n                        <CloseIcon fontSize=\"inherit\"/>\r\n                    </IconButton>\r\n                }\r\n            >\r\n                {openAlert.error}\r\n            </Alert>\r\n        </Collapse>\r\n\r\n        <div style={{marginTop: '30px'}}>\r\n            <ReactDataGrid\r\n                key={Math.random()}\r\n                ref={illGridRef}\r\n                columns={[\r\n                    {key: \"NR\", name: \"NR\", editable: true, width: 40},\r\n                    {\r\n                        key: \"crewPassenger\",\r\n                        name: \"Crew or passenger\",\r\n                        editable: true,\r\n                        width: 145,\r\n                        editor: <DropDownEditor options={['(...)', 'Crew', 'Passenger']}/>\r\n                    },\r\n                    {key: \"familyName\", name: \"Family name\", editable: false, width: 100},\r\n                    {key: \"firstName\", name: \"First name\", editable: false, width: 85},\r\n                    {key: \"ill\", name: \"Illness\", editable: true, width: 150},\r\n                    {key: \"symptomsDate\", name: \"Symptoms Date\", editable: true, width: 120, editor: datePicker},\r\n                    {\r\n                        key: \"reportedPort\",\r\n                        name: \"Reported to port medical\",\r\n                        editable: true,\r\n                        editor: <DropDownEditor options={['(...)', 'Yes', 'No']}/>,\r\n                        width: 150\r\n                    },\r\n                    {key: \"state\", name: \"State\", editable: true, width: 150},\r\n                    {key: \"caseDisposal\", name: \"Case Disposal\", editable: true, width: 150},\r\n                    {key: \"location\", name: \"Location of evacuation\", editable: true, width: 150},\r\n                    {key: \"treatment\", name: \"Treatment\", editable: true, width: 150},\r\n                    {key: \"comments\", name: \"Comments\", editable: true, width: 150},\r\n\r\n                ]}\r\n                rowGetter={i => data.illList[i]}\r\n                rowsCount={data.illList.length}\r\n                onGridRowsUpdated={({fromRow, toRow, updated}) => {\r\n                    console.log('From row:', fromRow, 'to row: ', toRow, 'and updated: ', updated)\r\n                    const illList = data.illList;\r\n\r\n                    for (let i = fromRow; i <= toRow; i++) {\r\n                        let item = illList[i];\r\n                        // to put the first and last name there\r\n                        if (updated.hasOwnProperty(\"NR\")) {\r\n                            if (!item.hasOwnProperty(\"crewPassenger\")) {\r\n                                setOpenAlert({\r\n                                    open: true,\r\n                                    error: 'Please fill in \"Crew or Passenger\" field first',\r\n                                    severity: 'error'\r\n                                })\r\n                                setTimeout(() => setOpenAlert({open: false, error: \"\", severity: 'error'}), 5000);\r\n                                continue;\r\n                            }\r\n                            item.NR = parseInt(updated.NR);\r\n                            if (item.crewPassenger === 'Crew') {\r\n                                let crewItem = crewData.rows.find(el => el.NR === item.NR);\r\n                                if (!crewItem) {\r\n                                    setOpenAlert({\r\n                                        open: true, error: \"Crew with number \" + item.NR\r\n                                            + \" does not exist. Please provide NR with correct number reference of crew member\",\r\n                                        severity: 'error'\r\n                                    })\r\n                                    setTimeout(() => setOpenAlert({open: false, error: \"\", severity: 'error'}), 5000);\r\n                                    continue;\r\n                                }\r\n                                item.firstName = crewItem.Given_name;\r\n                                item.familyName = crewItem.Family_name;\r\n                                illList[i] = item;\r\n                            } else if (item.crewPassenger === \"Passenger\") {\r\n                                let passengerItem = passengerData.rows.find(el => el.NR === item.NR);\r\n                                if (!passengerItem) {\r\n                                    setOpenAlert({\r\n                                        open: true, error: \"Passenger with number \" + item.NR\r\n                                            + \" does not exist. Please provide NR with correct number reference of passenger member\",\r\n                                        severity: 'error'\r\n                                    })\r\n                                    setTimeout(() => setOpenAlert({open: false, error: \"\", severity: 'error'}), 5000);\r\n                                    continue;\r\n                                }\r\n                                item.firstName = passengerItem.Given_name;\r\n                                item.familyName = passengerItem.Family_name;\r\n                                illList[i] = item;\r\n                            } else {\r\n                                setOpenAlert({\r\n                                    open: true,\r\n                                    error: 'Please fill in \"Crew or Passenger\" field first',\r\n                                    severity: 'error'\r\n                                })\r\n                                setTimeout(() => setOpenAlert({open: false, error: \"\", severity: 'error'}), 5000);\r\n                            }\r\n                        } else {\r\n                            item = {...item, ...updated};\r\n                        }\r\n                        illList[i] = item;\r\n                    }\r\n\r\n                    updateData({illList: illList})\r\n                }}\r\n                enableCellSelect={true}\r\n            />\r\n            <Button startIcon={<AddIcon/>} variant=\"primary\" onClick={() => {\r\n                let illList = data.illList;\r\n                illList.push({});\r\n                updateData({illList})\r\n            }}>\r\n                Add row\r\n            </Button>\r\n            <Button startIcon={<DeleteOutlineIcon/>} variant=\"primary\" onClick={() => {\r\n                let illList = data.illList;\r\n                illList.pop();\r\n                updateData({illList});\r\n            }}>Delete row</Button>\r\n        </div>\r\n\r\n    </>\r\n}\r\n\r\nexport default HealthFormComponent;","import React from \"react\";\r\nimport ReactDataGrid from 'react-data-grid';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {Editors} from 'react-data-grid-addons';\r\nimport unitList from \"../../config/consts/unitList\";\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\n\r\nconst {DropDownEditor} = Editors;\r\n\r\nconst styles = (theme) => ({\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n            width: '25ch',\r\n        },\r\n    },\r\n});\r\n\r\nconst UnitEditor = <DropDownEditor options={unitList}/>;\r\n\r\nconst columns = [\r\n    {key: \"NR\", name: \"NR\", editable: true, width: 50},\r\n    {key: \"Name_of_article\", name: \"Name of article\", editable: true},\r\n    {key: \"Quantity\", name: \"Quantity\", editable: true},\r\n    {key: \"Unit\", name: \"Unit\", editable: true, editor: UnitEditor},\r\n    {key: \"Location_on_board\", name: \"Location on board\", editable: true},\r\n];\r\n\r\n\r\nfunction ShipStoresForm({data, updateData}) {\r\n    function addRow() {\r\n        console.log(\"adding row\");\r\n        let number = data.rows.length + 1\r\n        let row = {NR: number}\r\n        data.rows.push(row);\r\n        updateData(data)\r\n    }\r\n\r\n    function deleteRow() {\r\n        data.rows.pop();\r\n        updateData(data)\r\n    }\r\n\r\n    function onGridRowsUpdated({fromRow, toRow, updated}) {\r\n\r\n        const rows = data.rows.slice();\r\n        for (let i = fromRow; i <= toRow; i++) {\r\n            rows[i] = {...rows[i], ...updated};\r\n        }\r\n        data.rows = rows\r\n        updateData(data)\r\n    };\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Typography variant=\"h3\" component=\"h3\" gutterBottom>\r\n                Ship stores\r\n            </Typography>\r\n            <ReactDataGrid\r\n                columns={columns}\r\n                rowGetter={i => data.rows[i]}\r\n                rowsCount={data.rows.length}\r\n                onGridRowsUpdated={onGridRowsUpdated}\r\n                enableCellSelect={true}\r\n                columnAutoWidth=\"true\"\r\n\r\n            />\r\n            <Button startIcon={<AddIcon/>} variant=\"primary\" onClick={addRow}>Add row</Button>\r\n            <Button startIcon={<DeleteOutlineIcon/>} variant=\"primary\" onClick={deleteRow}>Delete row</Button>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\n\r\nexport default withStyles(styles)(ShipStoresForm);","import React, {useState} from \"react\";\r\nimport ReactDataGrid from 'react-data-grid';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {Editors} from 'react-data-grid-addons';\r\nimport unitList from \"../../config/consts/unitList\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\n\r\nconst {DropDownEditor} = Editors;\r\n\r\nconst styles = (theme) => ({\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n            width: '25ch',\r\n        },\r\n    },\r\n});\r\n\r\nconst UnitEditor = <DropDownEditor options={unitList}/>;\r\n\r\n\r\nconst columns = [\r\n    {key: \"NR\", name: \"NR\", editable: true},\r\n    {key: \"Family_name\", name: \"Family name\", editable: false},\r\n    {key: \"Given_name\", name: \"Given name\", editable: false},\r\n    {key: \"Rank_of_rating\", name: \"Rank of rating\", editable: false},\r\n    {key: \"Effects_description\", name: \"Effects description\", editable: true},\r\n    {key: \"Quantity\", name: \"Quantity\", editable: true},\r\n    {key: \"Unit\", name: \"Unit\", editable: true, editor: UnitEditor}\r\n];\r\n\r\nfunction CrewEffectsForm({data, crewData, updateData}) {\r\n    const [openAlert, setOpenAlert] = useState({open: false, error: \"\", severity: 'error'});\r\n\r\n    function addRow() {\r\n        console.log(\"adding row\");\r\n        let row = {}\r\n        data.rows.push(row);\r\n        updateData(data)\r\n    }\r\n\r\n    function deleteRow() {\r\n        data.rows.pop();\r\n        updateData(data)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Typography variant=\"h3\" component=\"h3\" gutterBottom>\r\n                Crew effects\r\n            </Typography>\r\n            {/*The Alerts*/}\r\n            <Collapse in={openAlert.open} style={{marginTop: '30px'}}>\r\n                <Alert\r\n                    severity={openAlert.severity}\r\n                    action={\r\n                        <IconButton\r\n                            aria-label=\"close\"\r\n                            color=\"inherit\"\r\n                            size=\"small\"\r\n                            onClick={() => {\r\n                                setOpenAlert({open: false, error: \"\", severity: 'error'});\r\n                            }}\r\n                        >\r\n                            <CloseIcon fontSize=\"inherit\"/>\r\n                        </IconButton>\r\n                    }\r\n                >\r\n                    {openAlert.error}\r\n                </Alert>\r\n            </Collapse>\r\n            <ReactDataGrid\r\n                columns={columns}\r\n                rowGetter={i => data.rows[i]}\r\n                rowsCount={data.rows.length}\r\n                onGridRowsUpdated={({fromRow, toRow, updated}) => {\r\n                    console.log('From row:', fromRow, 'to row: ', toRow, 'and updated: ', updated)\r\n                    const rows = data.rows;\r\n\r\n                    for (let i = fromRow; i <= toRow; i++) {\r\n                        let item = rows[i];\r\n                        if (updated.hasOwnProperty(\"NR\")) {\r\n                            item.NR = updated.NR;\r\n\r\n                            let crewItem = crewData.rows.find(function (element) {\r\n                                return parseInt(element.NR) === parseInt(item.NR)\r\n                            });\r\n                            console.log(\"crewItem \", crewItem)\r\n                            if (!crewItem) {\r\n                                item.NR = '';\r\n                                item.Family_name = '';\r\n                                item.Given_name = '';\r\n                                item.Rank_of_rating = '';\r\n                                setOpenAlert({\r\n                                    open: true,\r\n                                    error: \"Crew member with number \" + item.NR\r\n                                        + \" does not exist. Please provide NR with correct number reference of crew member\",\r\n                                    severity: 'error'\r\n                                })\r\n                                setTimeout(() => setOpenAlert({open: false, error: \"\", severity: 'error'}), 5000);\r\n                                item = {...item, ...updated};\r\n                                continue;\r\n                            } else {\r\n                                item.Family_name = crewItem.Family_name;\r\n                                item.Given_name = crewItem.Given_name;\r\n                                item.Rank_of_rating = crewItem.Rank_of_rating;\r\n                                console.log(\"item modified \", item)\r\n                                item = {...item, ...updated};\r\n                            }\r\n\r\n                        } else {\r\n                            item = {...item, ...updated};\r\n                        }\r\n                        rows[i] = item;\r\n                    }\r\n                    updateData({rows: rows})\r\n\r\n                }}\r\n                enableCellSelect={true}\r\n                columnAutoWidth=\"true\"\r\n\r\n            />\r\n            <Button variant=\"primary\" startIcon={<AddIcon/>} onClick={addRow}>Add row</Button>\r\n            <Button variant=\"primary\" startIcon={<DeleteOutlineIcon/>} onClick={deleteRow}>Delete row</Button>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\n\r\nexport default withStyles(styles)(CrewEffectsForm);","let kindOfPackages = [\"(...)\",\"AE\",\"BG\",\"BR\",\"CK\",\"GB\",\"PK\",\"PA\",\"RL\",\"SU\",\"TU\"]\r\nexport default kindOfPackages;","import React from \"react\";\r\nimport ReactDataGrid from 'react-data-grid';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {Editors} from 'react-data-grid-addons';\r\nimport ListOfPorts from \"../../config/JSON/listOfPorts\";\r\nimport kindOfPackagesList from \"../../config/consts/kindOfPackagesList\";\r\nimport unitList from \"../../config/consts/unitList\";\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\n\r\nconst {DropDownEditor} = Editors;\r\n\r\nconst styles = (theme) => ({\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n            width: '25ch',\r\n        },\r\n    },\r\n});\r\n\r\n\r\nconst KindOfPackagesEditor = <DropDownEditor options={kindOfPackagesList}/>;\r\nconst UnitEditor = <DropDownEditor options={unitList}/>;\r\nconst ports = [\"(...)\"];\r\nListOfPorts.map((port) =>\r\n    ports.push(port.code + ' - ' + port.countryCode + ' - ' + port.name)\r\n);\r\nconst PortEditor = <DropDownEditor options={ports}/>;\r\n\r\nconst columns = [\r\n    {key: \"Seq\", name: \"Seq\", editable: true, width: 50},\r\n    {key: \"BL_number\", name: \"B/L number\", editable: true, width: 100},\r\n    {key: \"Port_of_loading\", name: \"Port of loading\", editable: true, width: 150, editor: PortEditor},\r\n    {key: \"Port_of_discharge\", name: \"Port of discharge\", editable: true, width: 150, editor: PortEditor},\r\n    {key: \"Number_of_packages\", name: \"Number of packages\", editable: true, width: 150},\r\n    {key: \"Kind_of_packages\", name: \"Kind of packages\", editable: true, editor: KindOfPackagesEditor, width: 150},\r\n    {key: \"Transport_unit\", name: \"Transport unit(Container number)\", editable: true, width: 240},\r\n    {key: \"Description_of_goods\", name: \"Description of goods\", editable: true, width: 150},\r\n    {key: \"Shipping_marks\", name: \"Shipping marks\", editable: true, width: 150},\r\n    {key: \"HS_code\", name: \"HS code\", editable: true, width: 100},\r\n    {key: \"Gross_quantity\", name: \"Gross quantity\", editable: true, width: 150},\r\n    {key: \"Gross_Unit\", name: \"Unit\", editable: true, editor: UnitEditor, width: 70},\r\n    {key: \"Net_quantity\", name: \"Net quantity\", editable: true, width: 150},\r\n    {key: \"Net_Unit\", name: \"Unit\", editable: true, editor: UnitEditor, width: 70},\r\n    {key: \"Measurement\", name: \"Measurement\", editable: true, width: 150},\r\n    {key: \"Measurement_Unit\", name: \"Unit\", editable: true, editor: UnitEditor, width: 70},\r\n    {key: \"Seal_number\", name: \"Seal number\", editable: true, width: 150},\r\n    {key: \"Custom_status\", name: \"Custom status\", editable: true, width: 150},\r\n    {key: \"Size_and_type\", name: \"Size and type\", editable: true, width: 150},\r\n];\r\n\r\nfunction CargoForm({data, updateData}) {\r\n    function addRow() {\r\n        console.log(\"adding row\");\r\n        let number = data.rows.length + 1\r\n        let row = {Seq: number}\r\n        data.rows.push(row);\r\n        updateData(data)\r\n    }\r\n\r\n    function deleteRow() {\r\n        data.rows.pop();\r\n        updateData(data)\r\n    }\r\n\r\n    function onGridRowsUpdated({fromRow, toRow, updated}) {\r\n\r\n        const rows = data.rows.slice();\r\n        for (let i = fromRow; i <= toRow; i++) {\r\n            rows[i] = {...rows[i], ...updated};\r\n        }\r\n        data.rows = rows;\r\n        updateData(data)\r\n    }\r\n\r\n\r\n    return <>\r\n        <div>\r\n            <Typography variant=\"h3\" component=\"h3\" gutterBottom>\r\n                Cargo\r\n            </Typography>\r\n            <ReactDataGrid\r\n                columns={columns}\r\n                rowGetter={i => data.rows[i]}\r\n                rowsCount={data.rows.length}\r\n                onGridRowsUpdated={onGridRowsUpdated}\r\n                enableCellSelect={true}\r\n\r\n            />\r\n            <Button variant=\"primary\" startIcon={<AddIcon/>} onClick={addRow}>Add row</Button>\r\n            <Button variant=\"primary\" startIcon={<DeleteOutlineIcon/>} onClick={deleteRow}>Delete row</Button>\r\n        </div>\r\n\r\n    </>\r\n}\r\n\r\n\r\nexport default withStyles(styles)(CargoForm);","import FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport React from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ReactDataGrid from \"react-data-grid\";\r\nimport datePicker from \"../pickers/datePicker\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {Editors} from \"react-data-grid-addons\";\r\nimport listOfPortsConst from \"../../config/JSON/listOfPorts\";\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\n\r\nconst {DropDownEditor} = Editors;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 200,\r\n    },\r\n    formControlNoMargin: {\r\n        minWidth: 225,\r\n    },\r\n    selectControl: {},\r\n    labelControl: {\r\n        width: \"90%\"\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    topMargin: {\r\n        marginTop: theme.spacing(5)\r\n    }\r\n}));\r\n\r\n\r\nconst SecurityFormComponent = ({data, updateData}) => {\r\n\r\n    const classes = useStyles();\r\n    const marginTop = {marginTop: '30px'};\r\n    const widthOfLongQuestion = {width: '50%'}\r\n    const emptyDIV = <div style={{width: '225px'}}/>;\r\n    const portEditor = listOfPortsConst.map(el => el.code).filter(el => el.length !== 0);\r\n    const activityEditor = ['(...)', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15',]\r\n    return <>\r\n        <Typography variant=\"h3\" classes={classes.topMargin} component=\"h3\" gutterBottom>\r\n            Security Information</Typography>\r\n\r\n        <Typography style={marginTop} variant=\"h5\" classes={classes.topMargin} component=\"h5\" gutterBottom>\r\n            Security information\r\n        </Typography>\r\n\r\n        <Grid container style={marginTop} classes={classes.topMargin} justify=\"space-between\">\r\n            <div style={widthOfLongQuestion}>\r\n                <FormControl\r\n                    variant=\"outlined\"\r\n                    className={classes.formControlNoMargin}\r\n                    fullWidth\r\n                >\r\n                    <InputLabel className={classes.labelControl} id=\"issc-label\">Does the ship have a valid\r\n                        International Ship Security Certificate (ISSC)?</InputLabel>\r\n                    <Select\r\n                        className={classes.selectControl}\r\n                        labelId=\"issc-label\"\r\n                        value={data.validISSC}\r\n                        onChange={(e) => {\r\n                            updateData({validISSC: e.target.value})\r\n                        }}\r\n                    >\r\n                        <MenuItem value={'Yes'}>Yes</MenuItem>\r\n                        <MenuItem value={'No'}>No</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </div>\r\n\r\n            <TextField\r\n                label=\"If no, why not?\"\r\n                value={data.noValid}\r\n                style={{marginRight:\"10%\"}}\r\n                onChange={(e) =>\r\n                    updateData({noValid: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n        </Grid>\r\n\r\n        <FormControl\r\n            style={marginTop}\r\n            variant=\"outlined\"\r\n            className={classes.formControlNoMargin}\r\n        >\r\n            <InputLabel className={classes.labelControl} id=\"issued-label\">Issued by</InputLabel>\r\n            <Select\r\n                className={classes.selectControl}\r\n                labelId=\"issued-label\"\r\n                value={data.issued}\r\n                onChange={(e) => {\r\n                    updateData({issued: e.target.value})\r\n                }}\r\n            >\r\n                <MenuItem value={'GVT'}>GVT</MenuItem>\r\n                <MenuItem value={'RSO'}>RSO</MenuItem>\r\n            </Select>\r\n        </FormControl>\r\n\r\n        <Grid container style={marginTop} classes={classes.topMargin} justify=\"space-between\">\r\n            <FormControl\r\n                variant=\"outlined\"\r\n                className={classes.formControlNoMargin}\r\n            >\r\n                <InputLabel className={classes.labelControl} id=\"issc-type-label\">\r\n                    ISSC type\r\n                </InputLabel>\r\n                <Select\r\n                    className={classes.selectControl}\r\n                    labelId=\"issc-type-label\"\r\n                    value={data.isscType}\r\n                    onChange={(e) => {\r\n                        updateData({isscType: e.target.value})\r\n                    }}\r\n                >\r\n                    <MenuItem value={'Full'}>Full</MenuItem>\r\n                    <MenuItem value={'Interim'}>Interim</MenuItem>\r\n                </Select>\r\n            </FormControl>\r\n\r\n            <TextField\r\n                label=\"Expiry date\"\r\n                type=\"date\"\r\n                variant={'outlined'}\r\n                value={data.expiryDate}\r\n                onChange={(e) =>\r\n                    updateData({expiryDate: e.target.value})}\r\n                InputLabelProps={{\r\n                    shrink: true,\r\n                }}\r\n            />\r\n\r\n            {emptyDIV}\r\n        </Grid>\r\n\r\n        <Grid container style={marginTop} classes={classes.topMargin} justify=\"space-between\">\r\n            <div style={widthOfLongQuestion}>\r\n                <FormControl\r\n                    variant=\"outlined\"\r\n                    className={classes.formControlNoMargin}\r\n                    fullWidth\r\n                >\r\n                    <InputLabel className={classes.labelControl} id=\"security-level-label\">\r\n                        Security level at which the ship is currently operating\r\n                    </InputLabel>\r\n                    <Select\r\n                        className={classes.selectControl}\r\n                        labelId=\"security-level-label\"\r\n                        value={data.securityLevel}\r\n                        onChange={(e) => {\r\n                            updateData({securityLevel: e.target.value})\r\n                        }}\r\n                    >\r\n                        <MenuItem value={'Security Level 1'}>Security level 1</MenuItem>\r\n                        <MenuItem value={'Security Level 2'}>Security level 2</MenuItem>\r\n                        <MenuItem value={'Security Level 3'}>Security level 3</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </div>\r\n        </Grid>\r\n\r\n        <Grid container style={marginTop} classes={classes.topMargin} justify=\"space-between\">\r\n            <div style={widthOfLongQuestion}>\r\n                <FormControl\r\n                    variant=\"outlined\"\r\n                    className={classes.formControlNoMargin}\r\n                    fullWidth\r\n                >\r\n                    <InputLabel className={classes.labelControl} id=\"security-level-label\">\r\n                        Is there any security-related matter you wish to report\r\n                    </InputLabel>\r\n                    <Select\r\n                        className={classes.selectControl}\r\n                        labelId=\"security-level-label\"\r\n                        value={data.securityRelatedMatter}\r\n                        onChange={(e) => {\r\n                            updateData({securityRelatedMatter: e.target.value})\r\n                        }}\r\n                    >\r\n                        <MenuItem value={'Yes'}>Yes</MenuItem>\r\n                        <MenuItem value={'No'}>No</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </div>\r\n        </Grid>\r\n\r\n        <Grid container style={marginTop} classes={classes.topMargin} justify=\"space-between\">\r\n            <div style={widthOfLongQuestion}>\r\n                <FormControl\r\n                    variant=\"outlined\"\r\n                    className={classes.formControlNoMargin}\r\n                    fullWidth\r\n                >\r\n                    <InputLabel className={classes.labelControl} id=\"approved-label\">\r\n                        Does the ship have an approved SSP on board?\r\n                    </InputLabel>\r\n                    <Select\r\n                        className={classes.selectControl}\r\n                        labelId=\"approved-label\"\r\n                        value={data.approvedSSP}\r\n                        onChange={(e) => {\r\n                            updateData({approvedSSP: e.target.value})\r\n                        }}\r\n                    >\r\n                        <MenuItem value={'Yes'}>Yes</MenuItem>\r\n                        <MenuItem value={'No'}>No</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </div>\r\n        </Grid>\r\n\r\n        <hr style={marginTop}/>\r\n\r\n        <Typography style={marginTop} variant=\"h5\" classes={classes.topMargin} component=\"h5\" gutterBottom>\r\n            CSO name and 24 hours contract details\r\n        </Typography>\r\n\r\n        <Grid container style={marginTop} classes={classes.topMargin} justify=\"space-between\">\r\n            <TextField\r\n                label=\"Given name\"\r\n                value={data.firstName}\r\n                onChange={(e) =>\r\n                    updateData({firstName: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n            <TextField\r\n                label=\"Family name\"\r\n                value={data.familyName}\r\n                onChange={(e) =>\r\n                    updateData({familyName: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n            {emptyDIV}\r\n        </Grid>\r\n\r\n        <Grid container style={marginTop} classes={classes.topMargin} justify=\"space-between\">\r\n            <TextField\r\n                label=\"Phone\"\r\n                value={data.firstName}\r\n                onChange={(e) =>\r\n                    updateData({firstName: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n            <TextField\r\n                label=\"Fax\"\r\n                value={data.fax}\r\n                onChange={(e) =>\r\n                    updateData({fax: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Email\"\r\n                value={data.email}\r\n                onChange={(e) =>\r\n                    updateData({email: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n        </Grid>\r\n\r\n        <hr style={marginTop}/>\r\n\r\n        <Typography style={marginTop} variant=\"h5\" classes={classes.topMargin} component=\"h5\" gutterBottom>\r\n            Ship-to-ship activities, in chronological order (most recent first)<br/>\r\n            which were carried out during the last 10 calls at port facilities listed above\r\n        </Typography>\r\n\r\n        <div style={{marginTop: '30px'}}>\r\n            <ReactDataGrid\r\n                columns={[\r\n                    {key: \"NR\", name: \"NR\", editable: true, width: 40},\r\n                    {\r\n                        key: \"dateFrom\",\r\n                        name: \"Date from\",\r\n                        editable: true,\r\n                        width: 145,\r\n                        editor: datePicker\r\n                    },\r\n                    {\r\n                        key: \"dateDeparture\",\r\n                        name: \"Date departure\",\r\n                        editable: true,\r\n                        width: 145,\r\n                        editor: datePicker\r\n                    },\r\n                    {key: \"locationName\", name: \"Location\", editable: true, width: 150},\r\n                    {key: \"latitude\", name: \"Latitude\", editable: true, width: 150},\r\n                    {key: \"longitude\", name: \"Longitude\", editable: true, width: 150},\r\n                    {\r\n                        key: \"shipActivity\",\r\n                        name: \"Activity\",\r\n                        editable: true,\r\n                        width: 120,\r\n                        editor: <DropDownEditor options={activityEditor}/>\r\n                    },\r\n                    {\r\n                        key: \"securityMeasure\",\r\n                        name: \"Security measures\",\r\n                        editable: true,\r\n                        width: 150\r\n                    },\r\n                    {\r\n                        key: \"port\",\r\n                        name: \"Port\",\r\n                        editable: true,\r\n                        editor: <DropDownEditor options={portEditor}/>,\r\n                        width: 150\r\n                    }\r\n                ]}\r\n                rowGetter={i => data.rows[i]}\r\n                rowsCount={data.rows.length}\r\n                onGridRowsUpdated={({fromRow, updated}) => {\r\n                    let rows = data.rows;\r\n                    rows[fromRow] = {...rows[fromRow], ...updated};\r\n                    updateData({rows})\r\n                }}\r\n                enableCellSelect={true}\r\n            />\r\n            <Button startIcon={<AddIcon/>} variant=\"primary\" onClick={() => {\r\n                if (data.rows.length === 0) {\r\n                    data.rows.push({NR: 1});\r\n                    updateData({rows: data.rows})\r\n                    return;\r\n                }\r\n                let NR = parseInt(data.rows[data.rows.length-1].NR);\r\n                NR++;\r\n                data.rows.push({NR: NR});\r\n                updateData({rows: data.rows})\r\n            }}>\r\n                Add row\r\n            </Button>\r\n            <Button startIcon={<DeleteOutlineIcon/>} variant=\"primary\" onClick={() => {\r\n                data.rows.pop();\r\n                updateData({rows: data.rows});\r\n            }}>Delete row</Button>\r\n        </div>\r\n    </>\r\n}\r\n\r\n\r\nexport default SecurityFormComponent;","import React from \"react\";\r\nimport ReactDataGrid from 'react-data-grid';\r\nimport {makeStyles, withStyles} from '@material-ui/core/styles';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {Editors} from 'react-data-grid-addons';\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport ListOfPorts from \"../../config/JSON/listOfPorts\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport wasteTypes from \"../../config/consts/wasteTypes.json\";\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\n\r\nconst {DropDownEditor} = Editors;\r\n\r\nconst styles = (theme) => ({\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n            width: '25ch',\r\n        },\r\n    },\r\n});\r\n\r\nlet wasteTypesList = [\"[Waste type]\"];\r\nfor (let i = 0; i < Object.keys(wasteTypes).length; i++) {\r\n    let wasteTypeFormatted = Object.keys(wasteTypes)[i] + ' : ' + Object.values(wasteTypes)[i];\r\n    wasteTypesList.push(wasteTypeFormatted);\r\n}\r\nconst WasteTypesEditor = <DropDownEditor options={wasteTypesList}/>;\r\nconst ports = [\"(...)\"];\r\nListOfPorts.map((port) =>\r\n    ports.push(port.code + ' - ' + port.countryCode + ' - ' + port.name)\r\n);\r\nconst PortEditor = <DropDownEditor options={ports}/>;\r\nconst columns = [\r\n    {key: \"NR\", name: \"Seq\", editable: true, width: 50},\r\n    {key: \"WasteType\", name: \"Waste Type\", editable: true, width: 150, editor: WasteTypesEditor},\r\n    {key: \"WasteDescription\", name: \"Waste Description(when relevant)\", editable: true, width: 250},\r\n    {key: \"WasteToBeDelivered\", name: \"Waste to be delivered(m3)\", editable: true, width: 250},\r\n    {key: \"MaxStorage\", name: \"Maximum dedicated storage capacity (m3)\", editable: true, width: 300},\r\n    {key: \"WasteAmount\", name: \"Amount of waste on board (m3)\", editable: true, width: 250},\r\n    {\r\n        key: \"PortOfDelivery\",\r\n        name: \"Port of delivery of remaining waste\",\r\n        editable: true,\r\n        width: 250,\r\n        editor: PortEditor\r\n    },\r\n    {key: \"EstimatedWaste\", name: \"Estimated amount of waste to be generated (m3)\", editable: true, width: 350},\r\n];\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        marginLeft: theme.spacing(0),\r\n        minWidth: 200,\r\n    }\r\n}));\r\n\r\n\r\nfunction WasteForm({data, updateData}) {\r\n    const classes = useStyles();\r\n    const widthOfLongQuestion = {width: '65%'}\r\n\r\n    function addRow() {\r\n        console.log(\"adding row\");\r\n        let number = data.rows.length + 1\r\n        let row = {NR: number}\r\n        data.rows.push(row);\r\n        updateData(data)\r\n    }\r\n\r\n    function deleteRow() {\r\n        data.rows.pop();\r\n        updateData(data)\r\n    }\r\n\r\n    function onGridRowsUpdated({fromRow, toRow, updated}) {\r\n\r\n        const rows = data.rows.slice();\r\n        for (let i = fromRow; i <= toRow; i++) {\r\n            rows[i] = {...rows[i], ...updated};\r\n        }\r\n        data.rows = rows;\r\n        updateData(data)\r\n    }\r\n\r\n    function correctDateTime(date) {\r\n        date = \"\" + date;\r\n        return date.substr(0, 16);\r\n    }\r\n\r\n    return <>\r\n        <div>\r\n            <Typography variant=\"h3\" component=\"h3\" gutterBottom>\r\n                Waste information\r\n            </Typography>\r\n            <div style={widthOfLongQuestion}>\r\n                <FormControl\r\n                    variant=\"outlined\"\r\n                    className={classes.formControl}\r\n                    fullWidth\r\n                >\r\n                    <InputLabel className={classes.labelControl} id=\"enum-1-label\">Are you delivering all,some or none\r\n                        of your waste into port reception facility? </InputLabel>\r\n                    <Select\r\n                        labelId=\"enum-1-label\"\r\n                        value={data.WasteDeliveryStatus}\r\n                        className={classes.selectControl}\r\n                        onChange={(e) => {\r\n                            updateData({WasteDeliveryStatus: e.target.value})\r\n                        }}\r\n                    >\r\n                        <MenuItem value={'All'}>All</MenuItem>\r\n                        <MenuItem value={'Some'}>Some</MenuItem>\r\n                        <MenuItem value={'None'}>None</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </div>\r\n            <Typography variant=\"h5\" component=\"h5\" style={{marginTop: '30px'}} gutterBottom className={classes.formControl}>\r\n                Last port and date when ship-generated waste was delivered\r\n            </Typography>\r\n            <div className={'flex-parent'}>\r\n                <Grid container justify=\"space-between\" style={{width: '80%'}}>\r\n                    <FormControl\r\n                        variant=\"outlined\"\r\n                        className={classes.formControl}\r\n                        margin={\"normal\"}\r\n                    >\r\n                        <InputLabel id=\"last-port-label\">Port</InputLabel>\r\n\r\n                        <Select\r\n                            labelId=\"port-of-label-label\"\r\n                            value={data.LastPortDelivered}\r\n                            onChange={(e) => {\r\n                                updateData({LastPortDelivered: e.target.value})\r\n                            }}\r\n                        >\r\n                            {ListOfPorts.map((port, index) =>\r\n                                <MenuItem key={index} value={`${port.code}`}>\r\n                                    {`${port.code} - ${port.countryCode} - ${port.name}`}\r\n                                </MenuItem>\r\n                            )}\r\n                        </Select>\r\n                    </FormControl>\r\n\r\n                    <TextField\r\n                        label=\"Date\"\r\n                        type=\"date\"\r\n                        style={{minWidth: '225px'}}\r\n                        variant={'outlined'}\r\n                        className={classes.formControl}\r\n                        value={correctDateTime(data.LastPortDeliveredDate)}\r\n                        onChange={(e) =>\r\n                            updateData({LastPortDeliveredDate: e.target.value})}\r\n                        InputLabelProps={{\r\n                            shrink: true,\r\n                        }}\r\n                    />\r\n                </Grid>\r\n\r\n            </div>\r\n            <Typography variant=\"h5\" component=\"h5\" gutterBottom style={{marginTop: '30px'}} className={classes.formControl}>\r\n                Waste items\r\n            </Typography>\r\n            <ReactDataGrid\r\n                columns={columns}\r\n                rowGetter={i => data.rows[i]}\r\n                rowsCount={data.rows.length}\r\n                onGridRowsUpdated={onGridRowsUpdated}\r\n                enableCellSelect={true}\r\n\r\n            />\r\n            <Button startIcon={<AddIcon/>} variant=\"primary\" onClick={addRow}>Add row</Button>\r\n            <Button startIcon={<DeleteOutlineIcon/>} variant=\"primary\" onClick={deleteRow}>Delete row</Button>\r\n        </div>\r\n\r\n    </>\r\n}\r\n\r\n\r\nexport default withStyles(styles)(WasteForm);","let dgClassifications = [\"(...)\", \"IMDG\", \"IGC\",\"IBC\",\"MARPOL_ANNEX1\",\"IMSBC\"]\r\nexport default dgClassifications","let classes = [\"(...)\", \"1\", \"1,1\", \"1,2\", \"1,3\", \"1,4\", \"1,5\", \"1,6\", \"2\", \"2,1\", \"2,2\", \"2,3\", \"3\", \"4\", \"4,1\", \"4,2\", \"4,3\", \"5\", \"5,1\", \"5,2\", \"6\", \"6,1\", \"6,2\", \"7\", \"8\", \"9\"];\r\nexport default classes","let groups = [\"(...)\", \"|\", \"||\",\"|||\",\"None\"]\r\nexport default groups","let codes = [\"(...)\",\"X\",\"Y\",\"Z\",\"OS\"]\r\nexport default codes;","import React, {useState} from \"react\";\r\nimport ReactDataGrid from 'react-data-grid';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {Editors} from 'react-data-grid-addons';\r\nimport dgClassifications from \"../../config/consts/dgClassifications\";\r\nimport IMOHazardClasses from \"../../config/consts/IMOHazardClasses\";\r\nimport packingGroups from \"../../config/consts/packingGroups\";\r\nimport pollutionCodes from \"../../config/consts/pollutionCodes\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\n\r\nconst {DropDownEditor} = Editors;\r\n\r\nconst styles = (theme) => ({\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n            width: '25ch',\r\n        },\r\n    },\r\n});\r\n\r\nconst dgClassificationEditor = <DropDownEditor options={dgClassifications}/>;\r\nconst IMOHazardEditor = <DropDownEditor options={IMOHazardClasses}/>;\r\nconst packingGroupsEditor = <DropDownEditor options={packingGroups}/>;\r\nconst pollutionCodesEditor = <DropDownEditor options={pollutionCodes}/>;\r\nconst columns = [\r\n    {key: \"Seq\", name: \"Seq\", editable: true, width: 50},\r\n    {key: \"Container_number\", name: \"Container number\", editable: false, width: 150},\r\n    {key: \"Textual_reference\", name: \"Textual reference\", editable: true, width: 150},\r\n    {key: \"DG_Classification\", name: \"DG Classification\", editable: true, width: 150, editor: dgClassificationEditor},\r\n    {key: \"IMO_hazard_classes\", name: \"IMO hazard classes\", editable: true, width: 150, editor: IMOHazardEditor},\r\n    {key: \"UN_number\", name: \"UN number\", editable: true, width: 150},\r\n    {key: \"Packing_group\", name: \"Packing group\", editable: true, width: 150, editor: packingGroupsEditor},\r\n    {key: \"Subsidiary_risk\", name: \"Subsidiary risk\", editable: true, width: 150},\r\n    {key: \"Flash_point\", name: \"Flash point\", editable: true, width: 150},\r\n    {key: \"pollution_code\", name: \"MARPOL pollution code\", editable: true, width: 200, editor: pollutionCodesEditor},\r\n    {key: \"EmS\", name: \"EmS\", editable: true, width: 100},\r\n    {key: \"Additional_information\", name: \"Additional information\", editable: true, width: 180},\r\n    {key: \"Segregation_information\", name: \"Segregation information\", editable: true, width: 180},\r\n    {key: \"On_board_location\", name: \"On board location\", editable: true, width: 150},\r\n\r\n];\r\n\r\n\r\nconst DPGForm = ({data, cargoData, updateData}) => {\r\n    const [openAlert, setOpenAlert] = useState({open: false, error: \"\", severity: 'error'});\r\n\r\n    function addRow() {\r\n        console.log(\"adding row\");\r\n        let row = {}\r\n        data.rows.push(row);\r\n        updateData(data)\r\n    }\r\n\r\n    function deleteRow() {\r\n        data.rows.pop();\r\n        updateData(data)\r\n    }\r\n\r\n\r\n    return <>\r\n        <div>\r\n            <Typography variant=\"h3\" component=\"h3\" gutterBottom>\r\n                Dangerous goods\r\n            </Typography>\r\n            {/*The Alerts*/}\r\n            <Collapse in={openAlert.open} style={{marginTop: '30px'}}>\r\n                <Alert\r\n                    severity={openAlert.severity}\r\n                    action={\r\n                        <IconButton\r\n                            aria-label=\"close\"\r\n                            color=\"inherit\"\r\n                            size=\"small\"\r\n                            onClick={() => {\r\n                                setOpenAlert({open: false, error: \"\", severity: 'error'});\r\n                            }}\r\n                        >\r\n                            <CloseIcon fontSize=\"inherit\"/>\r\n                        </IconButton>\r\n                    }\r\n                >\r\n                    {openAlert.error}\r\n                </Alert>\r\n            </Collapse>\r\n            <ReactDataGrid\r\n                columns={columns}\r\n                rowGetter={i => data.rows[i]}\r\n                rowsCount={data.rows.length}\r\n                onGridRowsUpdated={({fromRow, toRow, updated}) => {\r\n                    console.log('From row:', fromRow, 'to row: ', toRow, 'and updated: ', updated)\r\n                    const rows = data.rows;\r\n\r\n                    for (let i = fromRow; i <= toRow; i++) {\r\n                        let item = rows[i];\r\n                        if (updated.hasOwnProperty(\"Seq\")) {\r\n                            item.Seq = updated.Seq;\r\n\r\n                            let cargoItem = cargoData.rows.find(function (element) {\r\n                                console.log(\"comparison \", parseInt(element.Seq), \" === \", parseInt(item.Seq))\r\n                                return parseInt(element.Seq) === parseInt(item.Seq)\r\n                            });\r\n                            console.log(\"cargoItem \", cargoItem)\r\n                            if (!cargoItem) {\r\n                                item.Seq = '';\r\n                                setOpenAlert({\r\n                                    open: true,\r\n                                    error: \"Cargo with number \" + item.Seq\r\n                                        + \" does not exist. Please provide Seq with correct number reference of cargo item\",\r\n                                    severity: 'error'\r\n                                })\r\n                                setTimeout(() => setOpenAlert({open: false, error: \"\", severity: 'error'}), 5000);\r\n                                continue;\r\n                            } else {\r\n                                item.Container_number = cargoItem.Transport_unit;\r\n                                console.log(\"item modified \", item)\r\n                                item = {...item, ...updated};\r\n                            }\r\n\r\n                        } else {\r\n                            item = {...item, ...updated};\r\n                        }\r\n                        rows[i] = item;\r\n                    }\r\n                    updateData({rows: rows})\r\n\r\n                }}\r\n                enableCellSelect={true}\r\n\r\n            />\r\n            <Button variant=\"primary\" startIcon={<AddIcon/>} onClick={addRow}>Add row</Button>\r\n            <Button variant=\"primary\" startIcon={<DeleteOutlineIcon/>} onClick={deleteRow}>Delete row</Button>\r\n        </div>\r\n\r\n    </>\r\n}\r\n\r\n\r\nexport default withStyles(styles)(DPGForm);","const documentTypes = require(\"../../data/document_types\")\r\n\r\nexport function getDocumentTypes() {\r\n    return Object.keys(documentTypes);\r\n}\r\n\r\nexport function getDocumentsWithTypes() {\r\n    let documentsWithTypes = [];\r\n    for (let i = 0; i < Object.keys(documentTypes).length; i++) {\r\n        let documentWithType = Object.values(documentTypes)[i] + ' - ' + Object.keys(documentTypes)[i];\r\n        documentsWithTypes.push(documentWithType);\r\n    }\r\n    return documentsWithTypes;\r\n}\r\n\r\nexport function getDocumentWithCodeByCode(documentType) {\r\n    if (documentType !== '' && documentType != null) {\r\n        return documentTypes[documentType] + ' - ' + documentType;\r\n    }\r\n    return '';\r\n\r\n}\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default {getDocumentTypes, getDocumentsWithTypes, getDocumentWithCodeByCode};","import React from \"react\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select'\r\nimport '@date-io/date-fns';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport ListOfLanguages from \"../../data/languages\";\r\nimport ListOfCountries from \"../../data/countries\";\r\nimport {Editors} from \"react-data-grid-addons\";\r\nimport documentTypes from \"../../functions/list_getters/documentTypesGetter\";\r\nimport countryCodes from \"../../functions/list_getters/countryCodes\";\r\nimport ReactDataGrid from \"react-data-grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport DeleteOutlineIcon from \"@material-ui/icons/DeleteOutline\";\r\nimport datePicker from \"../pickers/datePicker\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 225,\r\n    },\r\n    datePicker: {\r\n        minWidth: 225,\r\n        width: 225\r\n    },\r\n    formControlNoMargin: {\r\n        minWidth: 225,\r\n    },\r\n    formControlNoMargin2: {\r\n        minWidth: 225,\r\n    },\r\n    selectEmpty: {\r\n        marginTop: theme.spacing(2),\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    },\r\n\r\n    divisionLine:{\r\n        background: 'black',\r\n        color: 'black',\r\n        borderColor: 'black',\r\n        height: '3px',\r\n        width:\"100%\",\r\n        marginTop:\"30px\"\r\n    }\r\n}));\r\nconst {DropDownEditor} = Editors;\r\nconst documentTypesList = documentTypes.getDocumentsWithTypes();\r\nconst DocumentTypesEditor = <DropDownEditor options={documentTypesList}/>;\r\n\r\nconst documentsAttachedRows = [\r\n    {key: \"NR\", name: \"NR\", editable: false},\r\n    {key: \"TypeCode\", name: \"Type\", editable: true, editor: DocumentTypesEditor},\r\n    {key: \"Remarks\", name: \"Remarks\", editable: true},\r\n    {key: \"Date\", name: \"Date\", editable: true, editor: datePicker}\r\n];\r\n\r\nconst consignmentRows = [\r\n    {key: \"NR\", name: \"NR\", editable: false},\r\n    {key: \"Gross_weight\", name: \"Gross weight\", editable: true},\r\n    {key: \"Volume\", name: \"Volume\", editable: true},\r\n    {key: \"Nature_of_goods\", name: \"Nature of the goods\", editable: true},\r\n    {key: \"Number_of_packages\", name: \"Number of packages\", editable: true},\r\n    {key: \"Method_of_pa—Åking\", name: \"Method of pa—Åking\", editable: true},\r\n    {key: \"Marks_and_Nos\", name: \"Marks and Nos.\", editable: true}\r\n];\r\n\r\nfunction PortForm({data, updateData, locationNumber}) {\r\n    const classes = useStyles();\r\n    const emptyDiv = <div className={classes.formControlNoMargin} style={{height: '0px'}}/>\r\n\r\n    function addRowDocumentsAttached() {\r\n        let number = data.documentsAttached.length + 1\r\n        let row = {NR: number}\r\n        data.documentsAttached.push(row);\r\n        updateData(data)\r\n    }\r\n\r\n    function deleteRowDocumentsAttached() {\r\n        data.documentsAttached.pop();\r\n        updateData(data)\r\n    }\r\n\r\n    function onGridRowsUpdatedDocumentsAttached({fromRow, toRow, updated}) {\r\n\r\n        const documentsAttached = data.documentsAttached.slice();\r\n        for (let i = fromRow; i <= toRow; i++) {\r\n            documentsAttached[i] = {...documentsAttached[i], ...updated};\r\n        }\r\n        data.documentsAttached = documentsAttached;\r\n        updateData(data)\r\n    }\r\n\r\n    function addRowConsignment() {\r\n        let number = data.consignment.length + 1\r\n        let row = {NR: number}\r\n        data.consignment.push(row);\r\n        updateData(data)\r\n    }\r\n\r\n    function deleteRowConsignment() {\r\n        data.consignment.pop();\r\n        updateData(data)\r\n    }\r\n\r\n    function onGridRowsUpdatedConsignment({fromRow, toRow, updated}) {\r\n\r\n        const consignment = data.consignment.slice();\r\n        for (let i = fromRow; i <= toRow; i++) {\r\n            consignment[i] = {...consignment[i], ...updated};\r\n        }\r\n        data.consignment = consignment;\r\n        updateData(data)\r\n    }\r\n\r\n    return <>\r\n        <Typography variant=\"h3\" component=\"h3\" gutterBottom>\r\n            CMR information\r\n        </Typography>\r\n        <Grid container alignItems=\"flex-start\" style={{marginTop: '10px'}} spacing={2}>\r\n\r\n            <Grid container  style={{}} item xs={6}>\r\n                <Typography variant=\"h5\" component=\"h5\" gutterBottom align=\"center\">\r\n                    Sender details\r\n                </Typography>\r\n\r\n                <Grid container justify={'space-between'}style={{marginTop: '10px'}}>\r\n                    <TextField\r\n                        label=\"ID:\"\r\n                        value={data.sender_id}\r\n                        onChange={(e) => updateData({sender_id: e.target.value})}\r\n                        variant=\"outlined\"\r\n                    />\r\n\r\n                    <FormControl\r\n                        variant=\"outlined\"\r\n                        className={classes.formControlNoMargin}\r\n                    >\r\n                        <InputLabel id=\"departure-arrival-label\">Language</InputLabel>\r\n\r\n                        <Select\r\n                            labelId=\"departure-arrival-label\"\r\n                            value={data.sender_language_code}\r\n                            onChange={(e) => {\r\n                                updateData({sender_language_code: e.target.value})\r\n                            }}\r\n                        >\r\n                            {Object.keys(ListOfLanguages).map((language, index) =>\r\n                                <MenuItem key={index} value={language}>\r\n                                    {`${ListOfLanguages[language].name}-  ${language}`}\r\n                                </MenuItem>\r\n                            )}\r\n                        </Select>\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid container justify={'space-between'}style={{marginTop: '30px'}}>\r\n                    <TextField\r\n                        label=\"Name:\"\r\n                        value={data.sender_name}\r\n                        onChange={(e) => updateData({sender_name: e.target.value})}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                    />\r\n                </Grid>\r\n\r\n                <Grid container justify={'space-between'}style={{marginTop: '30px'}}>\r\n                    <TextField\r\n                        label=\"Tax Registration ID:\"\r\n                        value={data.sender_tax_id}\r\n                        onChange={(e) => updateData({sender_tax_id: e.target.value})}\r\n                        variant=\"outlined\"\r\n                    />\r\n\r\n                    <TextField\r\n                        label=\"Registered Tax/TypeCode:\"\r\n                        value={data.sender_tax_type_code}\r\n                        onChange={(e) => updateData({sender_tax_type_code: e.target.value})}\r\n                        variant=\"outlined\"\r\n                    />\r\n\r\n                </Grid>\r\n                <Typography variant=\"h5\" component=\"h5\" gutterBottom style={{marginTop: '30px'}}>\r\n                    Defined contract details\r\n                </Typography>\r\n                <Grid container justify={'space-between'} style={{marginTop: '10px'}}>\r\n\r\n                    <TextField\r\n                        label=\"Name:\"\r\n                        value={data.sender_person_name}\r\n                        onChange={(e) => updateData({sender_person_name: e.target.value})}\r\n                        variant=\"outlined\"\r\n                    />\r\n\r\n                    <TextField\r\n                        label=\"Mobile telefone:\"\r\n                        value={data.sender_complete_number}\r\n                        onChange={(e) => updateData({sender_complete_number: e.target.value})}\r\n                        variant=\"outlined\"\r\n                    />\r\n                </Grid>\r\n\r\n                <Grid container justify={'space-between'} style={{marginTop: '30px'}}>\r\n\r\n                    <TextField\r\n                        label=\"Email:\"\r\n                        value={data.sender_email}\r\n                        onChange={(e) => updateData({sender_email: e.target.value})}\r\n                        variant=\"outlined\"\r\n                    />\r\n\r\n                    <TextField\r\n                        label=\"Postcode:\"\r\n                        value={data.sender_postcode}\r\n                        onChange={(e) => updateData({sender_postcode: e.target.value})}\r\n                        variant=\"outlined\"\r\n                    />\r\n                </Grid>\r\n\r\n                <Grid container justify={'space-between'} style={{marginTop: '30px'}}>\r\n\r\n                    <TextField\r\n                        label=\"Street:\"\r\n                        value={data.sender_street_name}\r\n                        onChange={(e) => updateData({sender_street_name: e.target.value})}\r\n                        variant=\"outlined\"\r\n                    />\r\n\r\n                    <TextField\r\n                        label=\"City:\"\r\n                        value={data.sender_city_name}\r\n                        onChange={(e) => updateData({sender_city_name: e.target.value})}\r\n                        variant=\"outlined\"\r\n                    />\r\n                </Grid>\r\n\r\n                <Grid container justify={'space-between'} style={{marginTop: '30px'}}>\r\n\r\n                    <FormControl\r\n                        variant=\"outlined\"\r\n                        className={classes.formControlNoMargin}\r\n                    >\r\n                        <InputLabel id=\"departure-arrival-label\">Country</InputLabel>\r\n\r\n                        <Select\r\n                            labelId=\"departure-arrival-label\"\r\n                            value={data.sender_country_code}\r\n                            onChange={(e) => {\r\n                                updateData({sender_country_code: e.target.value})\r\n                            }}\r\n                        >\r\n                            {Object.keys(ListOfCountries).map((country, index) =>\r\n                                <MenuItem key={index} value={country}>\r\n                                    {`${country} - ${ListOfCountries[country]}`}\r\n                                </MenuItem>\r\n                            )}\r\n                        </Select>\r\n                    </FormControl>\r\n\r\n                    <TextField\r\n                        label=\"Country subdivision:\"\r\n                        value={data.sender_country_subdivision_name}\r\n                        onChange={(e) => updateData({sender_country_subdivision_name: e.target.value})}\r\n                        variant=\"outlined\"\r\n                    />\r\n                </Grid>\r\n\r\n            </Grid>\r\n            <Grid container  style={{}} item xs={6}>\r\n                <Typography variant=\"h5\" component=\"h5\" gutterBottom>\r\n                    Document details\r\n                </Typography>\r\n\r\n                <Grid container justify={'space-between'}style={{marginTop: '10px'}}>\r\n                    <TextField\r\n                        label=\"Number of document:\"\r\n                        value={data.cmr_id}\r\n                        onChange={(e) => updateData({cmr_id: e.target.value})}\r\n                        variant=\"outlined\"\r\n                    />\r\n\r\n                    <TextField\r\n                        label=\"Date of document\"\r\n                        type=\"date\"\r\n                        contentEditable={false}\r\n                        className={classes.datePicker}\r\n                        variant={'outlined'}\r\n                        value={correctDateTime(data.date_of_document)}\r\n                        onChange={(e) =>\r\n                            updateData({date_of_document: e.target.value})}\r\n                        InputLabelProps={{\r\n                            shrink: true,\r\n                        }}\r\n                    />\r\n                </Grid>\r\n\r\n                <Grid container justify={'space-between'}style={{marginTop: '30px'}}>\r\n                    <TextField\r\n                        label=\"Remarks:\"\r\n                        value={data.remarks}\r\n                        onChange={(e) => updateData({remarks: e.target.value})}\r\n                        fullWidth\r\n                        multiline\r\n                        rowsMax={2}\r\n                        variant=\"outlined\"\r\n                    />\r\n\r\n                    {emptyDiv}\r\n                </Grid>\r\n\r\n            </Grid>\r\n\r\n            <hr\r\n                className={classes.divisionLine}\r\n            />\r\n            <Grid container alignItems=\"flex-start\" style={{marginTop: '10px'}} spacing={2}>\r\n\r\n                <Grid container  style={{}} item xs={6}>\r\n                    <Typography variant=\"h5\" component=\"h5\" gutterBottom align=\"center\">\r\n                        Consignee details\r\n                    </Typography>\r\n\r\n                    <Grid container justify={'space-between'}style={{marginTop: '10px'}}>\r\n                        <TextField\r\n                            label=\"ID:\"\r\n                            value={data.consignee_id}\r\n                            onChange={(e) => updateData({consignee_id: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n\r\n                        <FormControl\r\n                            variant=\"outlined\"\r\n                            className={classes.formControlNoMargin}\r\n                        >\r\n                            <InputLabel id=\"departure-arrival-label\">Language</InputLabel>\r\n\r\n                            <Select\r\n                                labelId=\"departure-arrival-label\"\r\n                                value={data.consignee_language_code}\r\n                                onChange={(e) => {\r\n                                    updateData({consignee_language_code: e.target.value})\r\n                                }}\r\n                            >\r\n                                {Object.keys(ListOfLanguages).map((language, index) =>\r\n                                    <MenuItem key={index} value={language}>\r\n                                        {`${ListOfLanguages[language].name}-  ${language}`}\r\n                                    </MenuItem>\r\n                                )}\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid container justify={'space-between'}style={{marginTop: '30px'}}>\r\n                        <TextField\r\n                            label=\"Name:\"\r\n                            value={data.consignee_name}\r\n                            onChange={(e) => updateData({consignee_name: e.target.value})}\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid container justify={'space-between'}style={{marginTop: '30px'}}>\r\n                        <TextField\r\n                            label=\"Tax Registration ID:\"\r\n                            value={data.consignee_tax_id}\r\n                            onChange={(e) => updateData({consignee_tax_id: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n\r\n                        <TextField\r\n                            label=\"Registered Tax/TypeCode:\"\r\n                            value={data.consignee_tax_type_code}\r\n                            onChange={(e) => updateData({consignee_tax_type_code: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n\r\n                    </Grid>\r\n                    <Typography variant=\"h5\" component=\"h5\" gutterBottom style={{marginTop: '30px'}}>\r\n                        Defined contract details\r\n                    </Typography>\r\n                    <Grid container justify={'space-between'} style={{marginTop: '10px'}}>\r\n\r\n                        <TextField\r\n                            label=\"Name:\"\r\n                            value={data.consignee_person_name}\r\n                            onChange={(e) => updateData({consignee_person_name: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n\r\n                        <TextField\r\n                            label=\"Mobile telefone:\"\r\n                            value={data.consignee_complete_number}\r\n                            onChange={(e) => updateData({consignee_complete_number: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid container justify={'space-between'} style={{marginTop: '30px'}}>\r\n\r\n                        <TextField\r\n                            label=\"Email:\"\r\n                            value={data.consignee_email}\r\n                            onChange={(e) => updateData({consignee_email: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n\r\n                        <TextField\r\n                            label=\"Postcode:\"\r\n                            value={data.consignee_postcode}\r\n                            onChange={(e) => updateData({consignee_postcode: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid container justify={'space-between'} style={{marginTop: '30px'}}>\r\n\r\n                        <TextField\r\n                            label=\"Street:\"\r\n                            value={data.consignee_street_name}\r\n                            onChange={(e) => updateData({consignee_street_name: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n\r\n                        <TextField\r\n                            label=\"City:\"\r\n                            value={data.consignee_city_name}\r\n                            onChange={(e) => updateData({consignee_city_name: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid container justify={'space-between'} style={{marginTop: '30px'}}>\r\n\r\n                        <FormControl\r\n                            variant=\"outlined\"\r\n                            className={classes.formControlNoMargin}\r\n                        >\r\n                            <InputLabel id=\"departure-arrival-label\">Country</InputLabel>\r\n\r\n                            <Select\r\n                                labelId=\"departure-arrival-label\"\r\n                                value={data.consignee_country_code}\r\n                                onChange={(e) => {\r\n                                    updateData({consignee_country_code: e.target.value})\r\n                                }}\r\n                            >\r\n                                {Object.keys(ListOfCountries).map((country, index) =>\r\n                                    <MenuItem key={index} value={country}>\r\n                                        {`${country} - ${ListOfCountries[country]}`}\r\n                                    </MenuItem>\r\n                                )}\r\n                            </Select>\r\n                        </FormControl>\r\n\r\n                        <TextField\r\n                            label=\"Country subdivision:\"\r\n                            value={data.consignee_country_subdivision_name}\r\n                            onChange={(e) => updateData({consignee_country_subdivision_name: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </Grid>\r\n\r\n                </Grid>\r\n\r\n                <Grid container  style={{}} item xs={6}>\r\n                    <Typography variant=\"h5\" component=\"h5\" gutterBottom align=\"center\">\r\n                        Carrier details\r\n                    </Typography>\r\n\r\n                    <Grid container justify={'space-between'}style={{marginTop: '10px'}}>\r\n                        <TextField\r\n                            label=\"ID:\"\r\n                            value={data.carrier_id}\r\n                            onChange={(e) => updateData({carrier_id: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n\r\n                        <FormControl\r\n                            variant=\"outlined\"\r\n                            className={classes.formControlNoMargin}\r\n                        >\r\n                            <InputLabel id=\"departure-arrival-label\">Language</InputLabel>\r\n\r\n                            <Select\r\n                                labelId=\"departure-arrival-label\"\r\n                                value={data.carrier_language_code}\r\n                                onChange={(e) => {\r\n                                    updateData({carrier_language_code: e.target.value})\r\n                                }}\r\n                            >\r\n                                {Object.keys(ListOfLanguages).map((language, index) =>\r\n                                    <MenuItem key={index} value={language}>\r\n                                        {`${ListOfLanguages[language].name}-  ${language}`}\r\n                                    </MenuItem>\r\n                                )}\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid container justify={'space-between'}style={{marginTop: '30px'}}>\r\n                        <TextField\r\n                            label=\"Name:\"\r\n                            value={data.carrier_name}\r\n                            onChange={(e) => updateData({carrier_name: e.target.value})}\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid container justify={'space-between'}style={{marginTop: '30px'}}>\r\n                        <TextField\r\n                            label=\"Tax Registration ID:\"\r\n                            value={data.carrier_tax_id}\r\n                            onChange={(e) => updateData({carrier_tax_id: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n\r\n                        <TextField\r\n                            label=\"Registered Tax/TypeCode:\"\r\n                            value={data.carrier_tax_type_code}\r\n                            onChange={(e) => updateData({carrier_tax_type_code: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n\r\n                    </Grid>\r\n                    <Typography variant=\"h5\" component=\"h5\" gutterBottom style={{marginTop: '30px'}}>\r\n                        Defined contract details\r\n                    </Typography>\r\n                    <Grid container justify={'space-between'} style={{marginTop: '10px'}}>\r\n\r\n                        <TextField\r\n                            label=\"Name:\"\r\n                            value={data.carrier_person_name}\r\n                            onChange={(e) => updateData({carrier_person_name: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n\r\n                        <TextField\r\n                            label=\"Mobile telefone:\"\r\n                            value={data.carrier_complete_number}\r\n                            onChange={(e) => updateData({carrier_complete_number: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid container justify={'space-between'} style={{marginTop: '30px'}}>\r\n\r\n                        <TextField\r\n                            label=\"Email:\"\r\n                            value={data.carrier_email}\r\n                            onChange={(e) => updateData({carrier_email: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n\r\n                        <TextField\r\n                            label=\"Postcode:\"\r\n                            value={data.carrier_postcode}\r\n                            onChange={(e) => updateData({carrier_postcode: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid container justify={'space-between'} style={{marginTop: '30px'}}>\r\n\r\n                        <TextField\r\n                            label=\"Street:\"\r\n                            value={data.carrier_street_name}\r\n                            onChange={(e) => updateData({carrier_street_name: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n\r\n                        <TextField\r\n                            label=\"City:\"\r\n                            value={data.carrier_city_name}\r\n                            onChange={(e) => updateData({carrier_city_name: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid container justify={'space-between'} style={{marginTop: '30px'}}>\r\n\r\n                        <FormControl\r\n                            variant=\"outlined\"\r\n                            className={classes.formControlNoMargin}\r\n                        >\r\n                            <InputLabel id=\"departure-arrival-label\">Country</InputLabel>\r\n\r\n                            <Select\r\n                                labelId=\"departure-arrival-label\"\r\n                                value={data.carrier_country_code}\r\n                                onChange={(e) => {\r\n                                    updateData({carrier_country_code: e.target.value})\r\n                                }}\r\n                            >\r\n                                {Object.keys(ListOfCountries).map((country, index) =>\r\n                                    <MenuItem key={index} value={country}>\r\n                                        {`${country} - ${ListOfCountries[country]}`}\r\n                                    </MenuItem>\r\n                                )}\r\n                            </Select>\r\n                        </FormControl>\r\n\r\n                        <TextField\r\n                            label=\"Country subdivision:\"\r\n                            value={data.carrier_country_subdivision_name}\r\n                            onChange={(e) => updateData({carrier_country_subdivision_name: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </Grid>\r\n\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <hr\r\n                className={classes.divisionLine}\r\n            />\r\n            <Grid container alignItems=\"flex-start\" style={{marginTop: '10px'}} spacing={2}>\r\n                <Grid container  style={{}} item xs={6}>\r\n                    <Typography variant=\"h5\" component=\"h5\" gutterBottom align=\"center\">\r\n                        Place and date of taking over the goods\r\n                    </Typography>\r\n                    <Grid container justify={'space-between'}style={{marginTop: '10px'}}>\r\n                        <TextField\r\n                            label=\"Date\"\r\n                            type=\"date\"\r\n                            contentEditable={false}\r\n                            className={classes.datePicker}\r\n                            variant={'outlined'}\r\n                            value={correctDateTime(data.date_of_pickup)}\r\n                            onChange={(e) =>\r\n                                updateData({date_of_pickup: e.target.value})}\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                        />\r\n\r\n                        <TextField\r\n                            label=\"Name:\"\r\n                            value={data.pickup_location_name}\r\n                            onChange={(e) => updateData({pickup_location_name: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid container justify={'space-between'}style={{marginTop: '30px'}}>\r\n                        <FormControl\r\n                            variant=\"outlined\"\r\n                            className={classes.formControlNoMargin}\r\n                        >\r\n                            <InputLabel id=\"departure-arrival-label\">Country</InputLabel>\r\n\r\n                            <Select\r\n                                labelId=\"departure-arrival-label\"\r\n                                value={data.pickup_country_code}\r\n                                onChange={(e) => {\r\n                                    updateData({pickup_country_code: e.target.value})\r\n                                }}\r\n                            >\r\n                                {Object.keys(ListOfCountries).map((country, index) =>\r\n                                    <MenuItem key={index} value={country}>\r\n                                        {`${country} - ${ListOfCountries[country]}`}\r\n                                    </MenuItem>\r\n                                )}\r\n                            </Select>\r\n                        </FormControl>\r\n\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container  style={{}} item xs={6}>\r\n                    <Typography variant=\"h5\" component=\"h5\" gutterBottom align=\"center\">\r\n                        Successive Carrier details\r\n                    </Typography>\r\n\r\n                    <Grid container justify={'space-between'}style={{marginTop: '10px'}}>\r\n                        <TextField\r\n                            label=\"ID:\"\r\n                            value={data.sub_carrier_id}\r\n                            onChange={(e) => updateData({sub_carrier_id: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n\r\n                        <FormControl\r\n                            variant=\"outlined\"\r\n                            className={classes.formControlNoMargin}\r\n                        >\r\n                            <InputLabel id=\"departure-arrival-label\">Language</InputLabel>\r\n\r\n                            <Select\r\n                                labelId=\"departure-arrival-label\"\r\n                                value={data.sub_carrier_language_code}\r\n                                onChange={(e) => {\r\n                                    updateData({sub_carrier_language_code: e.target.value})\r\n                                }}\r\n                            >\r\n                                {Object.keys(ListOfLanguages).map((language, index) =>\r\n                                    <MenuItem key={index} value={language}>\r\n                                        {`${ListOfLanguages[language].name}-  ${language}`}\r\n                                    </MenuItem>\r\n                                )}\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid container justify={'space-between'}style={{marginTop: '30px'}}>\r\n                        <TextField\r\n                            label=\"Name:\"\r\n                            value={data.sub_carrier_name}\r\n                            onChange={(e) => updateData({sub_carrier_name: e.target.value})}\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid container justify={'space-between'}style={{marginTop: '30px'}}>\r\n                        <TextField\r\n                            label=\"Tax Registration ID:\"\r\n                            value={data.sub_carrier_tax_id}\r\n                            onChange={(e) => updateData({sub_carrier_tax_id: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n\r\n                        <TextField\r\n                            label=\"Registered Tax/TypeCode:\"\r\n                            value={data.sub_carrier_tax_type_code}\r\n                            onChange={(e) => updateData({sub_carrier_tax_type_code: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n\r\n                    </Grid>\r\n                    <Typography variant=\"h5\" component=\"h5\" gutterBottom style={{marginTop: '30px'}}>\r\n                        Defined contract details\r\n                    </Typography>\r\n                    <Grid container justify={'space-between'} style={{marginTop: '10px'}}>\r\n\r\n                        <TextField\r\n                            label=\"Name:\"\r\n                            value={data.sub_carrier_person_name}\r\n                            onChange={(e) => updateData({sub_carrier_person_name: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n\r\n                        <TextField\r\n                            label=\"Mobile telefone:\"\r\n                            value={data.sub_carrier_complete_number}\r\n                            onChange={(e) => updateData({sub_carrier_complete_number: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid container justify={'space-between'} style={{marginTop: '30px'}}>\r\n\r\n                        <TextField\r\n                            label=\"Email:\"\r\n                            value={data.sub_carrier_email}\r\n                            onChange={(e) => updateData({sub_carrier_email: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n\r\n                        <TextField\r\n                            label=\"Postcode:\"\r\n                            value={data.sub_carrier_postcode}\r\n                            onChange={(e) => updateData({sub_carrier_postcode: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid container justify={'space-between'} style={{marginTop: '30px'}}>\r\n\r\n                        <TextField\r\n                            label=\"Street:\"\r\n                            value={data.sub_carrier_street_name}\r\n                            onChange={(e) => updateData({sub_carrier_street_name: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n\r\n                        <TextField\r\n                            label=\"City:\"\r\n                            value={data.sub_carrier_city_name}\r\n                            onChange={(e) => updateData({sub_carrier_city_name: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid container justify={'space-between'} style={{marginTop: '30px'}}>\r\n\r\n                        <FormControl\r\n                            variant=\"outlined\"\r\n                            className={classes.formControlNoMargin}\r\n                        >\r\n                            <InputLabel id=\"departure-arrival-label\">Country</InputLabel>\r\n\r\n                            <Select\r\n                                labelId=\"departure-arrival-label\"\r\n                                value={data.sub_carrier_country_code}\r\n                                onChange={(e) => {\r\n                                    updateData({sub_carrier_country_code: e.target.value})\r\n                                }}\r\n                            >\r\n                                {Object.keys(ListOfCountries).map((country, index) =>\r\n                                    <MenuItem key={index} value={country}>\r\n                                        {`${country} - ${ListOfCountries[country]}`}\r\n                                    </MenuItem>\r\n                                )}\r\n                            </Select>\r\n                        </FormControl>\r\n\r\n                        <TextField\r\n                            label=\"Country subdivision:\"\r\n                            value={data.sub_carrier_country_subdivision_name}\r\n                            onChange={(e) => updateData({sub_carrier_country_subdivision_name: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </Grid>\r\n\r\n                </Grid>\r\n\r\n            </Grid>\r\n            <hr\r\n                className={classes.divisionLine}\r\n            />\r\n            <Grid container alignItems=\"flex-start\" style={{marginTop: '10px'}} spacing={2}>\r\n                <Grid container  style={{}} item xs={6}>\r\n                    <Typography variant=\"h5\" component=\"h5\" gutterBottom align=\"center\">\r\n                        Place and date of delivery the goods\r\n                    </Typography>\r\n                    <Grid container justify={'space-between'}style={{marginTop: '10px'}}>\r\n                        <TextField\r\n                            label=\"Date\"\r\n                            type=\"date\"\r\n                            contentEditable={false}\r\n                            className={classes.datePicker}\r\n                            variant={'outlined'}\r\n                            value={correctDateTime(data.date_of_delivery)}\r\n                            onChange={(e) =>\r\n                                updateData({date_of_delivery: e.target.value})}\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                        />\r\n\r\n                        <TextField\r\n                            label=\"Name:\"\r\n                            value={data.delivery_place_name}\r\n                            onChange={(e) => updateData({delivery_place_name: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid container justify={'space-between'}style={{marginTop: '30px'}}>\r\n                        <FormControl\r\n                            variant=\"outlined\"\r\n                            className={classes.formControlNoMargin}\r\n                        >\r\n                            <InputLabel id=\"departure-arrival-label\">Country</InputLabel>\r\n\r\n                            <Select\r\n                                labelId=\"departure-arrival-label\"\r\n                                value={data.delivery_country_code}\r\n                                onChange={(e) => {\r\n                                    updateData({delivery_country_code: e.target.value})\r\n                                }}\r\n                            >\r\n                                {Object.keys(ListOfCountries).map((country, index) =>\r\n                                    <MenuItem key={index} value={country}>\r\n                                        {`${country} - ${ListOfCountries[country]}`}\r\n                                    </MenuItem>\r\n                                )}\r\n                            </Select>\r\n                        </FormControl>\r\n\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container  style={{}} item xs={6}>\r\n                    <Typography variant=\"h5\" component=\"h5\" gutterBottom align=\"center\">\r\n                        Carriers reservations and observations:\r\n                    </Typography>\r\n                    <Grid container justify={'space-between'}style={{marginTop: '10px'}}>\r\n\r\n                        <TextField\r\n                            label=\"Reservation/observation:\"\r\n                            value={data.additional_note_1}\r\n                            onChange={(e) => updateData({additional_note_1: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n                        <TextField\r\n                            label=\"Reservation/observation:\"\r\n                            value={data.additional_note_2}\r\n                            onChange={(e) => updateData({additional_note_2: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid container justify={'space-between'}style={{marginTop: '30px'}}>\r\n                        <TextField\r\n                            label=\"Reservation/observation:\"\r\n                            value={data.additional_note_3}\r\n                            onChange={(e) => updateData({additional_note_3: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n            <hr\r\n                className={classes.divisionLine}\r\n            />\r\n            <Grid container alignItems=\"flex-start\" style={{marginTop: '10px'}} spacing={2}>\r\n                <Grid container  style={{}} item xs={6}>\r\n                    <Typography variant=\"h5\" component=\"h5\" gutterBottom align=\"center\">\r\n                        Documents attached\r\n                    </Typography>\r\n                    <ReactDataGrid\r\n                        columns={documentsAttachedRows}\r\n                        rowGetter={i => data.documentsAttached[i]}\r\n                        rowsCount={data.documentsAttached.length}\r\n                        onGridRowsUpdated={onGridRowsUpdatedDocumentsAttached}\r\n                        enableCellSelect={true}\r\n\r\n                    />\r\n                    <Button variant=\"primary\" startIcon={<AddIcon/>} onClick={addRowDocumentsAttached}>Add row</Button>\r\n                    <Button variant=\"primary\" startIcon={<DeleteOutlineIcon/>} onClick={deleteRowDocumentsAttached}>Delete row</Button>\r\n                </Grid>\r\n            </Grid>\r\n            <hr\r\n                className={classes.divisionLine}\r\n            />\r\n            <Grid container alignItems=\"flex-start\" style={{marginTop: '10px'}} spacing={2}>\r\n                <Grid container  style={{}} item xs={6}>\r\n                    <Typography variant=\"h5\" component=\"h5\" gutterBottom align=\"center\">\r\n                        Supply Chain Consignment\r\n                    </Typography>\r\n                    <Grid container justify={'space-between'}style={{marginTop: '10px'}}>\r\n\r\n                        <TextField\r\n                            label=\"Gross weight (total):\"\r\n                            value={data.gross_weight}\r\n                            onChange={(e) => updateData({gross_weight: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n                        <TextField\r\n                            label=\"Volume (total):\"\r\n                            value={data.volume}\r\n                            onChange={(e) => updateData({volume: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid container justify={'space-between'}style={{marginTop: '30px'}}>\r\n                        <TextField\r\n                            label=\"COD amount:\"\r\n                            value={data.cod_amount}\r\n                            onChange={(e) => updateData({cod_amount: e.target.value})}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n            <hr\r\n                className={classes.divisionLine}\r\n            />\r\n            <Typography variant=\"h5\" component=\"h5\" gutterBottom style={{marginTop: '30px'}}>\r\n                Consignment\r\n            </Typography>\r\n\r\n            <Grid container justify={'space-between'} style={{marginTop: '30px'}}>\r\n                <ReactDataGrid\r\n                    columns={consignmentRows}\r\n                    rowGetter={i => data.consignment[i]}\r\n                    rowsCount={data.consignment.length}\r\n                    onGridRowsUpdated={onGridRowsUpdatedConsignment}\r\n                    enableCellSelect={true}\r\n\r\n                />\r\n            </Grid>\r\n            <Button variant=\"primary\" startIcon={<AddIcon/>} onClick={addRowConsignment}>Add row</Button>\r\n            <Button variant=\"primary\" startIcon={<DeleteOutlineIcon/>} onClick={deleteRowConsignment}>Delete row</Button>\r\n            <hr\r\n                className={classes.divisionLine}\r\n            />\r\n            <Grid container justify={'space-between'} style={{marginTop: '30px'}}>\r\n\r\n                <FormControl\r\n                    variant=\"outlined\"\r\n                    className={classes.formControlNoMargin}\r\n                >\r\n                    <InputLabel id=\"departure-arrival-label\">Established in</InputLabel>\r\n\r\n                    <Select\r\n                        labelId=\"departure-arrival-label\"\r\n                        value={data.established_country_code}\r\n                        onChange={(e) => {\r\n                            updateData({established_country_code: e.target.value})\r\n                        }}\r\n                    >\r\n                        {Object.keys(ListOfCountries).map((country, index) =>\r\n                            <MenuItem key={index} value={country}>\r\n                                {`${country} - ${ListOfCountries[country]}`}\r\n                            </MenuItem>\r\n                        )}\r\n                    </Select>\r\n                </FormControl>\r\n\r\n                <TextField\r\n                    label=\"Truck:\"\r\n                    value={data.truck}\r\n                    onChange={(e) => updateData({truck: e.target.value})}\r\n                    variant=\"outlined\"\r\n                />\r\n\r\n\r\n                <TextField\r\n                    label=\"Trailer:\"\r\n                    value={data.trailer}\r\n                    onChange={(e) => updateData({trailer: e.target.value})}\r\n                    variant=\"outlined\"\r\n                />\r\n            </Grid>\r\n            <Grid container justify={'space-between'} style={{marginTop: '30px'}}>\r\n\r\n                <TextField\r\n                    label=\"Sender's instruction:\"\r\n                    value={data.instruction}\r\n                    onChange={(e) => updateData({instruction: e.target.value})}\r\n                    variant=\"outlined\"\r\n                    multiline\r\n                    fullWidth\r\n                    rowsMax={4}\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n\r\n\r\n\r\n\r\n    </>\r\n}\r\n\r\nfunction correctDateTime(date) {\r\n    date = \"\" + date;\r\n    return date.substr(0, 16);\r\n}\r\n\r\nexport default PortForm;\r\n","import React from \"react\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select'\r\nimport '@date-io/date-fns';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport ListOfLanguages from '../../data/languages'\r\nimport ListOfCountries from '../../data/countries'\r\nimport ListOfCurrencies from '../../data/currencies'\r\nimport ReactDataGrid from \"react-data-grid\";\r\nimport DeleteOutlineIcon from \"@material-ui/icons/DeleteOutline\";\r\nimport countryCodes from \"../../functions/list_getters/countryCodes\";\r\nimport {Editors} from \"react-data-grid-addons\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 225,\r\n    },\r\n    datePicker: {\r\n        minWidth: 225,\r\n        width: 225\r\n    },\r\n    formControlNoMargin: {\r\n        minWidth: 225,\r\n    },\r\n}));\r\nconst {DropDownEditor} = Editors;\r\nconst countryCodesList = countryCodes.getCountriesWithCodes();\r\ncountryCodesList.unshift(\"(...)\")\r\nconst CountryCodesEditor = <DropDownEditor options={countryCodesList}/>;\r\n\r\nconst tradeLineItemsColumns = [\r\n    {key: \"NR\", name: \"NR\", editable: false, width: 50},\r\n    {key: \"Name\", name: \"Name\", editable: true, width: 150},\r\n    {key: \"Description\", name: \"Description\", editable: true, width: 250},\r\n    {key: \"Net_weight\", name: \"Net weight\", editable: true, width: 150},\r\n    {key: \"Gross_weight\", name: \"Gross weight\", editable: true, width: 150},\r\n    {key: \"Class_code\", name: \"Class Code\", editable: true, width: 150},\r\n    {key: \"Origin_country\", name: \"Origin  Country\", editable: true, editor: CountryCodesEditor, width: 150},\r\n    {key: \"Charge_amount\", name: \"Charge Amount\", editable: true, width: 150},\r\n    {key: \"Basis_quantity\", name: \"Basis Quantity\", editable: true, width: 150},\r\n    {key: \"Billed_quantity\", name: \"Billed Quantity\", editable: true, width: 150},\r\n    {key: \"Total_amount\", name: \"Total Amount\", editable: true, width: 150},\r\n    {key: \"Tax_total_amount\", name: \"Tax Total Amount\", editable: true, width: 150},\r\n    {key: \"Net_total_amount\", name: \"Net Total Amount\", editable: true, width: 150},\r\n];\r\n\r\nfunction PortForm({data, updateData, locationNumber}) {\r\n    const classes = useStyles();\r\n    const emptyDiv = <div className={classes.formControlNoMargin} style={{height: '0px'}}/>\r\n\r\n    function addRow() {\r\n        console.log(\"adding row\");\r\n        let number = data.tradeLineItems.length + 1\r\n        let row = {NR: number}\r\n        data.tradeLineItems.push(row);\r\n        updateData(data)\r\n    }\r\n\r\n    function deleteRow() {\r\n        data.tradeLineItems.pop();\r\n        updateData(data)\r\n    }\r\n\r\n    function onGridRowsUpdated({fromRow, toRow, updated}) {\r\n\r\n        const tradeLineItems = data.tradeLineItems.slice();\r\n        for (let i = fromRow; i <= toRow; i++) {\r\n            tradeLineItems[i] = {...tradeLineItems[i], ...updated};\r\n        }\r\n        data.tradeLineItems = tradeLineItems;\r\n        updateData(data)\r\n    }\r\n\r\n\r\n    return <>\r\n        <Typography variant=\"h3\" component=\"h3\" gutterBottom>\r\n            Invoice information\r\n        </Typography>\r\n\r\n        <Grid container justify={'space-between'} style={{marginTop: '30px'}}>\r\n\r\n            <TextField\r\n                label=\"Number of document:\"\r\n                value={data.invoice_id}\r\n                onChange={(e) => updateData({invoice_id: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Date of document\"\r\n                type=\"date\"\r\n                contentEditable={false}\r\n                className={classes.datePicker}\r\n                variant={'outlined'}\r\n                value={correctDateTime(data.date_of_document)}\r\n                onChange={(e) =>\r\n                    updateData({date_of_document: e.target.value})}\r\n                InputLabelProps={{\r\n                    shrink: true,\r\n                }}\r\n            />\r\n\r\n            {emptyDiv}\r\n        </Grid>\r\n\r\n        <Typography variant=\"h5\" component=\"h5\" gutterBottom style={{marginTop: '30px'}}>\r\n            Sender details\r\n        </Typography>\r\n\r\n        <Grid container justify={'space-between'}>\r\n\r\n            <TextField\r\n                label=\"ID:\"\r\n                value={data.seller_id}\r\n                onChange={(e) => updateData({seller_id: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Name:\"\r\n                value={data.seller_name}\r\n                onChange={(e) => updateData({seller_name: e.target.value})}\r\n                variant=\"outlined\"\r\n                style={{width: '59%'}}\r\n            />\r\n\r\n\r\n        </Grid>\r\n\r\n        <Grid container justify={'space-between'} style={{marginTop: '30px'}}>\r\n\r\n\r\n            <FormControl\r\n                variant=\"outlined\"\r\n                className={classes.formControlNoMargin}\r\n            >\r\n                <InputLabel id=\"departure-arrival-label\">Language</InputLabel>\r\n\r\n                <Select\r\n                    labelId=\"departure-arrival-label\"\r\n                    value={data.seller_language_code}\r\n                    onChange={(e) => {\r\n                        updateData({seller_language_code: e.target.value})\r\n                    }}\r\n                >\r\n                    {Object.keys(ListOfLanguages).map((language, index) =>\r\n                        <MenuItem key={index} value={language}>\r\n                            {`${ListOfLanguages[language].name}-  ${language}`}\r\n                        </MenuItem>\r\n                    )}\r\n                </Select>\r\n            </FormControl>\r\n\r\n            <TextField\r\n                label=\"Tax Registration ID:\"\r\n                value={data.seller_tax_id}\r\n                onChange={(e) => updateData({seller_tax_id: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Registered Tax/TypeCode:\"\r\n                value={data.seller_tax_type_code}\r\n                onChange={(e) => updateData({seller_tax_type_code: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n\r\n        </Grid>\r\n\r\n        <Typography variant=\"h5\" component=\"h5\" gutterBottom style={{marginTop: '30px'}}>\r\n            Defined contract details\r\n        </Typography>\r\n\r\n        <Grid container justify={'space-between'} style={{marginTop: '30px'}}>\r\n\r\n            <TextField\r\n                label=\"Name:\"\r\n                value={data.seller_person_name}\r\n                onChange={(e) => updateData({seller_person_name: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Mobile telefone:\"\r\n                value={data.seller_complete_number}\r\n                onChange={(e) => updateData({seller_complete_number: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Email:\"\r\n                value={data.seller_email}\r\n                onChange={(e) => updateData({seller_email: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n        </Grid>\r\n\r\n        <Grid container justify={'space-between'} style={{marginTop: '30px'}}>\r\n\r\n            <TextField\r\n                label=\"Postcode:\"\r\n                value={data.seller_postcode}\r\n                onChange={(e) => updateData({seller_postcode: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Street:\"\r\n                value={data.seller_street_name}\r\n                onChange={(e) => updateData({seller_street_name: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"City:\"\r\n                value={data.seller_city_name}\r\n                onChange={(e) => updateData({seller_city_name: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n        </Grid>\r\n\r\n        <Grid container justify={'space-between'} style={{marginTop: '30px'}}>\r\n\r\n            <FormControl\r\n                variant=\"outlined\"\r\n                className={classes.formControlNoMargin}\r\n            >\r\n                <InputLabel id=\"departure-arrival-label\">Country</InputLabel>\r\n\r\n                <Select\r\n                    labelId=\"departure-arrival-label\"\r\n                    value={data.seller_country_code}\r\n                    onChange={(e) => {\r\n                        updateData({seller_country_code: e.target.value})\r\n                    }}\r\n                >\r\n                    {Object.keys(ListOfCountries).map((country, index) =>\r\n                        <MenuItem key={index} value={country}>\r\n                            {`${country} - ${ListOfCountries[country]}`}\r\n                        </MenuItem>\r\n                    )}\r\n                </Select>\r\n            </FormControl>\r\n\r\n            <TextField\r\n                label=\"Country subdivision:\"\r\n                value={data.seller_country_subdivision_name}\r\n                onChange={(e) => updateData({seller_country_subdivision_name: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            {emptyDiv}\r\n        </Grid>\r\n\r\n        <Typography variant=\"h5\" component=\"h5\" gutterBottom style={{marginTop: '30px'}}>\r\n            Buyer details\r\n        </Typography>\r\n\r\n        <Grid container justify={'space-between'}>\r\n\r\n            <TextField\r\n                label=\"ID:\"\r\n                value={data.buyer_id}\r\n                onChange={(e) => updateData({buyer_id: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Name:\"\r\n                value={data.buyer_name}\r\n                onChange={(e) => updateData({buyer_name: e.target.value})}\r\n                variant=\"outlined\"\r\n                style={{width: '59%'}}\r\n            />\r\n\r\n\r\n\r\n        </Grid>\r\n\r\n        <Grid container justify={'space-between'} style={{marginTop: '30px'}}>\r\n\r\n            <FormControl\r\n                variant=\"outlined\"\r\n                className={classes.formControlNoMargin}\r\n            >\r\n                <InputLabel id=\"departure-arrival-label\">Language</InputLabel>\r\n\r\n                <Select\r\n                    labelId=\"departure-arrival-label\"\r\n                    value={data.buyer_language_code}\r\n                    onChange={(e) => {\r\n                        updateData({buyer_language_code: e.target.value})\r\n                    }}\r\n                >\r\n                    {Object.keys(ListOfLanguages).map((language, index) =>\r\n                        <MenuItem key={index} value={language}>\r\n                            {`${ListOfLanguages[language].name}-  ${language}`}\r\n                        </MenuItem>\r\n                    )}\r\n                </Select>\r\n            </FormControl>\r\n\r\n            <TextField\r\n                label=\"Tax Registration ID:\"\r\n                value={data.buyer_tax_id}\r\n                onChange={(e) => updateData({buyer_tax_id: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Registered Tax/TypeCode:\"\r\n                value={data.buyer_tax_type_code}\r\n                onChange={(e) => updateData({buyer_tax_type_code: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n\r\n        </Grid>\r\n\r\n        <Typography variant=\"h5\" component=\"h5\" gutterBottom style={{marginTop: '30px'}}>\r\n            Defined contract details\r\n        </Typography>\r\n\r\n        <Grid container justify={'space-between'} style={{marginTop: '30px'}}>\r\n\r\n            <TextField\r\n                label=\"Name:\"\r\n                value={data.buyer_person_name}\r\n                onChange={(e) => updateData({buyer_person_name: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Mobile telefone:\"\r\n                value={data.buyer_complete_number}\r\n                onChange={(e) => updateData({buyer_complete_number: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Email:\"\r\n                value={data.buyer_email}\r\n                onChange={(e) => updateData({buyer_email: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n        </Grid>\r\n\r\n        <Grid container justify={'space-between'} style={{marginTop: '30px'}}>\r\n\r\n            <TextField\r\n                label=\"Postcode:\"\r\n                value={data.buyer_postcode}\r\n                onChange={(e) => updateData({buyer_postcode: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Street:\"\r\n                value={data.buyer_street_name}\r\n                onChange={(e) => updateData({buyer_street_name: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"City:\"\r\n                value={data.buyer_city_name}\r\n                onChange={(e) => updateData({buyer_city_name: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n        </Grid>\r\n\r\n        <Grid container justify={'space-between'} style={{marginTop: '30px'}}>\r\n\r\n            <FormControl\r\n                variant=\"outlined\"\r\n                className={classes.formControlNoMargin}\r\n            >\r\n                <InputLabel id=\"departure-arrival-label\">Country</InputLabel>\r\n\r\n                <Select\r\n                    labelId=\"departure-arrival-label\"\r\n                    value={data.buyer_country_code}\r\n                    onChange={(e) => {\r\n                        updateData({buyer_country_code: e.target.value})\r\n                    }}\r\n                >\r\n                    {Object.keys(ListOfCountries).map((country, index) =>\r\n                        <MenuItem key={index} value={country}>\r\n                            {`${country} - ${ListOfCountries[country]}`}\r\n                        </MenuItem>\r\n                    )}\r\n                </Select>\r\n            </FormControl>\r\n\r\n            <TextField\r\n                label=\"Country subdivision:\"\r\n                value={data.buyer_country_subdivision_name}\r\n                onChange={(e) => updateData({buyer_country_subdivision_name: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            {emptyDiv}\r\n        </Grid>\r\n\r\n        <Typography variant=\"h5\" component=\"h5\" gutterBottom style={{marginTop: '30px'}}>\r\n            Trade line items\r\n        </Typography>\r\n\r\n        <Grid container justify={'space-between'} style={{marginTop: '30px'}}>\r\n        <ReactDataGrid\r\n            columns={tradeLineItemsColumns}\r\n            rowGetter={i => data.tradeLineItems[i]}\r\n            rowsCount={data.tradeLineItems.length}\r\n            onGridRowsUpdated={onGridRowsUpdated}\r\n            enableCellSelect={true}\r\n\r\n        />\r\n        </Grid>\r\n\r\n        <Button variant=\"primary\" startIcon={<AddIcon/>} onClick={addRow}>Add row</Button>\r\n        <Button variant=\"primary\" startIcon={<DeleteOutlineIcon/>} onClick={deleteRow}>Delete row</Button>\r\n\r\n        <Typography variant=\"h5\" component=\"h5\" gutterBottom style={{marginTop: '30px'}}>\r\n            Related Consignment\r\n        </Typography>\r\n\r\n        <Grid container justify={'space-between'} style={{marginTop: '30px'}}>\r\n\r\n            <TextField\r\n                label=\"Gross Weight:\"\r\n                value={data.gross_weight}\r\n                onChange={(e) => updateData({gross_weight: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Net Weight:\"\r\n                value={data.net_weight}\r\n                onChange={(e) => updateData({net_weight: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Package Quantity:\"\r\n                value={data.package_quantity}\r\n                onChange={(e) => updateData({package_quantity: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n        </Grid>\r\n\r\n\r\n        <Grid container justify={'space-between'} style={{marginTop: '30px'}}>\r\n\r\n            <TextField\r\n                label=\"Used  Logistics  Transport Means:\"\r\n                value={data.transport_means_id}\r\n                onChange={(e) => updateData({transport_means_id: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Occurrence\"\r\n                type=\"datetime-local\"\r\n                contentEditable={false}\r\n                className={classes.datePicker}\r\n                variant={'outlined'}\r\n                value={correctDateTime(data.occurrence_date_time)}\r\n                onChange={(e) =>\r\n                    updateData({occurrence_date_time: e.target.value})}\r\n                InputLabelProps={{\r\n                    shrink: true,\r\n                }}\r\n            />\r\n\r\n            {emptyDiv}\r\n        </Grid>\r\n\r\n        <Grid container justify={'space-between'} style={{marginTop: '30px'}}>\r\n\r\n            <TextField\r\n                label=\"Due Payable  Amount:\"\r\n                value={data.due_payable_amount}\r\n                onChange={(e) => updateData({due_payable_amount: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <FormControl\r\n                variant=\"outlined\"\r\n                className={classes.formControlNoMargin}\r\n            >\r\n                <InputLabel id=\"departure-arrival-label\">Currency</InputLabel>\r\n\r\n                <Select\r\n                    labelId=\"departure-arrival-label\"\r\n                    value={data.invoice_currency_code}\r\n                    onChange={(e) => {\r\n                        updateData({invoice_currency_code: e.target.value})\r\n                    }}\r\n                >\r\n                    {ListOfCurrencies.map((currency, index) =>\r\n                        <MenuItem key={index} value={currency.cc}>\r\n                            {`${currency.cc} - ${currency.name}`}\r\n                        </MenuItem>\r\n                    )}\r\n                </Select>\r\n            </FormControl>\r\n\r\n            {emptyDiv}\r\n        </Grid>\r\n\r\n        <Typography variant=\"h5\" component=\"h5\" gutterBottom style={{marginTop: '30px'}}>\r\n            Payee Party. Creditor Financial Account\r\n        </Typography>\r\n\r\n        <Grid container justify={'space-between'} style={{marginTop: '30px'}}>\r\n\r\n            <TextField\r\n                label=\"IBAN:\"\r\n                value={data.ibanID}\r\n                onChange={(e) => updateData({ibanID: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Account:\"\r\n                value={data.account_name}\r\n                onChange={(e) => updateData({account_name: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n            {emptyDiv}\r\n        </Grid>\r\n\r\n        <Typography variant=\"h5\" component=\"h5\" gutterBottom style={{marginTop: '30px'}}>\r\n            Trade Tax\r\n        </Typography>\r\n\r\n        <Grid container justify={'space-between'} style={{marginTop: '30px'}}>\r\n\r\n            <TextField\r\n                label=\"Exemption Reason Code:\"\r\n                value={data.exemption_reason_code}\r\n                onChange={(e) => updateData({exemption_reason_code: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n\r\n            <TextField\r\n                label=\"Trade Payment Terms:\"\r\n                value={data.payment_term_description}\r\n                onChange={(e) => updateData({payment_term_description: e.target.value})}\r\n                variant=\"outlined\"\r\n            />\r\n            {emptyDiv}\r\n        </Grid>\r\n    </>\r\n}\r\n\r\nfunction correctDateTime(date) {\r\n    date = \"\" + date;\r\n    return date.substr(0, 16);\r\n}\r\n\r\n\r\n\r\nexport default PortForm;\r\n","import React, {useState} from \"react\";\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport ShipFormComponent from \"../components/blocks/shipFormComponent\";\r\nimport PortForm from \"../components/blocks/portFormComponent\";\r\nimport VoyageForm from \"../components/blocks/voyageFormComponent\";\r\nimport CrewForm from \"../components/blocks/crewFormComponent\";\r\nimport Button from '@material-ui/core/Button';\r\nimport {config} from \"../config/shipDetailsConfig\";\r\nimport defaultDataConst from \"../config/consts/defaultDataConst\";\r\nimport listOfOptionsConst from \"../config/consts/listOfOptionsConst\";\r\nimport readXML from \"../functions/readXML/readXML\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport readXLS from \"../functions/readExcel/readXLSParent\";\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\r\nimport GetAppIcon from '@material-ui/icons/GetApp';\r\nimport PassengersForm from \"../components/blocks/passengersFormComponent\";\r\nimport createXML from \"../functions/generateXML/generateXML\";\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport HealthFormComponent from \"../components/blocks/healthFormComponent\";\r\nimport ShipStoresForm from \"../components/blocks/shipStoresFormComponent\";\r\nimport CrewEffectsForm from \"../components/blocks/crewEffectsFormComponent\";\r\nimport CargoForm from \"../components/blocks/cargoFormComponent\";\r\nimport SecurityFormComponent from \"../components/blocks/securityFormComponent\";\r\nimport DPGForm from \"../components/blocks/dpgFormComponent\";\r\nimport WasteFormComponent from \"../components/blocks/WasteFormComponent\";\r\nimport _ from 'underscore'\r\nimport MainPageInfo from './../config/JSON/shipCallsData.json'\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport CMRFormComponent from \"../components/blocks/cmrFormComponent\";\r\nimport InvoiceFormComponent from \"../components/blocks/invoiceFormComponent\";\r\nconst listOfOptions = listOfOptionsConst;\r\n\r\n\r\nconst defaultOption = 'CMR';\r\n\r\nconst drawerWidth = config.showDrawerIcons ? 200 : 180;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        // height: 70\r\n    },\r\n    drawer: {\r\n        width: drawerWidth,\r\n        flexShrink: 0,\r\n    },\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n    },\r\n    drawerContainer: {\r\n        overflow: 'auto',\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        padding: theme.spacing(3),\r\n    },\r\n    uploadFile: {\r\n        display: 'none'\r\n    }\r\n}));\r\n\r\nfunction CarDetails({history}) {\r\n    const location = history.location.pathname;\r\n    let locationNumber = parseInt(location.split('/')[2]);\r\n    locationNumber--;\r\n    const classes = useStyles();\r\n    const [activeItem, setActiveItem] = useState(listOfOptions.indexOf(listOfOptions.find(el => el.label === defaultOption)));\r\n\r\n    const [data, setData] = useState(() => {\r\n    //     let portOfCall = MainPageInfo[locationNumber].portCall;\r\n    //     let eta = MainPageInfo[locationNumber].ETA;\r\n    //     if (eta.split('.').length !== 0) {\r\n    //         let dates = eta.split('.');\r\n    //         if (dates[0].length !== 2) {\r\n    //             eta = `${dates[0]}-${dates[1]}-${dates[2]}T00:00`;\r\n    //         } else {\r\n    //             eta = `${dates[2]}-${dates[1]}-${dates[0]}T00:00`;\r\n    //         }\r\n    //     }\r\n    //     let companyName = MainPageInfo[locationNumber].agent;\r\n    //     let imo = MainPageInfo[locationNumber].imo;\r\n    //     let ship = MainPageInfo[locationNumber].ship;\r\n    //\r\n        const def = defaultDataConst;\r\n    //     def.port.portOfCall = portOfCall;\r\n    //     def.port.ETAPortOfCall = eta;\r\n    //     def.port.agent.company = companyName;\r\n    //     def.ship.name = ship;\r\n    //     def.ship.IMOnumber = imo;\r\n        return def\r\n    });\r\n    const [openErrorDialog, setOpenErrorDialog] = useState({open: false, error: {}});\r\n    const [uploadAnchorEl, setUploadAnchorEl] = React.useState(null);\r\n    const [downloadAnchorEl, setDownloadAnchorEl] = React.useState(null);\r\n    const handleUploadClick = (event) => {\r\n        setUploadAnchorEl(event.currentTarget);\r\n    };\r\n    const handleDownloadClick = (event) => {\r\n        setDownloadAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setUploadAnchorEl(null);\r\n        setDownloadAnchorEl(null);\r\n    };\r\n\r\n    console.log(\"All the data FROM PARENT!!\", data);\r\n    return (\r\n        <div className={classes.root}>\r\n            <CssBaseline/>\r\n            <AppBar position=\"fixed\" className={classes.appBar}>\r\n                <Toolbar>\r\n                    <Grid container justify={'space-between'}>\r\n                        <Typography variant=\"h6\">\r\n                            –ü—Ä–æ—Ç–æ—Ç–∏–ø –£–∫—Ä–∞—ó–Ω—Å—å–∫–æ–≥–æ –ú–æ—Ä—Å—å–∫–æ–≥–æ –Ñ–¥–∏–Ω–æ–≥–æ –í—ñ–∫–Ω–∞<br/>Ukrainian Maritime Single Window Prototype\r\n                        </Typography>\r\n                        <div>\r\n                            <Grid container justify={'flex-end'} style={{marginTop: '12px'}}>\r\n                                <Button\r\n                                    aria-controls=\"upload-menu\"\r\n                                    style={{marginRight: '30px'}}\r\n                                    variant=\"contained\"\r\n                                    startIcon={<CloudUploadIcon/>}\r\n                                    aria-haspopup=\"true\"\r\n                                    onClick={handleUploadClick}\r\n                                >\r\n                                    Upload\r\n                                </Button>\r\n                                <Menu\r\n                                    id=\"upload-menu\"\r\n                                    anchorEl={uploadAnchorEl}\r\n                                    keepMounted\r\n                                    open={Boolean(uploadAnchorEl)}\r\n                                    onClose={handleClose}\r\n                                >\r\n                                    <MenuItem onClick={handleClose}>\r\n                                        <label htmlFor=\"read-invoice-xml-file\">Upload Invoice XML document</label>\r\n                                    </MenuItem>\r\n                                </Menu>\r\n                                <Button\r\n                                    aria-controls=\"download-menu\"\r\n                                    startIcon={<GetAppIcon/>}\r\n                                    aria-haspopup=\"true\"\r\n                                    onClick={handleDownloadClick}\r\n                                    variant=\"contained\"\r\n                                >\r\n                                    Download\r\n                                </Button>\r\n                                <Menu\r\n                                    id=\"download-menu\"\r\n                                    anchorEl={downloadAnchorEl}\r\n                                    keepMounted\r\n                                    open={Boolean(downloadAnchorEl)}\r\n                                    onClose={handleClose}\r\n                                >\r\n                                    <MenuItem onClick={() => {\r\n                                        createXML(data, () => {}, false,\"invoice\")\r\n                                        handleClose();\r\n                                    }}>Save Invoice to XML (as draft)</MenuItem>\r\n                                    <MenuItem onClick={() => {\r\n                                        const onError = (errors) => {\r\n                                            let missingFields = [];\r\n                                            for (let block in errors) {\r\n                                                if (!errors.hasOwnProperty(block) || _.isEmpty(errors['' + block])) continue;\r\n                                                missingFields.push(`Block ${block}:`);\r\n                                                for (let field in errors['' + block]) {\r\n                                                    if (!errors['' + block].hasOwnProperty(field)) continue;\r\n                                                    if (typeof errors[block][field] === typeof true) {\r\n                                                        missingFields.push(`‚Üí  ${field} is empty`);\r\n                                                    } else {\r\n                                                        missingFields.push(`‚Üí  ${field} columns are empty`);\r\n                                                    }\r\n                                                }\r\n                                                missingFields.push(\"\");\r\n                                            }\r\n                                            setOpenErrorDialog({\r\n                                                open: true,\r\n                                                error: {\r\n                                                    title: \"Please fill in required fields first: \",\r\n                                                    text: missingFields\r\n                                                }\r\n                                            })\r\n                                        }\r\n                                   createXML(data, onError, true,\"invoice\");\r\n                                      handleClose();\r\n                                    }}>Generate full invoice XML file</MenuItem>\r\n                                    <MenuItem onClick={() => {\r\n                                        createXML(data, () => {}, false,\"cmr\")\r\n                                        handleClose();\r\n                                    }}>Save CMR to XML (as draft)</MenuItem>\r\n                                </Menu>\r\n                            </Grid>\r\n                            <input\r\n                                className={classes.uploadFile}\r\n                                onChange={() => {\r\n                                    const file = document.getElementById(\"read-invoice-xml-file\").files[0];\r\n                                    const reader = new FileReader();\r\n\r\n                                    reader.onload = (() => {\r\n                                        try {\r\n                                            let invoice = readXML(reader.result,'invoice');\r\n\r\n                                            let dataCopy = JSON.parse(JSON.stringify(data));\r\n                                            console.log(\"invoice in main \", invoice);\r\n                                            setData({\r\n                                                ...dataCopy, ...{\r\n                                                    invoice\r\n                                                }\r\n                                            });\r\n                                        } catch (e) {\r\n                                            setOpenErrorDialog({\r\n                                                open: true, error: {\r\n                                                    title: 'Error while reading XML',\r\n                                                    text: [e]\r\n                                                }\r\n                                            })\r\n                                            console.error(e);\r\n                                        }\r\n                                    })\r\n                                    reader.readAsText(file);\r\n                                }}\r\n                                id=\"read-invoice-xml-file\"\r\n                                type=\"file\"\r\n                            />\r\n                        </div>\r\n                    </Grid>\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            <Drawer\r\n                className={classes.drawer}\r\n                variant=\"permanent\"\r\n                classes={{\r\n                    paper: classes.drawerPaper,\r\n                }}\r\n            >\r\n                <Toolbar/>\r\n                <div className={classes.drawerContainer}>\r\n                    <List>\r\n                        {listOfOptions.map((item, index) => (\r\n                            <ListItem\r\n                                key={index}\r\n                                button\r\n                                color={'success'}\r\n                                selected={activeItem === index}\r\n                                onClick={() => {\r\n                                    setActiveItem(index)\r\n                                }}>\r\n\r\n                                {(config.showDrawerIcons && item.icon) && <ListItemIcon>{item.icon}</ListItemIcon>}\r\n                                <ListItemText primary={item.label}/>\r\n\r\n                            </ListItem>\r\n                        ))}\r\n                    </List>\r\n                </div>\r\n            </Drawer>\r\n            <main className={classes.content}>\r\n                <Toolbar/>\r\n                {getChildComponent(activeItem, [data, setData])}\r\n            </main>\r\n\r\n            <Dialog\r\n                open={openErrorDialog.open}\r\n                onClose={() => setOpenErrorDialog({\r\n                    open: false,\r\n                    error: {text: []}\r\n                })}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogTitle id=\"alert-dialog-title\">{openErrorDialog.error.title}</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-description\">\r\n                        {\r\n                            (Array.isArray(openErrorDialog.error.text))\r\n                                ?\r\n                                openErrorDialog.error.text.map((el) => <>{el}<br/></>)\r\n                                : openErrorDialog.error.text\r\n                        }\r\n\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        onClick={() => setOpenErrorDialog({\r\n                            open: false,\r\n                            error: {}\r\n                        })}\r\n                        color=\"primary\" autoFocus>\r\n                        Understood\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction getChildComponent(activeItem, [data, setData]) {\r\n    let selectedItem = listOfOptions[activeItem].value;\r\n\r\n    switch (selectedItem) {\r\n        case 'cmr':\r\n            return <CMRFormComponent data={data.cmr} updateData={(dataItem) => {\r\n                setData({...data, cmr: {...data.cmr, ...dataItem}})\r\n            }}/>\r\n        case 'invoice':\r\n            return <InvoiceFormComponent data={data.invoice} updateData={(dataItem) => {\r\n                setData({...data, invoice: {...data.invoice, ...dataItem}})\r\n            }}/>\r\n        default:\r\n            return <h1>Not supported yet</h1>\r\n    }\r\n}\r\n\r\nif (config.addOnCloseEvent) {\r\n    window.onload = function () {\r\n        window.addEventListener(\"beforeunload\", function (e) {\r\n            const confirmationMessage = 'It looks like you have been editing something. '\r\n                + 'If you leave before saving, your changes will be lost.';\r\n\r\n            (e || window.event).returnValue = confirmationMessage; //Gecko + IE\r\n            return confirmationMessage; //Gecko + Webkit, Safari, Chrome etc.\r\n        });\r\n    };\r\n}\r\nexport default CarDetails;","import React from \"react\";\r\nimport {\r\n    HashRouter as Router,\r\n    Switch,\r\n    Route,\r\n} from \"react-router-dom\";\r\nimport {createBrowserHistory} from 'history';\r\n\r\nimport HomePage from \"./pages/homePage\";\r\nimport NotFound from \"./pages/404NotFound\";\r\nimport CarDetails from \"./pages/carDetails\";\r\n\r\nconst history = createBrowserHistory();\r\n\r\nexport default class AppRouter extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <Router history={history}>\r\n                <Switch>\r\n                    <Route path={'/'} exact component={HomePage}/>\r\n                    <Route path={'/details/:id'} component={CarDetails}/>\r\n                    <Route path={'/fal-ukraine/'} exact component={HomePage}/>\r\n                    <Route path={'/fal-ukraine/details/:id'} exact component={HomePage}/>\r\n                    <Route component={NotFound}/>\r\n                </Switch>\r\n            </Router>\r\n        )\r\n\r\n    }\r\n\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport AppRouter from \"./router\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <AppRouter/>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}